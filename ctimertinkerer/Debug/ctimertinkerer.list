
ctimertinkerer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000026c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000400  08000400  00001408  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000400  08000400  00001408  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000404  08000404  00001404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001408  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000833  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002ec  00000000  00000000  00001c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00001f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007d  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d88  00000000  00000000  0000208d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c3f  00000000  00000000  00016e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000723c7  00000000  00000000  00017a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00089e1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001f8  00000000  00000000  00089e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0008a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003e8 	.word	0x080003e8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003e8 	.word	0x080003e8

080001d4 <enable_clocks>:
    led_state = !led_state;
}


// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001d8:	4b08      	ldr	r3, [pc, #32]	@ (80001fc <enable_clocks+0x28>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <enable_clocks+0x28>)
 80001de:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80001e2:	6153      	str	r3, [r2, #20]
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
	BX LR @ return from function call
	*/


	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80001e4:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <enable_clocks+0x28>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <enable_clocks+0x28>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	61d3      	str	r3, [r2, #28]
	LDR R1, [R0, APB1ENR] 	@ load the peripheral clock control register
	ORR R1, 1 << TIM2EN @ store a 1 in bit for the TIM2 enable flag
	STR R1, [R0, APB1ENR] @ enable the timer
	BX LR @ return
	*/
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000

08000200 <initialise_board>:

// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000206:	4b06      	ldr	r3, [pc, #24]	@ (8000220 <initialise_board+0x20>)
 8000208:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000210:	801a      	strh	r2, [r3, #0]
					@ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
								@ the MODER settings for pe8-15
	BX LR @ return from function call
	*/
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	48001002 	.word	0x48001002

08000224 <oneShotBlink>:
    uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
    *led_output = led_state ? 0xAA : 0x00;  // 0xAA = 10101010
    led_state = !led_state;
}

void oneShotBlink(void) {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
    uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <oneShotBlink+0x38>)
 800022c:	607b      	str	r3, [r7, #4]
    *led_output = 0xFF;  // Turn all on briefly
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	22ff      	movs	r2, #255	@ 0xff
 8000232:	701a      	strb	r2, [r3, #0]
    for (volatile int i = 0; i < 1000000; i++);  // Delay
 8000234:	2300      	movs	r3, #0
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	e002      	b.n	8000240 <oneShotBlink+0x1c>
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	3301      	adds	r3, #1
 800023e:	603b      	str	r3, [r7, #0]
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	4a07      	ldr	r2, [pc, #28]	@ (8000260 <oneShotBlink+0x3c>)
 8000244:	4293      	cmp	r3, r2
 8000246:	ddf8      	ble.n	800023a <oneShotBlink+0x16>
    *led_output = 0x00;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	48001015 	.word	0x48001015
 8000260:	000f423f 	.word	0x000f423f

08000264 <main>:

int main(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    enable_clocks();
 8000268:	f7ff ffb4 	bl	80001d4 <enable_clocks>
    initialise_board();
 800026c:	f7ff ffc8 	bl	8000200 <initialise_board>

    //Timer_Init(1000, periodicBlink); // Blink every 1000ms
    //Timer_Start();                   // Loop forever

    // Or trigger a one-shot event:
    Timer_StartOneShot(2000, oneShotBlink); // Trigger once after 2 seconds
 8000270:	4903      	ldr	r1, [pc, #12]	@ (8000280 <main+0x1c>)
 8000272:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000276:	f000 f805 	bl	8000284 <Timer_StartOneShot>
 800027a:	2300      	movs	r3, #0
}
 800027c:	4618      	mov	r0, r3
 800027e:	bd80      	pop	{r7, pc}
 8000280:	08000225 	.word	0x08000225

08000284 <Timer_StartOneShot>:
//            return;
//        }
//    }
//}

void Timer_StartOneShot(uint32_t delay_ms, TimerCallback cb) {
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
    oneShotCallback = cb;
 800028e:	4a2d      	ldr	r2, [pc, #180]	@ (8000344 <Timer_StartOneShot+0xc0>)
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	6013      	str	r3, [r2, #0]
    isOneShotMode = 1;
 8000294:	4b2c      	ldr	r3, [pc, #176]	@ (8000348 <Timer_StartOneShot+0xc4>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]

    TIM2->CR1 &= ~TIM_CR1_CEN;      // Stop timer before config
 800029a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a4:	f023 0301 	bic.w	r3, r3, #1
 80002a8:	6013      	str	r3, [r2, #0]
    TIM2->PSC = 8000 - 1;           // 1 ms tick
 80002aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ae:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80002b2:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = delay_ms;
 80002b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CNT = 0;
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c0:	2200      	movs	r2, #0
 80002c2:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM2->EGR |= TIM_EGR_UG;        // Force update
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6153      	str	r3, [r2, #20]
    TIM2->SR &= ~TIM_SR_UIF;
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d8:	691b      	ldr	r3, [r3, #16]
 80002da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002de:	f023 0301 	bic.w	r3, r3, #1
 80002e2:	6113      	str	r3, [r2, #16]
    TIM2->CR1 |= TIM_CR1_CEN;       // Start timer
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6013      	str	r3, [r2, #0]

    // Blocking wait for one-shot to complete
    while (1) {
        if (TIM2->SR & TIM_SR_UIF) {
 80002f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0f8      	beq.n	80002f4 <Timer_StartOneShot+0x70>
            TIM2->SR &= ~TIM_SR_UIF;
 8000302:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000306:	691b      	ldr	r3, [r3, #16]
 8000308:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800030c:	f023 0301 	bic.w	r3, r3, #1
 8000310:	6113      	str	r3, [r2, #16]

            if (oneShotCallback) oneShotCallback();
 8000312:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <Timer_StartOneShot+0xc0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d002      	beq.n	8000320 <Timer_StartOneShot+0x9c>
 800031a:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <Timer_StartOneShot+0xc0>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4798      	blx	r3
            oneShotCallback = 0;
 8000320:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <Timer_StartOneShot+0xc0>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
            isOneShotMode = 0;
 8000326:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <Timer_StartOneShot+0xc4>)
 8000328:	2200      	movs	r2, #0
 800032a:	701a      	strb	r2, [r3, #0]

            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop timer
 800032c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000336:	f023 0301 	bic.w	r3, r3, #1
 800033a:	6013      	str	r3, [r2, #0]
            return;
 800033c:	bf00      	nop
        }
    }
}
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	2000001c 	.word	0x2000001c
 8000348:	20000020 	.word	0x20000020

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	@ (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	@ (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	@ (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	@ (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 f811 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ff71 	bl	8000264 <main>

08000382 <LoopForever>:

LoopForever:
  b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	08000408 	.word	0x08000408
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	20000024 	.word	0x20000024

0800039c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC1_2_IRQHandler>
	...

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4d0d      	ldr	r5, [pc, #52]	@ (80003d8 <__libc_init_array+0x38>)
 80003a4:	4c0d      	ldr	r4, [pc, #52]	@ (80003dc <__libc_init_array+0x3c>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	2600      	movs	r6, #0
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	4d0b      	ldr	r5, [pc, #44]	@ (80003e0 <__libc_init_array+0x40>)
 80003b2:	4c0c      	ldr	r4, [pc, #48]	@ (80003e4 <__libc_init_array+0x44>)
 80003b4:	f000 f818 	bl	80003e8 <_init>
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	2600      	movs	r6, #0
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c8:	4798      	blx	r3
 80003ca:	3601      	adds	r6, #1
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d2:	4798      	blx	r3
 80003d4:	3601      	adds	r6, #1
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000400 	.word	0x08000400
 80003dc:	08000400 	.word	0x08000400
 80003e0:	08000400 	.word	0x08000400
 80003e4:	08000404 	.word	0x08000404

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
