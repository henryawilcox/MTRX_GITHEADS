
ctimertinkerer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000400  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000594  0800059c  0000159c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000594  08000594  0000159c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000594  08000594  0000159c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000594  0800059c  0000159c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000594  08000594  00001594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000598  08000598  00001598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000159c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000159c  2**0
                  CONTENTS
 10 .bss          00000030  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f68  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000421  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00002958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008f  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d88  00000000  00000000  00002ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c94  00000000  00000000  0001783f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000727f5  00000000  00000000  000184d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008acc8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000264  00000000  00000000  0008ad0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0008af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800057c 	.word	0x0800057c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800057c 	.word	0x0800057c

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <periodicBlink>:

void enable_clocks(void);
void initialise_board(void);

// Example LED blink callback
void periodicBlink(void) {
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
    static uint8_t led_state = 0; //start with LEDs off
    uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
 8000216:	4b0d      	ldr	r3, [pc, #52]	@ (800024c <periodicBlink+0x3c>)
 8000218:	607b      	str	r3, [r7, #4]
    *led_output = led_state ? 0xAA : 0x00;  // 0xAA = 10101010
 800021a:	4b0d      	ldr	r3, [pc, #52]	@ (8000250 <periodicBlink+0x40>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <periodicBlink+0x16>
 8000222:	22aa      	movs	r2, #170	@ 0xaa
 8000224:	e000      	b.n	8000228 <periodicBlink+0x18>
 8000226:	2200      	movs	r2, #0
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	701a      	strb	r2, [r3, #0]
    led_state = !led_state; //switch the LED state from 10101010 to 00000000 or vice versa dependent on current
 800022c:	4b08      	ldr	r3, [pc, #32]	@ (8000250 <periodicBlink+0x40>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	bf0c      	ite	eq
 8000234:	2301      	moveq	r3, #1
 8000236:	2300      	movne	r3, #0
 8000238:	b2db      	uxtb	r3, r3
 800023a:	461a      	mov	r2, r3
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <periodicBlink+0x40>)
 800023e:	701a      	strb	r2, [r3, #0]
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr
 800024c:	48001015 	.word	0x48001015
 8000250:	2000001c 	.word	0x2000001c

08000254 <enable_clocks>:
    *led_output = 0xFF;  // turn all LED's briefly
    for (volatile int i = 0; i < 10000; i++); //gunshot flash for some arbitrary amount of time, small relative to wait time
    *led_output = 0x00; //turn off LEDs
}

void enable_clocks(void) {
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000258:	4b0b      	ldr	r3, [pc, #44]	@ (8000288 <enable_clocks+0x34>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a0a      	ldr	r2, [pc, #40]	@ (8000288 <enable_clocks+0x34>)
 800025e:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000262:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000264:	4b08      	ldr	r3, [pc, #32]	@ (8000288 <enable_clocks+0x34>)
 8000266:	69db      	ldr	r3, [r3, #28]
 8000268:	4a07      	ldr	r2, [pc, #28]	@ (8000288 <enable_clocks+0x34>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // For EXTI
 8000270:	4b05      	ldr	r3, [pc, #20]	@ (8000288 <enable_clocks+0x34>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a04      	ldr	r2, [pc, #16]	@ (8000288 <enable_clocks+0x34>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6193      	str	r3, [r2, #24]
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40021000 	.word	0x40021000

0800028c <initialise_board>:

void initialise_board(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
    // Configure PE8-15 as output
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000292:	4b18      	ldr	r3, [pc, #96]	@ (80002f4 <initialise_board+0x68>)
 8000294:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f245 5255 	movw	r2, #21845	@ 0x5555
 800029c:	801a      	strh	r2, [r3, #0]

    // Turn off LEDs initially
    uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
 800029e:	4b16      	ldr	r3, [pc, #88]	@ (80002f8 <initialise_board+0x6c>)
 80002a0:	603b      	str	r3, [r7, #0]
    *led_output = 0x00;
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]

    // Configure PC13 as input (default state)
    GPIOA->MODER &= ~(3 << (0 * 2)); // PA0 input
 80002a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002b2:	f023 0303 	bic.w	r3, r3, #3
 80002b6:	6013      	str	r3, [r2, #0]

    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;      // Clear EXTI0 bits
 80002b8:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <initialise_board+0x70>)
 80002ba:	689b      	ldr	r3, [r3, #8]
 80002bc:	4a0f      	ldr	r2, [pc, #60]	@ (80002fc <initialise_board+0x70>)
 80002be:	f023 030f 	bic.w	r3, r3, #15
 80002c2:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |=  SYSCFG_EXTICR1_EXTI0_PA;   // Set EXTI0 to PA0
 80002c4:	4b0d      	ldr	r3, [pc, #52]	@ (80002fc <initialise_board+0x70>)
 80002c6:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <initialise_board+0x70>)
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	6093      	str	r3, [r2, #8]

    EXTI->IMR  |= EXTI_IMR_MR0;     // Unmask EXTI0
 80002cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <initialise_board+0x74>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000300 <initialise_board+0x74>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR0;    // Trigger on falling edge
 80002d8:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <initialise_board+0x74>)
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	4a08      	ldr	r2, [pc, #32]	@ (8000300 <initialise_board+0x74>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(EXTI0_IRQn);     // Enable EXTI0 interrupt in NVIC
 80002e4:	2006      	movs	r0, #6
 80002e6:	f7ff ff75 	bl	80001d4 <__NVIC_EnableIRQ>

}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	48001002 	.word	0x48001002
 80002f8:	48001015 	.word	0x48001015
 80002fc:	40010000 	.word	0x40010000
 8000300:	40010400 	.word	0x40010400

08000304 <periodic_action>:
	Timer_StartOneShot(operand, oneShotBlink); //call function to trigger a oneshot using the specified operand from the serial comm.
}

//THIS CODE SHOULD RUN AFTER YOU HAVE CHECKED IF THE OPERATOR IS ONESHOT AND THE OPERAND IS ALL DIGITS
//IT SHOULD BE DEFINED IN INTEGRATION.c OR IN A RELEVANT HEADER (INTEGRATION.h)
void periodic_action(uint32_t operand){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	setTimerPeriod(operand); //set the hardware timer ARR period as the operand given in the serial comm.
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f000 f891 	bl	8000434 <setTimerPeriod>
	Timer_Init(operand, periodicBlink); // initialise the timer for periodic blinking with the operand as the delay_time
 8000312:	4906      	ldr	r1, [pc, #24]	@ (800032c <periodic_action+0x28>)
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f000 f839 	bl	800038c <Timer_Init>
	Timer_Start();
 800031a:	f000 f877 	bl	800040c <Timer_Start>
	periodicBlink(); // Immediate first toggle
 800031e:	f7ff ff77 	bl	8000210 <periodicBlink>
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	08000211 	.word	0x08000211

08000330 <main>:




int main(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
    enable_clocks();
 8000336:	f7ff ff8d 	bl	8000254 <enable_clocks>
    initialise_board();
 800033a:	f7ff ffa7 	bl	800028c <initialise_board>

    //example of how to call the periodic function in the integration section

    uint32_t delay_period_example = 1000; //set some number for the period (0.5s on, 0.5s off)
 800033e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000342:	607b      	str	r3, [r7, #4]
    periodic_action(delay_period_example); //call for a repeated flash using this delay period
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f7ff ffdd 	bl	8000304 <periodic_action>
    /*
    uint32_t wait_time_example = 5000; //set some number for the one shot wait time (5s wait then a small gun shot flash)
    oneshot_action(wait_time_example); //call for the one shot using the specified delay time
    */

    while (1) {
 800034a:	bf00      	nop
 800034c:	e7fd      	b.n	800034a <main+0x1a>
	...

08000350 <__NVIC_EnableIRQ>:
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	2b00      	cmp	r3, #0
 8000360:	db0b      	blt.n	800037a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	f003 021f 	and.w	r2, r3, #31
 8000368:	4907      	ldr	r1, [pc, #28]	@ (8000388 <__NVIC_EnableIRQ+0x38>)
 800036a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036e:	095b      	lsrs	r3, r3, #5
 8000370:	2001      	movs	r0, #1
 8000372:	fa00 f202 	lsl.w	r2, r0, r2
 8000376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	e000e100 	.word	0xe000e100

0800038c <Timer_Init>:
static TimerCallback oneShotCallback = 0;

static uint32_t timerPeriod_ms = 0;
static uint8_t isOneShotMode = 0;

void Timer_Init(uint32_t period_ms, TimerCallback cb) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
    timerPeriod_ms = period_ms;
 8000396:	4a1a      	ldr	r2, [pc, #104]	@ (8000400 <Timer_Init+0x74>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6013      	str	r3, [r2, #0]
    periodicCallback = cb;
 800039c:	4a19      	ldr	r2, [pc, #100]	@ (8000404 <Timer_Init+0x78>)
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	6013      	str	r3, [r2, #0]

    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003a2:	4b19      	ldr	r3, [pc, #100]	@ (8000408 <Timer_Init+0x7c>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	4a18      	ldr	r2, [pc, #96]	@ (8000408 <Timer_Init+0x7c>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	61d3      	str	r3, [r2, #28]

    TIM2->PSC = 8000 - 1;  // 1 ms tick
 80003ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80003b6:	629a      	str	r2, [r3, #40]	@ 0x28
    //TIM2->ARR = timerPeriod_ms;
    TIM2->CNT = 0;
 80003b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003bc:	2200      	movs	r2, #0
 80003be:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM2->DIER |= TIM_DIER_UIE;  // Enable update interrupt
 80003c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	60d3      	str	r3, [r2, #12]
    TIM2->EGR |= TIM_EGR_UG;
 80003d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6153      	str	r3, [r2, #20]
    TIM2->SR &= ~TIM_SR_UIF;
 80003e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ea:	f023 0301 	bic.w	r3, r3, #1
 80003ee:	6113      	str	r3, [r2, #16]

    NVIC_EnableIRQ(TIM2_IRQn);
 80003f0:	201c      	movs	r0, #28
 80003f2:	f7ff ffad 	bl	8000350 <__NVIC_EnableIRQ>
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000028 	.word	0x20000028
 8000404:	20000020 	.word	0x20000020
 8000408:	40021000 	.word	0x40021000

0800040c <Timer_Start>:

void Timer_Start(void) {
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
    isOneShotMode = 0;
 8000410:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <Timer_Start+0x24>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000416:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6013      	str	r3, [r2, #0]
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	2000002c 	.word	0x2000002c

08000434 <setTimerPeriod>:

    NVIC_EnableIRQ(TIM2_IRQn);
    TIM2->CR1 |= TIM_CR1_CEN;
}

void setTimerPeriod(uint32_t new_period_ms) {
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
    timerPeriod_ms = new_period_ms;
 800043c:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <setTimerPeriod+0x34>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6013      	str	r3, [r2, #0]
    TIM2->ARR = timerPeriod_ms;
 8000442:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000446:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <setTimerPeriod+0x34>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->EGR |= TIM_EGR_UG;
 800044c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6153      	str	r3, [r2, #20]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	20000028 	.word	0x20000028

0800046c <TIM2_IRQHandler>:

uint32_t getTimerPeriod(void) {
    return timerPeriod_ms;
}

void TIM2_IRQHandler(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000470:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000474:	691b      	ldr	r3, [r3, #16]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	2b00      	cmp	r3, #0
 800047c:	d028      	beq.n	80004d0 <TIM2_IRQHandler+0x64>
        TIM2->SR &= ~TIM_SR_UIF;
 800047e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000482:	691b      	ldr	r3, [r3, #16]
 8000484:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000488:	f023 0301 	bic.w	r3, r3, #1
 800048c:	6113      	str	r3, [r2, #16]

        if (isOneShotMode) {
 800048e:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <TIM2_IRQHandler+0x68>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d015      	beq.n	80004c2 <TIM2_IRQHandler+0x56>
            if (oneShotCallback) oneShotCallback();
 8000496:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <TIM2_IRQHandler+0x6c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d002      	beq.n	80004a4 <TIM2_IRQHandler+0x38>
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <TIM2_IRQHandler+0x6c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4798      	blx	r3
            oneShotCallback = 0;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <TIM2_IRQHandler+0x6c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
            isOneShotMode = 0;
 80004aa:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <TIM2_IRQHandler+0x68>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop timer
 80004b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ba:	f023 0301 	bic.w	r3, r3, #1
 80004be:	6013      	str	r3, [r2, #0]
        } else {
            if (periodicCallback) periodicCallback();
        }
    }
}
 80004c0:	e006      	b.n	80004d0 <TIM2_IRQHandler+0x64>
            if (periodicCallback) periodicCallback();
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <TIM2_IRQHandler+0x70>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d002      	beq.n	80004d0 <TIM2_IRQHandler+0x64>
 80004ca:	4b04      	ldr	r3, [pc, #16]	@ (80004dc <TIM2_IRQHandler+0x70>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4798      	blx	r3
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000002c 	.word	0x2000002c
 80004d8:	20000024 	.word	0x20000024
 80004dc:	20000020 	.word	0x20000020

080004e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e0:	480d      	ldr	r0, [pc, #52]	@ (8000518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	@ (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	@ (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050e:	f000 f811 	bl	8000534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff ff0d 	bl	8000330 <main>

08000516 <LoopForever>:

LoopForever:
  b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   r0, =_estack
 8000518:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000524:	0800059c 	.word	0x0800059c
  ldr r2, =_sbss
 8000528:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800052c:	20000030 	.word	0x20000030

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>
	...

08000534 <__libc_init_array>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	4d0d      	ldr	r5, [pc, #52]	@ (800056c <__libc_init_array+0x38>)
 8000538:	4c0d      	ldr	r4, [pc, #52]	@ (8000570 <__libc_init_array+0x3c>)
 800053a:	1b64      	subs	r4, r4, r5
 800053c:	10a4      	asrs	r4, r4, #2
 800053e:	2600      	movs	r6, #0
 8000540:	42a6      	cmp	r6, r4
 8000542:	d109      	bne.n	8000558 <__libc_init_array+0x24>
 8000544:	4d0b      	ldr	r5, [pc, #44]	@ (8000574 <__libc_init_array+0x40>)
 8000546:	4c0c      	ldr	r4, [pc, #48]	@ (8000578 <__libc_init_array+0x44>)
 8000548:	f000 f818 	bl	800057c <_init>
 800054c:	1b64      	subs	r4, r4, r5
 800054e:	10a4      	asrs	r4, r4, #2
 8000550:	2600      	movs	r6, #0
 8000552:	42a6      	cmp	r6, r4
 8000554:	d105      	bne.n	8000562 <__libc_init_array+0x2e>
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	f855 3b04 	ldr.w	r3, [r5], #4
 800055c:	4798      	blx	r3
 800055e:	3601      	adds	r6, #1
 8000560:	e7ee      	b.n	8000540 <__libc_init_array+0xc>
 8000562:	f855 3b04 	ldr.w	r3, [r5], #4
 8000566:	4798      	blx	r3
 8000568:	3601      	adds	r6, #1
 800056a:	e7f2      	b.n	8000552 <__libc_init_array+0x1e>
 800056c:	08000594 	.word	0x08000594
 8000570:	08000594 	.word	0x08000594
 8000574:	08000594 	.word	0x08000594
 8000578:	08000598 	.word	0x08000598

0800057c <_init>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr

08000588 <_fini>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	bf00      	nop
 800058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058e:	bc08      	pop	{r3}
 8000590:	469e      	mov	lr, r3
 8000592:	4770      	bx	lr
