
ctimertinkerer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000374  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000508  08000510  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000508  08000508  00001510  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000508  08000508  00001510  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000508  08000510  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000508  08000508  00001508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001510  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ab3  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000028b  00000000  00000000  00001ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00002280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000083  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d88  00000000  00000000  000023c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c5e  00000000  00000000  0001714b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000727d0  00000000  00000000  00017da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008a579  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000214  00000000  00000000  0008a5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0008a7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004f0 	.word	0x080004f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004f0 	.word	0x080004f0

080001d4 <main>:
#include "timer.h"

void enable_clocks(void);
void initialise_board(void);

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
    enable_clocks(); //enabling clocks
 80001d8:	f000 f8c6 	bl	8000368 <enable_clocks>
    initialise_board(); //enabling all other ports and board
 80001dc:	f000 f8e0 	bl	80003a0 <initialise_board>

    while (1) {
 80001e0:	bf00      	nop
 80001e2:	e7fd      	b.n	80001e0 <main+0xc>

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	@ (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <Timer_StartOneShot>:
void Timer_Start(void) {
    isOneShotMode = 0;
    TIM2->CR1 |= TIM_CR1_CEN;
}

void Timer_StartOneShot(uint32_t delay_ms, TimerCallback cb) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
    isOneShotMode = 1;
 800022a:	4b21      	ldr	r3, [pc, #132]	@ (80002b0 <Timer_StartOneShot+0x90>)
 800022c:	2201      	movs	r2, #1
 800022e:	701a      	strb	r2, [r3, #0]
    oneShotCallback = cb;
 8000230:	4a20      	ldr	r2, [pc, #128]	@ (80002b4 <Timer_StartOneShot+0x94>)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	6013      	str	r3, [r2, #0]

    TIM2->CR1 &= ~TIM_CR1_CEN;      // Stop timer before configuring
 8000236:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000240:	f023 0301 	bic.w	r3, r3, #1
 8000244:	6013      	str	r3, [r2, #0]
    TIM2->PSC = 8000 - 1;           // 1 ms tick
 8000246:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800024e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = delay_ms;			// set overflow time
 8000250:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CNT = 0;					// start counting from 0
 8000258:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025c:	2200      	movs	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM2->DIER |= TIM_DIER_UIE;		//setting other necessary timer vals
 8000260:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000264:	68db      	ldr	r3, [r3, #12]
 8000266:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	60d3      	str	r3, [r2, #12]
    TIM2->EGR |= TIM_EGR_UG;
 8000270:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6153      	str	r3, [r2, #20]
    TIM2->SR &= ~TIM_SR_UIF;
 8000280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800028a:	f023 0301 	bic.w	r3, r3, #1
 800028e:	6113      	str	r3, [r2, #16]

    NVIC_EnableIRQ(TIM2_IRQn);		// enabling interrupt compatability
 8000290:	201c      	movs	r0, #28
 8000292:	f7ff ffa7 	bl	80001e4 <__NVIC_EnableIRQ>
    TIM2->CR1 |= TIM_CR1_CEN;		// enabling control register
 8000296:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6013      	str	r3, [r2, #0]
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000024 	.word	0x20000024
 80002b4:	20000020 	.word	0x20000020

080002b8 <TIM2_IRQHandler>:

uint32_t getTimerPeriod(void) {
    return timerPeriod_ms;					//getting the period
}

void TIM2_IRQHandler(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {			//if interrupt triggered
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c0:	691b      	ldr	r3, [r3, #16]
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d028      	beq.n	800031c <TIM2_IRQHandler+0x64>
        TIM2->SR &= ~TIM_SR_UIF;			//reset flag
 80002ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6113      	str	r3, [r2, #16]

        if (isOneShotMode) {				//if in oneshot, call oneshot function using callback
 80002da:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <TIM2_IRQHandler+0x68>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d015      	beq.n	800030e <TIM2_IRQHandler+0x56>
            if (oneShotCallback) oneShotCallback();
 80002e2:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <TIM2_IRQHandler+0x6c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d002      	beq.n	80002f0 <TIM2_IRQHandler+0x38>
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <TIM2_IRQHandler+0x6c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4798      	blx	r3
            oneShotCallback = 0;			//don't do any more oneshots after you've done the first
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <TIM2_IRQHandler+0x6c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
            isOneShotMode = 0;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <TIM2_IRQHandler+0x68>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop timing now
 80002fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000306:	f023 0301 	bic.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]
        } else {
            if (periodicCallback) periodicCallback();	//otherwise go back
        }
    }
}
 800030c:	e006      	b.n	800031c <TIM2_IRQHandler+0x64>
            if (periodicCallback) periodicCallback();	//otherwise go back
 800030e:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <TIM2_IRQHandler+0x70>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d002      	beq.n	800031c <TIM2_IRQHandler+0x64>
 8000316:	4b04      	ldr	r3, [pc, #16]	@ (8000328 <TIM2_IRQHandler+0x70>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4798      	blx	r3
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000024 	.word	0x20000024
 8000324:	20000020 	.word	0x20000020
 8000328:	2000001c 	.word	0x2000001c

0800032c <oneShotBlink>:
    uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
    *led_output = led_state ? 0xAA : 0x00;  // 0xAA = 10101010
    led_state = !led_state; //switch the LED state from 10101010 to 00000000 or vice versa dependent on current
}

void oneShotBlink(void) {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
    uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
 8000332:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <oneShotBlink+0x38>)
 8000334:	607b      	str	r3, [r7, #4]
    *led_output = 0xFF;  // turn all LED's briefly
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	22ff      	movs	r2, #255	@ 0xff
 800033a:	701a      	strb	r2, [r3, #0]
    for (volatile int i = 0; i < 10000; i++); //gunshot flash for some arbitrary amount of time, small relative to wait time
 800033c:	2300      	movs	r3, #0
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	e002      	b.n	8000348 <oneShotBlink+0x1c>
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800034e:	4293      	cmp	r3, r2
 8000350:	ddf7      	ble.n	8000342 <oneShotBlink+0x16>
    *led_output = 0x00; //turn off LEDs
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	48001015 	.word	0x48001015

08000368 <enable_clocks>:

void enable_clocks(void) {
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 800036c:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <enable_clocks+0x34>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a0a      	ldr	r2, [pc, #40]	@ (800039c <enable_clocks+0x34>)
 8000372:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000376:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000378:	4b08      	ldr	r3, [pc, #32]	@ (800039c <enable_clocks+0x34>)
 800037a:	69db      	ldr	r3, [r3, #28]
 800037c:	4a07      	ldr	r2, [pc, #28]	@ (800039c <enable_clocks+0x34>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // For EXTI
 8000384:	4b05      	ldr	r3, [pc, #20]	@ (800039c <enable_clocks+0x34>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a04      	ldr	r2, [pc, #16]	@ (800039c <enable_clocks+0x34>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6193      	str	r3, [r2, #24]
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <initialise_board>:

void initialise_board(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
    // Configure PE8-15 as output
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80003a6:	4b18      	ldr	r3, [pc, #96]	@ (8000408 <initialise_board+0x68>)
 80003a8:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f245 5255 	movw	r2, #21845	@ 0x5555
 80003b0:	801a      	strh	r2, [r3, #0]

    // Turn off LEDs initially
    uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
 80003b2:	4b16      	ldr	r3, [pc, #88]	@ (800040c <initialise_board+0x6c>)
 80003b4:	603b      	str	r3, [r7, #0]
    *led_output = 0x00;
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]

    // Configure PC13 as input (default state)
    GPIOA->MODER &= ~(3 << (0 * 2)); // PA0 input
 80003bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003c6:	f023 0303 	bic.w	r3, r3, #3
 80003ca:	6013      	str	r3, [r2, #0]

    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;      // Clear EXTI0 bits
 80003cc:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <initialise_board+0x70>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000410 <initialise_board+0x70>)
 80003d2:	f023 030f 	bic.w	r3, r3, #15
 80003d6:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |=  SYSCFG_EXTICR1_EXTI0_PA;   // Set EXTI0 to PA0
 80003d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <initialise_board+0x70>)
 80003da:	4a0d      	ldr	r2, [pc, #52]	@ (8000410 <initialise_board+0x70>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	6093      	str	r3, [r2, #8]

    EXTI->IMR  |= EXTI_IMR_MR0;     // Unmask EXTI0
 80003e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <initialise_board+0x74>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000414 <initialise_board+0x74>)
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR0;    // Trigger on falling edge
 80003ec:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <initialise_board+0x74>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	4a08      	ldr	r2, [pc, #32]	@ (8000414 <initialise_board+0x74>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(EXTI0_IRQn);     // Enable EXTI0 interrupt in NVIC
 80003f8:	2006      	movs	r0, #6
 80003fa:	f7ff fef3 	bl	80001e4 <__NVIC_EnableIRQ>

}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	48001002 	.word	0x48001002
 800040c:	48001015 	.word	0x48001015
 8000410:	40010000 	.word	0x40010000
 8000414:	40010400 	.word	0x40010400

08000418 <EXTI0_IRQHandler>:

//THESE CANNOT COEXIST BECAUSE THEY ARE BOTH DEFINITIONS OF THE BUTTON INTERRUPT HANDLER, IN INTEGRATION, THIS INTERRUPT WILL NOT BE USED TWICE
//SO THE FUNCTION CALLS WILL BE APPROPRIATELY NAMED AND DEFINED

//uncomment this interrupt handler for one shot timing of the period outlined in the handler Timer_StartOneShot(XXXX, oneShotBlink);
void EXTI0_IRQHandler(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR0) {
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <EXTI0_IRQHandler+0x34>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	2b00      	cmp	r3, #0
 8000428:	d00c      	beq.n	8000444 <EXTI0_IRQHandler+0x2c>
        EXTI->PR |= EXTI_PR_PR0;
 800042a:	4b08      	ldr	r3, [pc, #32]	@ (800044c <EXTI0_IRQHandler+0x34>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a07      	ldr	r2, [pc, #28]	@ (800044c <EXTI0_IRQHandler+0x34>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6153      	str	r3, [r2, #20]

        uint32_t delay = 1000;
 8000436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800043a:	607b      	str	r3, [r7, #4]
        Timer_StartOneShot(delay, oneShotBlink);
 800043c:	4904      	ldr	r1, [pc, #16]	@ (8000450 <EXTI0_IRQHandler+0x38>)
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f7ff feee 	bl	8000220 <Timer_StartOneShot>
    }
}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40010400 	.word	0x40010400
 8000450:	0800032d 	.word	0x0800032d

08000454 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000454:	480d      	ldr	r0, [pc, #52]	@ (800048c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000456:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000458:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800045c:	480c      	ldr	r0, [pc, #48]	@ (8000490 <LoopForever+0x6>)
  ldr r1, =_edata
 800045e:	490d      	ldr	r1, [pc, #52]	@ (8000494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000460:	4a0d      	ldr	r2, [pc, #52]	@ (8000498 <LoopForever+0xe>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000464:	e002      	b.n	800046c <LoopCopyDataInit>

08000466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046a:	3304      	adds	r3, #4

0800046c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800046c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000470:	d3f9      	bcc.n	8000466 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000472:	4a0a      	ldr	r2, [pc, #40]	@ (800049c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000474:	4c0a      	ldr	r4, [pc, #40]	@ (80004a0 <LoopForever+0x16>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000478:	e001      	b.n	800047e <LoopFillZerobss>

0800047a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800047c:	3204      	adds	r2, #4

0800047e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000480:	d3fb      	bcc.n	800047a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000482:	f000 f811 	bl	80004a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000486:	f7ff fea5 	bl	80001d4 <main>

0800048a <LoopForever>:

LoopForever:
  b LoopForever
 800048a:	e7fe      	b.n	800048a <LoopForever>
  ldr   r0, =_estack
 800048c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000498:	08000510 	.word	0x08000510
  ldr r2, =_sbss
 800049c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a0:	20000028 	.word	0x20000028

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>
	...

080004a8 <__libc_init_array>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	4d0d      	ldr	r5, [pc, #52]	@ (80004e0 <__libc_init_array+0x38>)
 80004ac:	4c0d      	ldr	r4, [pc, #52]	@ (80004e4 <__libc_init_array+0x3c>)
 80004ae:	1b64      	subs	r4, r4, r5
 80004b0:	10a4      	asrs	r4, r4, #2
 80004b2:	2600      	movs	r6, #0
 80004b4:	42a6      	cmp	r6, r4
 80004b6:	d109      	bne.n	80004cc <__libc_init_array+0x24>
 80004b8:	4d0b      	ldr	r5, [pc, #44]	@ (80004e8 <__libc_init_array+0x40>)
 80004ba:	4c0c      	ldr	r4, [pc, #48]	@ (80004ec <__libc_init_array+0x44>)
 80004bc:	f000 f818 	bl	80004f0 <_init>
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	10a4      	asrs	r4, r4, #2
 80004c4:	2600      	movs	r6, #0
 80004c6:	42a6      	cmp	r6, r4
 80004c8:	d105      	bne.n	80004d6 <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d0:	4798      	blx	r3
 80004d2:	3601      	adds	r6, #1
 80004d4:	e7ee      	b.n	80004b4 <__libc_init_array+0xc>
 80004d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004da:	4798      	blx	r3
 80004dc:	3601      	adds	r6, #1
 80004de:	e7f2      	b.n	80004c6 <__libc_init_array+0x1e>
 80004e0:	08000508 	.word	0x08000508
 80004e4:	08000508 	.word	0x08000508
 80004e8:	08000508 	.word	0x08000508
 80004ec:	0800050c 	.word	0x0800050c

080004f0 <_init>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr

080004fc <_fini>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr
