/**
******************************************************************************
* @file : main.c
* @author : Auto-generated by STM32CubeIDE
* @brief : Main program body
******************************************************************************
* @attention
*
* Copyright (c) 2023 STMicroelectronics.
* All rights reserved.
*
* This software is licensed under terms that can be found in the LICENSE file
* in the root directory of this software component.
* If no LICENSE file comes with this software, it is provided AS-IS.
*
******************************************************************************
*/

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

#include "serial.h"
#include "stm32f303xc.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

// Define buffer size for input string
#define MAX_BUFFER_SIZE 256

// Buffer to store received characters
uint8_t inputBuffer[MAX_BUFFER_SIZE];

void finished_transmission(uint32_t bytes_sent) {
    // This function will be called after a transmission is complete

    volatile uint32_t test = 0;
    // make a very simple delay
    for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
        // waste time !
    }
}

// Function to read a string from the serial port
uint16_t SerialInputString(SerialPort *serial_port) {
    uint16_t index = 0;
    uint8_t receivedChar;

    // Clear buffer first
    for (int i = 0; i < MAX_BUFFER_SIZE; i++) {
        inputBuffer[i] = 0;
    }

    // Read characters until enter key or buffer full
    while (index < MAX_BUFFER_SIZE - 1) {
        if (SerialReceiveChar(serial_port, &receivedChar)) {
            // Echo the character back
            SerialOutputChar(receivedChar, serial_port);

            // Store character in buffer
            inputBuffer[index++] = receivedChar;

            // Break if CR or LF
            if (receivedChar == '\r' || receivedChar == '\n') {
                break;
            }
        }
    }

    // Null-terminate the string
    inputBuffer[index] = '\0';

    // Output a newline for better formatting
    SerialOutputString((uint8_t*)"\r\n", serial_port);

    // Echo back the received string
    SerialOutputString((uint8_t*)"You entered: ", serial_port);
    SerialOutputString(inputBuffer, serial_port);
    SerialOutputString((uint8_t*)"\r\n", serial_port);

    return index;
}

int main(void)
{
    SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);

    // Send initial message
    SerialOutputString((uint8_t*)"Welcome\r\n", &USART1_PORT);

    /* Loop forever */
    for(;;) {
        SerialInputString(&USART1_PORT);
    }
}

