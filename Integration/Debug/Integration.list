
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f98  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08002138  08002138  00003138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e4  080024e4  0000418c  2**0
                  CONTENTS
  4 .ARM          00000008  080024e4  080024e4  000034e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024ec  080024ec  0000418c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024ec  080024ec  000034ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024f0  080024f0  000034f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  080024f4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000418c  2**0
                  CONTENTS
 10 .bss          00000384  2000018c  2000018c  0000418c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000510  20000510  0000418c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000031ac  00000000  00000000  000041bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c89  00000000  00000000  00007368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000258  00000000  00000000  00007ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000019f  00000000  00000000  00008250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016de5  00000000  00000000  000083ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ebd  00000000  00000000  0001f1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000786d0  00000000  00000000  00022091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009a761  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001204  00000000  00000000  0009a7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0009b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000018c 	.word	0x2000018c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002120 	.word	0x08002120

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000190 	.word	0x20000190
 80001dc:	08002120 	.word	0x08002120

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <EXTI0_IRQHandler>:
void (*on_button_press)() = 0x00;

static uint8_t led_state = 0x00;

void EXTI0_IRQHandler(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	// run the button press handler (make sure it is not null first !)
	if (on_button_press != 0x00) {
 80002b4:	4b07      	ldr	r3, [pc, #28]	@ (80002d4 <EXTI0_IRQHandler+0x24>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <EXTI0_IRQHandler+0x12>
		on_button_press();
 80002bc:	4b05      	ldr	r3, [pc, #20]	@ (80002d4 <EXTI0_IRQHandler+0x24>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3
	}

	// reset the interrupt (so it doesn't keep firing until the next trigger)
	EXTI->PR |= EXTI_PR_PR0;
 80002c2:	4b05      	ldr	r3, [pc, #20]	@ (80002d8 <EXTI0_IRQHandler+0x28>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a04      	ldr	r2, [pc, #16]	@ (80002d8 <EXTI0_IRQHandler+0x28>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6153      	str	r3, [r2, #20]
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200001a8 	.word	0x200001a8
 80002d8:	40010400 	.word	0x40010400

080002dc <SetLEDBitmask>:
/**
 * Set the LED state using a bitmask
 * @param mask Bitmask representing LED states
 */
void SetLEDBitmask(uint8_t mask)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
    // Store the new LED state
    led_state = mask;
 80002e6:	4a07      	ldr	r2, [pc, #28]	@ (8000304 <SetLEDBitmask+0x28>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	7013      	strb	r3, [r2, #0]

    // Write the pattern to the high byte of the ODR register (PE8-PE15)
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80002ec:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <SetLEDBitmask+0x2c>)
 80002ee:	60fb      	str	r3, [r7, #12]
    *led_register = mask;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	79fa      	ldrb	r2, [r7, #7]
 80002f4:	701a      	strb	r2, [r3, #0]
}
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	200001ac 	.word	0x200001ac
 8000308:	48001015 	.word	0x48001015

0800030c <is_number>:
#include "serial_interrupt.h"
#include "stm32f303xc.h"



int is_number(const char *str) {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
    if (str == NULL || *str == '\0') return 0; // Empty or NULL string
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d003      	beq.n	8000322 <is_number+0x16>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d10e      	bne.n	8000340 <is_number+0x34>
 8000322:	2300      	movs	r3, #0
 8000324:	e011      	b.n	800034a <is_number+0x3e>

    while (*str) {
        if (*str < '0' || *str > '9') {
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b2f      	cmp	r3, #47	@ 0x2f
 800032c:	d903      	bls.n	8000336 <is_number+0x2a>
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2b39      	cmp	r3, #57	@ 0x39
 8000334:	d901      	bls.n	800033a <is_number+0x2e>
            return 0; // Found a non-digit character
 8000336:	2300      	movs	r3, #0
 8000338:	e007      	b.n	800034a <is_number+0x3e>
        }
        str++;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3301      	adds	r3, #1
 800033e:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1ee      	bne.n	8000326 <is_number+0x1a>
    }
    return 1; // All characters were digits
 8000348:	2301      	movs	r3, #1
}
 800034a:	4618      	mov	r0, r3
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
	...

08000358 <completion_callback>:

void completion_callback(uint8_t *string_buffer, uint8_t length) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b0c8      	sub	sp, #288	@ 0x120
 800035c:	af00      	add	r7, sp, #0
 800035e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000362:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000366:	6018      	str	r0, [r3, #0]
 8000368:	460a      	mov	r2, r1
 800036a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800036e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8000372:	701a      	strb	r2, [r3, #0]
    // Copy to modifiable buffer
    char buffer[BUFFER_SIZE];
    strncpy(buffer, (char*)string_buffer, BUFFER_SIZE);
 8000374:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000378:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800037c:	f107 0008 	add.w	r0, r7, #8
 8000380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000384:	6819      	ldr	r1, [r3, #0]
 8000386:	f000 ffca 	bl	800131e <strncpy>
    buffer[BUFFER_SIZE - 1] = '\0';
 800038a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800038e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000392:	2200      	movs	r2, #0
 8000394:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    // Split into operation and operand
    char *operation = strtok(buffer, " ");
 8000398:	f107 0308 	add.w	r3, r7, #8
 800039c:	4977      	ldr	r1, [pc, #476]	@ (800057c <completion_callback+0x224>)
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 ffd0 	bl	8001344 <strtok>
 80003a4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    char *operand = strtok(NULL, "\r\n");
 80003a8:	4975      	ldr	r1, [pc, #468]	@ (8000580 <completion_callback+0x228>)
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 ffca 	bl	8001344 <strtok>
 80003b0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    // Print error message if either operation or operation are empty
    if (operation == NULL || operand == NULL){
 80003b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d003      	beq.n	80003c4 <completion_callback+0x6c>
 80003bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d104      	bne.n	80003ce <completion_callback+0x76>
        SerialOutputString((uint8_t*)"Invalid input.\r\n", &USART1_PORT);
 80003c4:	496f      	ldr	r1, [pc, #444]	@ (8000584 <completion_callback+0x22c>)
 80003c6:	4870      	ldr	r0, [pc, #448]	@ (8000588 <completion_callback+0x230>)
 80003c8:	f000 f9e0 	bl	800078c <SerialOutputString>
        return;
 80003cc:	e0d2      	b.n	8000574 <completion_callback+0x21c>
    }

    // If checks for each operation
    // LED operation
    if (strcmp(operation, "led") == 0) {
 80003ce:	496f      	ldr	r1, [pc, #444]	@ (800058c <completion_callback+0x234>)
 80003d0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80003d4:	f7ff ff04 	bl	80001e0 <strcmp>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14c      	bne.n	8000478 <completion_callback+0x120>

        // Check if length is exactly 8
        if (strlen(operand) != 8) {
 80003de:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80003e2:	f7ff ff07 	bl	80001f4 <strlen>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b08      	cmp	r3, #8
 80003ea:	d004      	beq.n	80003f6 <completion_callback+0x9e>
            SerialOutputString((uint8_t*)"Invalid input.\r\n\r\n", &USART1_PORT);
 80003ec:	4965      	ldr	r1, [pc, #404]	@ (8000584 <completion_callback+0x22c>)
 80003ee:	4868      	ldr	r0, [pc, #416]	@ (8000590 <completion_callback+0x238>)
 80003f0:	f000 f9cc 	bl	800078c <SerialOutputString>
            return;
 80003f4:	e0be      	b.n	8000574 <completion_callback+0x21c>
        }

        // Check if only '0' and '1'
        for (int i = 0; i < 8; i++) {
 80003f6:	2300      	movs	r3, #0
 80003f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80003fc:	e019      	b.n	8000432 <completion_callback+0xda>
            if (operand[i] != '0' && operand[i] != '1') {
 80003fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000402:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000406:	4413      	add	r3, r2
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b30      	cmp	r3, #48	@ 0x30
 800040c:	d00c      	beq.n	8000428 <completion_callback+0xd0>
 800040e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000412:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000416:	4413      	add	r3, r2
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b31      	cmp	r3, #49	@ 0x31
 800041c:	d004      	beq.n	8000428 <completion_callback+0xd0>
                SerialOutputString((uint8_t*)"Invalid input.\r\n", &USART1_PORT);
 800041e:	4959      	ldr	r1, [pc, #356]	@ (8000584 <completion_callback+0x22c>)
 8000420:	4859      	ldr	r0, [pc, #356]	@ (8000588 <completion_callback+0x230>)
 8000422:	f000 f9b3 	bl	800078c <SerialOutputString>
                return;
 8000426:	e0a5      	b.n	8000574 <completion_callback+0x21c>
        for (int i = 0; i < 8; i++) {
 8000428:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800042c:	3301      	adds	r3, #1
 800042e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000432:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000436:	2b07      	cmp	r3, #7
 8000438:	dde1      	ble.n	80003fe <completion_callback+0xa6>
            }
        }

        // If valid, convert to bitmask and set
        SerialOutputString((uint8_t*)"You selected led operation\r\n", &USART1_PORT);
 800043a:	4952      	ldr	r1, [pc, #328]	@ (8000584 <completion_callback+0x22c>)
 800043c:	4855      	ldr	r0, [pc, #340]	@ (8000594 <completion_callback+0x23c>)
 800043e:	f000 f9a5 	bl	800078c <SerialOutputString>
        TIM2->CR1 &= ~TIM_CR1_CEN; // Stop the timer before resetting LEDs
 8000442:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800044c:	f023 0301 	bic.w	r3, r3, #1
 8000450:	6013      	str	r3, [r2, #0]
        uint8_t bitmask = (uint8_t)strtol(operand, NULL, 2);
 8000452:	2202      	movs	r2, #2
 8000454:	2100      	movs	r1, #0
 8000456:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800045a:	f000 fe49 	bl	80010f0 <strtol>
 800045e:	4603      	mov	r3, r0
 8000460:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        SetLEDBitmask(bitmask);
 8000464:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff37 	bl	80002dc <SetLEDBitmask>
        SerialOutputString((uint8_t*)"LED pattern set.\r\n", &USART1_PORT);
 800046e:	4945      	ldr	r1, [pc, #276]	@ (8000584 <completion_callback+0x22c>)
 8000470:	4849      	ldr	r0, [pc, #292]	@ (8000598 <completion_callback+0x240>)
 8000472:	f000 f98b 	bl	800078c <SerialOutputString>
 8000476:	e075      	b.n	8000564 <completion_callback+0x20c>
    }

    else if (strcmp(operation, "serial") == 0) {
 8000478:	4948      	ldr	r1, [pc, #288]	@ (800059c <completion_callback+0x244>)
 800047a:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800047e:	f7ff feaf 	bl	80001e0 <strcmp>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d11d      	bne.n	80004c4 <completion_callback+0x16c>
    	// Check the input will not cause buffer to overflow
    	if (strlen(operand) > 255) {
 8000488:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800048c:	f7ff feb2 	bl	80001f4 <strlen>
 8000490:	4603      	mov	r3, r0
 8000492:	2bff      	cmp	r3, #255	@ 0xff
 8000494:	d904      	bls.n	80004a0 <completion_callback+0x148>
    		SerialOutputString((uint8_t*)"Invalid input.\r\n", &USART1_PORT);
 8000496:	493b      	ldr	r1, [pc, #236]	@ (8000584 <completion_callback+0x22c>)
 8000498:	483b      	ldr	r0, [pc, #236]	@ (8000588 <completion_callback+0x230>)
 800049a:	f000 f977 	bl	800078c <SerialOutputString>
    		return;
 800049e:	e069      	b.n	8000574 <completion_callback+0x21c>
    	}

        SerialOutputString((uint8_t*)"You selected serial operation\r\n", &USART1_PORT);
 80004a0:	4938      	ldr	r1, [pc, #224]	@ (8000584 <completion_callback+0x22c>)
 80004a2:	483f      	ldr	r0, [pc, #252]	@ (80005a0 <completion_callback+0x248>)
 80004a4:	f000 f972 	bl	800078c <SerialOutputString>

        // Echo the message
        SerialOutputString((uint8_t*)"Echo: ", &USART1_PORT);
 80004a8:	4936      	ldr	r1, [pc, #216]	@ (8000584 <completion_callback+0x22c>)
 80004aa:	483e      	ldr	r0, [pc, #248]	@ (80005a4 <completion_callback+0x24c>)
 80004ac:	f000 f96e 	bl	800078c <SerialOutputString>
        SerialOutputString((uint8_t*)operand, &USART1_PORT);
 80004b0:	4934      	ldr	r1, [pc, #208]	@ (8000584 <completion_callback+0x22c>)
 80004b2:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80004b6:	f000 f969 	bl	800078c <SerialOutputString>
        SerialOutputString((uint8_t*)"\r\n", &USART1_PORT);
 80004ba:	4932      	ldr	r1, [pc, #200]	@ (8000584 <completion_callback+0x22c>)
 80004bc:	4830      	ldr	r0, [pc, #192]	@ (8000580 <completion_callback+0x228>)
 80004be:	f000 f965 	bl	800078c <SerialOutputString>
 80004c2:	e04f      	b.n	8000564 <completion_callback+0x20c>
    }

    else if (strcmp(operation, "oneshot") == 0) {
 80004c4:	4938      	ldr	r1, [pc, #224]	@ (80005a8 <completion_callback+0x250>)
 80004c6:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80004ca:	f7ff fe89 	bl	80001e0 <strcmp>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d11d      	bne.n	8000510 <completion_callback+0x1b8>
    	// Check the operand is a number before calling the action
    	if (is_number(operand)) {
 80004d4:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80004d8:	f7ff ff18 	bl	800030c <is_number>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d011      	beq.n	8000506 <completion_callback+0x1ae>
    		SerialOutputString((uint8_t*)"You selected oneshot operation\r\n", &USART1_PORT);
 80004e2:	4928      	ldr	r1, [pc, #160]	@ (8000584 <completion_callback+0x22c>)
 80004e4:	4831      	ldr	r0, [pc, #196]	@ (80005ac <completion_callback+0x254>)
 80004e6:	f000 f951 	bl	800078c <SerialOutputString>
    		uint32_t wait_time_example = (uint32_t)strtol(operand, NULL, 10);
 80004ea:	220a      	movs	r2, #10
 80004ec:	2100      	movs	r1, #0
 80004ee:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80004f2:	f000 fdfd 	bl	80010f0 <strtol>
 80004f6:	4603      	mov	r3, r0
 80004f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    		oneshot_action(wait_time_example); //call for the one shot using the specified delay time
 80004fc:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000500:	f000 fd2e 	bl	8000f60 <oneshot_action>
 8000504:	e02e      	b.n	8000564 <completion_callback+0x20c>
    	}
    	else {
    		SerialOutputString((uint8_t*)"Invalid input.\r\n", &USART1_PORT);
 8000506:	491f      	ldr	r1, [pc, #124]	@ (8000584 <completion_callback+0x22c>)
 8000508:	481f      	ldr	r0, [pc, #124]	@ (8000588 <completion_callback+0x230>)
 800050a:	f000 f93f 	bl	800078c <SerialOutputString>
    		return;
 800050e:	e031      	b.n	8000574 <completion_callback+0x21c>
    	}
    }

    else if (strcmp(operation, "timer") == 0) {
 8000510:	4927      	ldr	r1, [pc, #156]	@ (80005b0 <completion_callback+0x258>)
 8000512:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8000516:	f7ff fe63 	bl	80001e0 <strcmp>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d11d      	bne.n	800055c <completion_callback+0x204>
    	// Check the operand is a number before calling the action
        if (is_number(operand)) {
 8000520:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8000524:	f7ff fef2 	bl	800030c <is_number>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d011      	beq.n	8000552 <completion_callback+0x1fa>
        	SerialOutputString((uint8_t*)"You selected timer operation\r\n", &USART1_PORT);
 800052e:	4915      	ldr	r1, [pc, #84]	@ (8000584 <completion_callback+0x22c>)
 8000530:	4820      	ldr	r0, [pc, #128]	@ (80005b4 <completion_callback+0x25c>)
 8000532:	f000 f92b 	bl	800078c <SerialOutputString>
        	uint32_t delay_period_example = (uint32_t)strtol(operand, NULL, 10);
 8000536:	220a      	movs	r2, #10
 8000538:	2100      	movs	r1, #0
 800053a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800053e:	f000 fdd7 	bl	80010f0 <strtol>
 8000542:	4603      	mov	r3, r0
 8000544:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        	periodic_action(delay_period_example); //call for a repeated flash using this delay period
 8000548:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800054c:	f000 fd16 	bl	8000f7c <periodic_action>
 8000550:	e008      	b.n	8000564 <completion_callback+0x20c>
		}
    	else {
    		SerialOutputString((uint8_t*)"Invalid input.\r\n", &USART1_PORT);
 8000552:	490c      	ldr	r1, [pc, #48]	@ (8000584 <completion_callback+0x22c>)
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <completion_callback+0x230>)
 8000556:	f000 f919 	bl	800078c <SerialOutputString>
    		return;
 800055a:	e00b      	b.n	8000574 <completion_callback+0x21c>
    	}
    }

    else {
        SerialOutputString((uint8_t*)"Invalid command.\r\n", &USART1_PORT);
 800055c:	4909      	ldr	r1, [pc, #36]	@ (8000584 <completion_callback+0x22c>)
 800055e:	4816      	ldr	r0, [pc, #88]	@ (80005b8 <completion_callback+0x260>)
 8000560:	f000 f914 	bl	800078c <SerialOutputString>
    }

    // Prompt a new input
    SerialOutputString((uint8_t*)"======================================\r\n", &USART1_PORT);
 8000564:	4907      	ldr	r1, [pc, #28]	@ (8000584 <completion_callback+0x22c>)
 8000566:	4815      	ldr	r0, [pc, #84]	@ (80005bc <completion_callback+0x264>)
 8000568:	f000 f910 	bl	800078c <SerialOutputString>
    SerialOutputString((uint8_t*)"\r\nEnter an operation and operand (RETURN to terminate):\r\n", &USART1_PORT);
 800056c:	4905      	ldr	r1, [pc, #20]	@ (8000584 <completion_callback+0x22c>)
 800056e:	4814      	ldr	r0, [pc, #80]	@ (80005c0 <completion_callback+0x268>)
 8000570:	f000 f90c 	bl	800078c <SerialOutputString>

}
 8000574:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	08002138 	.word	0x08002138
 8000580:	0800213c 	.word	0x0800213c
 8000584:	20000000 	.word	0x20000000
 8000588:	08002140 	.word	0x08002140
 800058c:	08002154 	.word	0x08002154
 8000590:	08002158 	.word	0x08002158
 8000594:	0800216c 	.word	0x0800216c
 8000598:	0800218c 	.word	0x0800218c
 800059c:	080021a0 	.word	0x080021a0
 80005a0:	080021a8 	.word	0x080021a8
 80005a4:	080021c8 	.word	0x080021c8
 80005a8:	080021d0 	.word	0x080021d0
 80005ac:	080021d8 	.word	0x080021d8
 80005b0:	080021fc 	.word	0x080021fc
 80005b4:	08002204 	.word	0x08002204
 80005b8:	08002224 	.word	0x08002224
 80005bc:	08002238 	.word	0x08002238
 80005c0:	08002264 	.word	0x08002264

080005c4 <main>:

int main(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

    // Initialize the serial port with baud rate 115200 and a pointer to the callback
    SerialInitialise(BAUD_115200, &USART1_PORT, &completion_callback);
 80005c8:	4a0c      	ldr	r2, [pc, #48]	@ (80005fc <main+0x38>)
 80005ca:	490d      	ldr	r1, [pc, #52]	@ (8000600 <main+0x3c>)
 80005cc:	2004      	movs	r0, #4
 80005ce:	f000 f81f 	bl	8000610 <SerialInitialise>
    enable_clocks();
 80005d2:	f000 fc6d 	bl	8000eb0 <enable_clocks>
    initialise_board();
 80005d6:	f000 fc87 	bl	8000ee8 <initialise_board>

    // Send welcome messages over UART
    SerialOutputString((uint8_t*)"UART ACTIVATED\r\n", &USART1_PORT);
 80005da:	4909      	ldr	r1, [pc, #36]	@ (8000600 <main+0x3c>)
 80005dc:	4809      	ldr	r0, [pc, #36]	@ (8000604 <main+0x40>)
 80005de:	f000 f8d5 	bl	800078c <SerialOutputString>
    SerialOutputString((uint8_t*)"======================================\r\n", &USART1_PORT);
 80005e2:	4907      	ldr	r1, [pc, #28]	@ (8000600 <main+0x3c>)
 80005e4:	4808      	ldr	r0, [pc, #32]	@ (8000608 <main+0x44>)
 80005e6:	f000 f8d1 	bl	800078c <SerialOutputString>
    SerialOutputString((uint8_t*)"Enter an operation and operand (RETURN to terminate):\r\n", &USART1_PORT);
 80005ea:	4905      	ldr	r1, [pc, #20]	@ (8000600 <main+0x3c>)
 80005ec:	4807      	ldr	r0, [pc, #28]	@ (800060c <main+0x48>)
 80005ee:	f000 f8cd 	bl	800078c <SerialOutputString>
    // Enable RX interrupt-based input
    EnableSerialInterrupts(&USART1_PORT);
 80005f2:	4803      	ldr	r0, [pc, #12]	@ (8000600 <main+0x3c>)
 80005f4:	f000 f930 	bl	8000858 <EnableSerialInterrupts>

    // Infinite loop: main code does not need to do anything here
    // since everything is handled through interrupts
    for(;;) {
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <main+0x34>
 80005fc:	08000359 	.word	0x08000359
 8000600:	20000000 	.word	0x20000000
 8000604:	080022a0 	.word	0x080022a0
 8000608:	08002238 	.word	0x08002238
 800060c:	080022b4 	.word	0x080022b4

08000610 <SerialInitialise>:
    0x00,                     // TX buffer initialized to 0 (legacy/placeholder)
    0x00                      // No completion function set initially
};

// Initialize the serial port with specified baud rate and a receive completion callback
void SerialInitialise(BaudRate baudRate, SerialPort *serial_port, void (*callback)(uint8_t *data, uint8_t length)) {
 8000610:	b480      	push	{r7}
 8000612:	b087      	sub	sp, #28
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
 800061c:	73fb      	strb	r3, [r7, #15]

    // Set the function to call when a full string is received
    serial_port->completion_function = callback;
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable peripheral clocks required by the system and GPIO
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;      // Power interface clock
 8000624:	4b3a      	ldr	r3, [pc, #232]	@ (8000710 <SerialInitialise+0x100>)
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	4a39      	ldr	r2, [pc, #228]	@ (8000710 <SerialInitialise+0x100>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062e:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;   // System config clock
 8000630:	4b37      	ldr	r3, [pc, #220]	@ (8000710 <SerialInitialise+0x100>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a36      	ldr	r2, [pc, #216]	@ (8000710 <SerialInitialise+0x100>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= serial_port->MaskAHBENR; // Enable GPIO port clock
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	691a      	ldr	r2, [r3, #16]
 8000640:	4b33      	ldr	r3, [pc, #204]	@ (8000710 <SerialInitialise+0x100>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4932      	ldr	r1, [pc, #200]	@ (8000710 <SerialInitialise+0x100>)
 8000646:	4313      	orrs	r3, r2
 8000648:	614b      	str	r3, [r1, #20]

    // Set the GPIO pins to alternate function mode (for USART)
    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	6952      	ldr	r2, [r2, #20]
 8000652:	601a      	str	r2, [r3, #0]

    // Set GPIO pins to high speed mode
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	6992      	ldr	r2, [r2, #24]
 800065c:	609a      	str	r2, [r3, #8]

    // Select alternate function 7 (USART1) for PC10 and PC11
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	69d9      	ldr	r1, [r3, #28]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	6a1a      	ldr	r2, [r3, #32]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	430a      	orrs	r2, r1
 800066e:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	6a19      	ldr	r1, [r3, #32]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	430a      	orrs	r2, r1
 8000680:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable USART peripheral clock
    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	68da      	ldr	r2, [r3, #12]
 8000686:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <SerialInitialise+0x100>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4921      	ldr	r1, [pc, #132]	@ (8000710 <SerialInitialise+0x100>)
 800068c:	4313      	orrs	r3, r2
 800068e:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	689a      	ldr	r2, [r3, #8]
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <SerialInitialise+0x100>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	491d      	ldr	r1, [pc, #116]	@ (8000710 <SerialInitialise+0x100>)
 800069a:	4313      	orrs	r3, r2
 800069c:	618b      	str	r3, [r1, #24]

    // Set baud rate register (BRR) based on selected baud rate
    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	330c      	adds	r3, #12
 80006a4:	617b      	str	r3, [r7, #20]

    switch(baudRate) {
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d823      	bhi.n	80006f4 <SerialInitialise+0xe4>
 80006ac:	a201      	add	r2, pc, #4	@ (adr r2, 80006b4 <SerialInitialise+0xa4>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d3 	.word	0x080006d3
 80006bc:	080006dd 	.word	0x080006dd
 80006c0:	080006e5 	.word	0x080006e5
 80006c4:	080006ed 	.word	0x080006ed
        case BAUD_9600:
            *baud_rate_config = 0x341;  // BRR value for 9600 baud at 8 MHz
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	f240 3241 	movw	r2, #833	@ 0x341
 80006ce:	801a      	strh	r2, [r3, #0]
            break;
 80006d0:	e010      	b.n	80006f4 <SerialInitialise+0xe4>
        case BAUD_19200:
            *baud_rate_config = 0x1A0;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80006d8:	801a      	strh	r2, [r3, #0]
            break;
 80006da:	e00b      	b.n	80006f4 <SerialInitialise+0xe4>
        case BAUD_38400:
            *baud_rate_config = 0xD0;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	22d0      	movs	r2, #208	@ 0xd0
 80006e0:	801a      	strh	r2, [r3, #0]
            break;
 80006e2:	e007      	b.n	80006f4 <SerialInitialise+0xe4>
        case BAUD_57600:
            *baud_rate_config = 0x8B;
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	228b      	movs	r2, #139	@ 0x8b
 80006e8:	801a      	strh	r2, [r3, #0]
            break;
 80006ea:	e003      	b.n	80006f4 <SerialInitialise+0xe4>
        case BAUD_115200:
            *baud_rate_config = 0x46;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	2246      	movs	r2, #70	@ 0x46
 80006f0:	801a      	strh	r2, [r3, #0]
            break;
 80006f2:	bf00      	nop
    }

    // Enable USART transmitter and receiver, and the USART itself
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f042 020d 	orr.w	r2, r2, #13
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	bf00      	nop
 8000706:	371c      	adds	r7, #28
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	40021000 	.word	0x40021000

08000714 <SerialOutputChar>:

// Transmit a single character via USART using non-blocking (interrupt-based) method
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
    // Wait (stall) if buffer is full (circular buffer wraparound)
    while (((serial_port->tx_head + 1) % TX_BUFFER_SIZE) == serial_port->tx_tail);
 8000720:	bf00      	nop
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000726:	b29b      	uxth	r3, r3
 8000728:	3301      	adds	r3, #1
 800072a:	425a      	negs	r2, r3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	b2d2      	uxtb	r2, r2
 8000730:	bf58      	it	pl
 8000732:	4253      	negpl	r3, r2
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8000738:	b292      	uxth	r2, r2
 800073a:	4293      	cmp	r3, r2
 800073c:	d0f1      	beq.n	8000722 <SerialOutputChar+0xe>

    // Store character in TX buffer
    serial_port->tx_buffer[serial_port->tx_head] = data;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000742:	b29b      	uxth	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	4413      	add	r3, r2
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    // Advance head index, wrapping around if needed
    serial_port->tx_head = (serial_port->tx_head + 1) % TX_BUFFER_SIZE;
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000754:	b29b      	uxth	r3, r3
 8000756:	3301      	adds	r3, #1
 8000758:	425a      	negs	r2, r3
 800075a:	b2db      	uxtb	r3, r3
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	bf58      	it	pl
 8000760:	4253      	negpl	r3, r2
 8000762:	b29a      	uxth	r2, r3
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	851a      	strh	r2, [r3, #40]	@ 0x28

    // Mark transmitter as active and enable TXE interrupt to begin sending
    serial_port->tx_busy = 1;
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	2201      	movs	r2, #1
 800076c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    serial_port->UART->CR1 |= USART_CR1_TXEIE;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SerialOutputString>:

// Transmit a full null-terminated string via USART using interrupt-based method
void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
    uint32_t counter = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]

    // Send each character until null-terminator is reached
    while (*pt) {
 800079a:	e00b      	b.n	80007b4 <SerialOutputString+0x28>
        SerialOutputChar(*pt, serial_port);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	6839      	ldr	r1, [r7, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ffb6 	bl	8000714 <SerialOutputChar>
        counter++;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3301      	adds	r3, #1
 80007ac:	60fb      	str	r3, [r7, #12]
        pt++;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	3301      	adds	r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
    while (*pt) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d1ef      	bne.n	800079c <SerialOutputString+0x10>
    }
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db0b      	blt.n	80007f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 021f 	and.w	r2, r3, #31
 80007e0:	4907      	ldr	r1, [pc, #28]	@ (8000800 <__NVIC_EnableIRQ+0x38>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	2001      	movs	r0, #1
 80007ea:	fa00 f202 	lsl.w	r2, r0, r2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000e100 	.word	0xe000e100

08000804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	@ (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	@ (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <EnableSerialInterrupts>:
// rx_buffer1 is filled live during character reception
// rx_buffer2 is a safe copy handed off to the main loop
uint8_t rx_buffer1[BUFFER_SIZE];
uint8_t rx_buffer2[BUFFER_SIZE];

void EnableSerialInterrupts(SerialPort *serial_port) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
    // Disable global interrupts to prevent issues during setup
    __disable_irq();

    // Reset flags and index
    rx_index = 0;
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <EnableSerialInterrupts+0x68>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
    string_recieved = 0;
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <EnableSerialInterrupts+0x6c>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]

    // Clear both RX buffers
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	e00c      	b.n	8000890 <EnableSerialInterrupts+0x38>
        rx_buffer1[i] = 0;
 8000876:	4a14      	ldr	r2, [pc, #80]	@ (80008c8 <EnableSerialInterrupts+0x70>)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
        rx_buffer2[i] = 0;
 8000880:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <EnableSerialInterrupts+0x74>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4413      	add	r3, r2
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2bff      	cmp	r3, #255	@ 0xff
 8000894:	ddef      	ble.n	8000876 <EnableSerialInterrupts+0x1e>
    }

    // Enable Receive Not Empty interrupt (triggers when data arrives)
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f042 0220 	orr.w	r2, r2, #32
 80008a4:	601a      	str	r2, [r3, #0]

    // Enable USART1 interrupt in the NVIC
    NVIC_EnableIRQ(USART1_IRQn);              // Be sure your startup file maps this correctly
 80008a6:	2025      	movs	r0, #37	@ 0x25
 80008a8:	f7ff ff8e 	bl	80007c8 <__NVIC_EnableIRQ>
    NVIC_SetPriority(USART1_IRQn, 0);         // Highest priority (lowest numerical value)
 80008ac:	2100      	movs	r1, #0
 80008ae:	2025      	movs	r0, #37	@ 0x25
 80008b0:	f7ff ffa8 	bl	8000804 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 80008b4:	b662      	cpsie	i
}
 80008b6:	bf00      	nop

    // Re-enable global interrupts
    __enable_irq();
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200001ae 	.word	0x200001ae
 80008c4:	200001ad 	.word	0x200001ad
 80008c8:	200001b0 	.word	0x200001b0
 80008cc:	200002b0 	.word	0x200002b0

080008d0 <USART1_EXTI25_IRQHandler>:

// Interrupt Service Routine for USART1
void USART1_EXTI25_IRQHandler(void) {
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	b0c3      	sub	sp, #268	@ 0x10c
 80008d4:	af00      	add	r7, sp, #0

    // Check if RXNE (Receive Data Register Not Empty) is set
    if (USART1_PORT.UART->ISR & USART_ISR_RXNE) {
 80008d6:	4b5d      	ldr	r3, [pc, #372]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	f003 0320 	and.w	r3, r3, #32
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d077      	beq.n	80009d4 <USART1_EXTI25_IRQHandler+0x104>
        // Read the incoming character
        uint8_t received_char = USART1_PORT.UART->RDR;
 80008e4:	4b59      	ldr	r3, [pc, #356]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103

        // Only process if there's space in the buffer
        if (rx_index < BUFFER_SIZE - 1) {
 80008f0:	4b57      	ldr	r3, [pc, #348]	@ (8000a50 <USART1_EXTI25_IRQHandler+0x180>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2bff      	cmp	r3, #255	@ 0xff
 80008f8:	d047      	beq.n	800098a <USART1_EXTI25_IRQHandler+0xba>
            // Store received character in live RX buffer
            rx_buffer1[rx_index++] = received_char;
 80008fa:	4b55      	ldr	r3, [pc, #340]	@ (8000a50 <USART1_EXTI25_IRQHandler+0x180>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	b2d1      	uxtb	r1, r2
 8000904:	4a52      	ldr	r2, [pc, #328]	@ (8000a50 <USART1_EXTI25_IRQHandler+0x180>)
 8000906:	7011      	strb	r1, [r2, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	4a52      	ldr	r2, [pc, #328]	@ (8000a54 <USART1_EXTI25_IRQHandler+0x184>)
 800090c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8000910:	5453      	strb	r3, [r2, r1]

            // Check for end-of-input character (ENTER/RETURN key)
            if (received_char == '\r' || received_char == '\n') {
 8000912:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8000916:	2b0d      	cmp	r3, #13
 8000918:	d003      	beq.n	8000922 <USART1_EXTI25_IRQHandler+0x52>
 800091a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800091e:	2b0a      	cmp	r3, #10
 8000920:	d158      	bne.n	80009d4 <USART1_EXTI25_IRQHandler+0x104>
                // Null-terminate the string
                rx_buffer1[rx_index] = '\0';
 8000922:	4b4b      	ldr	r3, [pc, #300]	@ (8000a50 <USART1_EXTI25_IRQHandler+0x180>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	4b4a      	ldr	r3, [pc, #296]	@ (8000a54 <USART1_EXTI25_IRQHandler+0x184>)
 800092c:	2100      	movs	r1, #0
 800092e:	5499      	strb	r1, [r3, r2]
                string_recieved = 1;
 8000930:	4b49      	ldr	r3, [pc, #292]	@ (8000a58 <USART1_EXTI25_IRQHandler+0x188>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]

                // Copy buffer1 to buffer2 (safe for processing outside ISR)
                for (int i = 0; i < BUFFER_SIZE; i++) {
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800093c:	e015      	b.n	800096a <USART1_EXTI25_IRQHandler+0x9a>
                    rx_buffer2[i] = rx_buffer1[i];
 800093e:	4a45      	ldr	r2, [pc, #276]	@ (8000a54 <USART1_EXTI25_IRQHandler+0x184>)
 8000940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000944:	4413      	add	r3, r2
 8000946:	7819      	ldrb	r1, [r3, #0]
 8000948:	4a44      	ldr	r2, [pc, #272]	@ (8000a5c <USART1_EXTI25_IRQHandler+0x18c>)
 800094a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800094e:	4413      	add	r3, r2
 8000950:	460a      	mov	r2, r1
 8000952:	701a      	strb	r2, [r3, #0]
                    rx_buffer1[i] = 0; // Clear buffer1 for next message
 8000954:	4a3f      	ldr	r2, [pc, #252]	@ (8000a54 <USART1_EXTI25_IRQHandler+0x184>)
 8000956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800095a:	4413      	add	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < BUFFER_SIZE; i++) {
 8000960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000964:	3301      	adds	r3, #1
 8000966:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800096a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800096e:	2bff      	cmp	r3, #255	@ 0xff
 8000970:	dde5      	ble.n	800093e <USART1_EXTI25_IRQHandler+0x6e>
                }

                // Trigger the completion callback with the full message
                USART1_PORT.completion_function(rx_buffer2, rx_index);
 8000972:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 8000974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000976:	4a36      	ldr	r2, [pc, #216]	@ (8000a50 <USART1_EXTI25_IRQHandler+0x180>)
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	4611      	mov	r1, r2
 800097e:	4837      	ldr	r0, [pc, #220]	@ (8000a5c <USART1_EXTI25_IRQHandler+0x18c>)
 8000980:	4798      	blx	r3

                // Reset index for next message
                rx_index = 0;
 8000982:	4b33      	ldr	r3, [pc, #204]	@ (8000a50 <USART1_EXTI25_IRQHandler+0x180>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e024      	b.n	80009d4 <USART1_EXTI25_IRQHandler+0x104>
            }
        } else {
            // If buffer overflows, clear and notify
            rx_index = 0;
 800098a:	4b31      	ldr	r3, [pc, #196]	@ (8000a50 <USART1_EXTI25_IRQHandler+0x180>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
            uint8_t BUFFEROVERFLOW[BUFFER_SIZE] = "ERROR: BUFFER OVERFLOW";
 8000990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000994:	f5a3 7684 	sub.w	r6, r3, #264	@ 0x108
 8000998:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <USART1_EXTI25_IRQHandler+0x190>)
 800099a:	4634      	mov	r4, r6
 800099c:	461d      	mov	r5, r3
 800099e:	6828      	ldr	r0, [r5, #0]
 80009a0:	6869      	ldr	r1, [r5, #4]
 80009a2:	68aa      	ldr	r2, [r5, #8]
 80009a4:	68eb      	ldr	r3, [r5, #12]
 80009a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a8:	6928      	ldr	r0, [r5, #16]
 80009aa:	6020      	str	r0, [r4, #0]
 80009ac:	8aab      	ldrh	r3, [r5, #20]
 80009ae:	7daa      	ldrb	r2, [r5, #22]
 80009b0:	80a3      	strh	r3, [r4, #4]
 80009b2:	4613      	mov	r3, r2
 80009b4:	71a3      	strb	r3, [r4, #6]
 80009b6:	f106 0317 	add.w	r3, r6, #23
 80009ba:	22e9      	movs	r2, #233	@ 0xe9
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fca5 	bl	800130e <memset>
            USART1_PORT.completion_function(BUFFEROVERFLOW, rx_index);
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 80009c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c8:	4a21      	ldr	r2, [pc, #132]	@ (8000a50 <USART1_EXTI25_IRQHandler+0x180>)
 80009ca:	7812      	ldrb	r2, [r2, #0]
 80009cc:	b2d1      	uxtb	r1, r2
 80009ce:	463a      	mov	r2, r7
 80009d0:	4610      	mov	r0, r2
 80009d2:	4798      	blx	r3
        }
    }

    // Check if TXE (Transmit Data Register Empty) interrupt is enabled and pending
    if ((USART1->CR1 & USART_CR1_TXEIE) && (USART1->ISR & USART_ISR_TXE)) {
 80009d4:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <USART1_EXTI25_IRQHandler+0x194>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d02f      	beq.n	8000a40 <USART1_EXTI25_IRQHandler+0x170>
 80009e0:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <USART1_EXTI25_IRQHandler+0x194>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d029      	beq.n	8000a40 <USART1_EXTI25_IRQHandler+0x170>

        // Check if there is data left to transmit in the circular buffer
        if (USART1_PORT.tx_tail != USART1_PORT.tx_head) {
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 80009ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 80009f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d017      	beq.n	8000a2c <USART1_EXTI25_IRQHandler+0x15c>

            // Send next character from the TX buffer
            USART1->TDR = USART1_PORT.tx_buffer[USART1_PORT.tx_tail];
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 80009fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 8000a06:	4413      	add	r3, r2
 8000a08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <USART1_EXTI25_IRQHandler+0x194>)
 8000a10:	851a      	strh	r2, [r3, #40]	@ 0x28
            USART1_PORT.tx_tail = (USART1_PORT.tx_tail + 1) % TX_BUFFER_SIZE;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 8000a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	425a      	negs	r2, r3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	bf58      	it	pl
 8000a22:	4253      	negpl	r3, r2
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 8000a28:	855a      	strh	r2, [r3, #42]	@ 0x2a
            // Transmission is complete — disable TXE interrupt
            USART1->CR1 &= ~USART_CR1_TXEIE;
            USART1_PORT.tx_busy = 0;
        }
    }
}
 8000a2a:	e009      	b.n	8000a40 <USART1_EXTI25_IRQHandler+0x170>
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <USART1_EXTI25_IRQHandler+0x194>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0c      	ldr	r2, [pc, #48]	@ (8000a64 <USART1_EXTI25_IRQHandler+0x194>)
 8000a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a36:	6013      	str	r3, [r2, #0]
            USART1_PORT.tx_busy = 0;
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <USART1_EXTI25_IRQHandler+0x17c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8000a40:	bf00      	nop
 8000a42:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	200001ae 	.word	0x200001ae
 8000a54:	200001b0 	.word	0x200001b0
 8000a58:	200001ad 	.word	0x200001ad
 8000a5c:	200002b0 	.word	0x200002b0
 8000a60:	080022ec 	.word	0x080022ec
 8000a64:	40013800 	.word	0x40013800

08000a68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return 1;
 8000a6c:	2301      	movs	r3, #1
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_kill>:

int _kill(int pid, int sig)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a82:	f000 fd01 	bl	8001488 <__errno>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2216      	movs	r2, #22
 8000a8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_exit>:

void _exit (int status)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ffe7 	bl	8000a78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000aaa:	bf00      	nop
 8000aac:	e7fd      	b.n	8000aaa <_exit+0x12>

08000aae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	e00a      	b.n	8000ad6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac0:	f3af 8000 	nop.w
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1c5a      	adds	r2, r3, #1
 8000aca:	60ba      	str	r2, [r7, #8]
 8000acc:	b2ca      	uxtb	r2, r1
 8000ace:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	697a      	ldr	r2, [r7, #20]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dbf0      	blt.n	8000ac0 <_read+0x12>
  }

  return len;
 8000ade:	687b      	ldr	r3, [r7, #4]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	e009      	b.n	8000b0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	60ba      	str	r2, [r7, #8]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbf1      	blt.n	8000afa <_write+0x12>
  }
  return len;
 8000b16:	687b      	ldr	r3, [r7, #4]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <_close>:

int _close(int file)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b48:	605a      	str	r2, [r3, #4]
  return 0;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <_isatty>:

int _isatty(int file)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b60:	2301      	movs	r3, #1
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b085      	sub	sp, #20
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b90:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <_sbrk+0x5c>)
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <_sbrk+0x60>)
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <_sbrk+0x64>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <_sbrk+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d207      	bcs.n	8000bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb8:	f000 fc66 	bl	8001488 <__errno>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc6:	e009      	b.n	8000bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bce:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <_sbrk+0x64>)
 8000bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000a000 	.word	0x2000a000
 8000be8:	00000400 	.word	0x00000400
 8000bec:	200003b0 	.word	0x200003b0
 8000bf0:	20000510 	.word	0x20000510

08000bf4 <__NVIC_EnableIRQ>:
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	@ (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <Timer_Init>:
static TimerCallback oneShotCallback = 0;

static uint32_t timerPeriod_ms = 0;
static uint8_t isOneShotMode = 0;

void Timer_Init(uint32_t period_ms, TimerCallback cb) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
    timerPeriod_ms = period_ms;
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <Timer_Init+0x7c>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
    periodicCallback = cb;
 8000c40:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb0 <Timer_Init+0x80>)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	6013      	str	r3, [r2, #0]

    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <Timer_Init+0x84>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000cb4 <Timer_Init+0x84>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	61d3      	str	r3, [r2, #28]

    TIM2->PSC = 8000 - 1;  // 1 ms tick
 8000c52:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c56:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = timerPeriod_ms;
 8000c5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <Timer_Init+0x7c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CNT = 0;
 8000c66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM2->DIER |= TIM_DIER_UIE;  // Enable update interrupt
 8000c6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	60d3      	str	r3, [r2, #12]
    TIM2->EGR |= TIM_EGR_UG;
 8000c7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6153      	str	r3, [r2, #20]
    TIM2->SR &= ~TIM_SR_UIF;
 8000c8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c98:	f023 0301 	bic.w	r3, r3, #1
 8000c9c:	6113      	str	r3, [r2, #16]

    NVIC_EnableIRQ(TIM2_IRQn);
 8000c9e:	201c      	movs	r0, #28
 8000ca0:	f7ff ffa8 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200003bc 	.word	0x200003bc
 8000cb0:	200003b4 	.word	0x200003b4
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <Timer_Start>:

void Timer_Start(void) {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
    isOneShotMode = 0;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <Timer_Start+0x24>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000cc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6013      	str	r3, [r2, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	200003c0 	.word	0x200003c0

08000ce0 <Timer_StartOneShot>:

void Timer_StartOneShot(uint32_t delay_ms, TimerCallback cb) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
 8000cea:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <Timer_StartOneShot+0x98>)
 8000cec:	60fb      	str	r3, [r7, #12]
	*led_output = 0x00; //turn off LEDs
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]

    isOneShotMode = 1;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <Timer_StartOneShot+0x9c>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
    oneShotCallback = cb;
 8000cfa:	4a21      	ldr	r2, [pc, #132]	@ (8000d80 <Timer_StartOneShot+0xa0>)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	6013      	str	r3, [r2, #0]

    TIM2->CR1 &= ~TIM_CR1_CEN;      // Stop timer before configuring
 8000d00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d0a:	f023 0301 	bic.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]
    TIM2->PSC = 8000 - 1;           // 1 ms tick
 8000d10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d14:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000d18:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = delay_ms;
 8000d1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CNT = 0;
 8000d22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM2->DIER |= TIM_DIER_UIE;
 8000d2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	60d3      	str	r3, [r2, #12]
    TIM2->EGR |= TIM_EGR_UG;
 8000d3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6153      	str	r3, [r2, #20]
    TIM2->SR &= ~TIM_SR_UIF;
 8000d4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d54:	f023 0301 	bic.w	r3, r3, #1
 8000d58:	6113      	str	r3, [r2, #16]

    NVIC_EnableIRQ(TIM2_IRQn);
 8000d5a:	201c      	movs	r0, #28
 8000d5c:	f7ff ff4a 	bl	8000bf4 <__NVIC_EnableIRQ>
    TIM2->CR1 |= TIM_CR1_CEN;
 8000d60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	48001015 	.word	0x48001015
 8000d7c:	200003c0 	.word	0x200003c0
 8000d80:	200003b8 	.word	0x200003b8

08000d84 <setTimerPeriod>:

void setTimerPeriod(uint32_t new_period_ms) {
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    timerPeriod_ms = new_period_ms;
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <setTimerPeriod+0x34>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
    TIM2->ARR = timerPeriod_ms;
 8000d92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d96:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <setTimerPeriod+0x34>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->EGR |= TIM_EGR_UG;
 8000d9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6153      	str	r3, [r2, #20]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	200003bc 	.word	0x200003bc

08000dbc <TIM2_IRQHandler>:

uint32_t getTimerPeriod(void) {
    return timerPeriod_ms;
}

void TIM2_IRQHandler(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000dc0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dc4:	691b      	ldr	r3, [r3, #16]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d028      	beq.n	8000e20 <TIM2_IRQHandler+0x64>
        TIM2->SR &= ~TIM_SR_UIF;
 8000dce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd8:	f023 0301 	bic.w	r3, r3, #1
 8000ddc:	6113      	str	r3, [r2, #16]

        if (isOneShotMode) {
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <TIM2_IRQHandler+0x68>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d015      	beq.n	8000e12 <TIM2_IRQHandler+0x56>
            if (oneShotCallback) oneShotCallback();
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <TIM2_IRQHandler+0x6c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <TIM2_IRQHandler+0x38>
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <TIM2_IRQHandler+0x6c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4798      	blx	r3
            oneShotCallback = 0;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <TIM2_IRQHandler+0x6c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
            isOneShotMode = 0;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <TIM2_IRQHandler+0x68>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
            TIM2->CR1 &= ~TIM_CR1_CEN; // Stop timer
 8000e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e0a:	f023 0301 	bic.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]
        } else {
            if (periodicCallback) periodicCallback();
        }
    }
}
 8000e10:	e006      	b.n	8000e20 <TIM2_IRQHandler+0x64>
            if (periodicCallback) periodicCallback();
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <TIM2_IRQHandler+0x70>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <TIM2_IRQHandler+0x64>
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <TIM2_IRQHandler+0x70>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4798      	blx	r3
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200003c0 	.word	0x200003c0
 8000e28:	200003b8 	.word	0x200003b8
 8000e2c:	200003b4 	.word	0x200003b4

08000e30 <periodicBlink>:

// Example LED blink callback
void periodicBlink(void) {
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
    static uint8_t led_state = 0; //start with LEDs off
    uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <periodicBlink+0x3c>)
 8000e38:	607b      	str	r3, [r7, #4]
    *led_output = led_state ? 0xAA : 0x00;  // 0xAA = 10101010
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <periodicBlink+0x40>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <periodicBlink+0x16>
 8000e42:	22aa      	movs	r2, #170	@ 0xaa
 8000e44:	e000      	b.n	8000e48 <periodicBlink+0x18>
 8000e46:	2200      	movs	r2, #0
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	701a      	strb	r2, [r3, #0]
    led_state = !led_state; //switch the LED state from 10101010 to 00000000 or vice versa dependent on current
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <periodicBlink+0x40>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf0c      	ite	eq
 8000e54:	2301      	moveq	r3, #1
 8000e56:	2300      	movne	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <periodicBlink+0x40>)
 8000e5e:	701a      	strb	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	48001015 	.word	0x48001015
 8000e70:	200003c1 	.word	0x200003c1

08000e74 <oneShotBlink>:

void oneShotBlink(void) {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
    uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <oneShotBlink+0x38>)
 8000e7c:	607b      	str	r3, [r7, #4]
    *led_output = 0xFF;  // turn all LED's briefly
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	22ff      	movs	r2, #255	@ 0xff
 8000e82:	701a      	strb	r2, [r3, #0]
    for (volatile int i = 0; i < 10000; i++); //gunshot flash for some arbitrary amount of time, small relative to wait time
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	e002      	b.n	8000e90 <oneShotBlink+0x1c>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e96:	4293      	cmp	r3, r2
 8000e98:	ddf7      	ble.n	8000e8a <oneShotBlink+0x16>
    *led_output = 0x00; //turn off LEDs
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	48001015 	.word	0x48001015

08000eb0 <enable_clocks>:

void enable_clocks(void) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <enable_clocks+0x34>)
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <enable_clocks+0x34>)
 8000eba:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000ebe:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <enable_clocks+0x34>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	@ (8000ee4 <enable_clocks+0x34>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // For EXTI
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <enable_clocks+0x34>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <enable_clocks+0x34>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6193      	str	r3, [r2, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <initialise_board>:

void initialise_board(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
    // Configure PE8-15 as output
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <initialise_board+0x68>)
 8000ef0:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000ef8:	801a      	strh	r2, [r3, #0]

    // Turn off LEDs initially
    uint8_t *led_output = ((uint8_t *)&(GPIOE->ODR)) + 1;
 8000efa:	4b16      	ldr	r3, [pc, #88]	@ (8000f54 <initialise_board+0x6c>)
 8000efc:	603b      	str	r3, [r7, #0]
    *led_output = 0x00;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]

    // Configure PC13 as input (default state)
    GPIOA->MODER &= ~(3 << (0 * 2)); // PA0 input
 8000f04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f0e:	f023 0303 	bic.w	r3, r3, #3
 8000f12:	6013      	str	r3, [r2, #0]

    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;      // Clear EXTI0 bits
 8000f14:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <initialise_board+0x70>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4a0f      	ldr	r2, [pc, #60]	@ (8000f58 <initialise_board+0x70>)
 8000f1a:	f023 030f 	bic.w	r3, r3, #15
 8000f1e:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |=  SYSCFG_EXTICR1_EXTI0_PA;   // Set EXTI0 to PA0
 8000f20:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <initialise_board+0x70>)
 8000f22:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <initialise_board+0x70>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	6093      	str	r3, [r2, #8]

    EXTI->IMR  |= EXTI_IMR_MR0;     // Unmask EXTI0
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <initialise_board+0x74>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f5c <initialise_board+0x74>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= EXTI_FTSR_TR0;    // Trigger on falling edge
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <initialise_board+0x74>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <initialise_board+0x74>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(EXTI0_IRQn);     // Enable EXTI0 interrupt in NVIC
 8000f40:	2006      	movs	r0, #6
 8000f42:	f7ff fe57 	bl	8000bf4 <__NVIC_EnableIRQ>

}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48001002 	.word	0x48001002
 8000f54:	48001015 	.word	0x48001015
 8000f58:	40010000 	.word	0x40010000
 8000f5c:	40010400 	.word	0x40010400

08000f60 <oneshot_action>:

void oneshot_action(uint32_t operand){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	Timer_StartOneShot(operand, oneShotBlink); //call function to trigger a oneshot using the specified operand from the serial comm.
 8000f68:	4903      	ldr	r1, [pc, #12]	@ (8000f78 <oneshot_action+0x18>)
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff feb8 	bl	8000ce0 <Timer_StartOneShot>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	08000e75 	.word	0x08000e75

08000f7c <periodic_action>:

//THIS CODE SHOULD RUN AFTER YOU HAVE CHECKED IF THE OPERATOR IS ONESHOT AND THE OPERAND IS ALL DIGITS
//IT SHOULD BE DEFINED IN INTEGRATION.c OR IN A RELEVANT HEADER (INTEGRATION.h)
void periodic_action(uint32_t operand){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	setTimerPeriod(operand); //set the hardware timer ARR period as the operand given in the serial comm.
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fefd 	bl	8000d84 <setTimerPeriod>
	Timer_Init(operand, periodicBlink); // initialise the timer for periodic blinking with the operand as the delay_time
 8000f8a:	4906      	ldr	r1, [pc, #24]	@ (8000fa4 <periodic_action+0x28>)
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fe4f 	bl	8000c30 <Timer_Init>
	Timer_Start();
 8000f92:	f7ff fe91 	bl	8000cb8 <Timer_Start>
	periodicBlink(); // Immediate first toggle
 8000f96:	f7ff ff4b 	bl	8000e30 <periodicBlink>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	08000e31 	.word	0x08000e31

08000fa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	@ (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fd6:	f000 fa5d 	bl	8001494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fda:	f7ff faf3 	bl	80005c4 <main>

08000fde <LoopForever>:

LoopForever:
  b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   r0, =_estack
 8000fe0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000fec:	080024f4 	.word	0x080024f4
  ldr r2, =_sbss
 8000ff0:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8000ff4:	20000510 	.word	0x20000510

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>
	...

08000ffc <_strtol_l.constprop.0>:
 8000ffc:	2b24      	cmp	r3, #36	@ 0x24
 8000ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001002:	4686      	mov	lr, r0
 8001004:	4690      	mov	r8, r2
 8001006:	d801      	bhi.n	800100c <_strtol_l.constprop.0+0x10>
 8001008:	2b01      	cmp	r3, #1
 800100a:	d106      	bne.n	800101a <_strtol_l.constprop.0+0x1e>
 800100c:	f000 fa3c 	bl	8001488 <__errno>
 8001010:	2316      	movs	r3, #22
 8001012:	6003      	str	r3, [r0, #0]
 8001014:	2000      	movs	r0, #0
 8001016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101a:	4834      	ldr	r0, [pc, #208]	@ (80010ec <_strtol_l.constprop.0+0xf0>)
 800101c:	460d      	mov	r5, r1
 800101e:	462a      	mov	r2, r5
 8001020:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001024:	5d06      	ldrb	r6, [r0, r4]
 8001026:	f016 0608 	ands.w	r6, r6, #8
 800102a:	d1f8      	bne.n	800101e <_strtol_l.constprop.0+0x22>
 800102c:	2c2d      	cmp	r4, #45	@ 0x2d
 800102e:	d12d      	bne.n	800108c <_strtol_l.constprop.0+0x90>
 8001030:	782c      	ldrb	r4, [r5, #0]
 8001032:	2601      	movs	r6, #1
 8001034:	1c95      	adds	r5, r2, #2
 8001036:	f033 0210 	bics.w	r2, r3, #16
 800103a:	d109      	bne.n	8001050 <_strtol_l.constprop.0+0x54>
 800103c:	2c30      	cmp	r4, #48	@ 0x30
 800103e:	d12a      	bne.n	8001096 <_strtol_l.constprop.0+0x9a>
 8001040:	782a      	ldrb	r2, [r5, #0]
 8001042:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001046:	2a58      	cmp	r2, #88	@ 0x58
 8001048:	d125      	bne.n	8001096 <_strtol_l.constprop.0+0x9a>
 800104a:	786c      	ldrb	r4, [r5, #1]
 800104c:	2310      	movs	r3, #16
 800104e:	3502      	adds	r5, #2
 8001050:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001054:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001058:	2200      	movs	r2, #0
 800105a:	fbbc f9f3 	udiv	r9, ip, r3
 800105e:	4610      	mov	r0, r2
 8001060:	fb03 ca19 	mls	sl, r3, r9, ip
 8001064:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001068:	2f09      	cmp	r7, #9
 800106a:	d81b      	bhi.n	80010a4 <_strtol_l.constprop.0+0xa8>
 800106c:	463c      	mov	r4, r7
 800106e:	42a3      	cmp	r3, r4
 8001070:	dd27      	ble.n	80010c2 <_strtol_l.constprop.0+0xc6>
 8001072:	1c57      	adds	r7, r2, #1
 8001074:	d007      	beq.n	8001086 <_strtol_l.constprop.0+0x8a>
 8001076:	4581      	cmp	r9, r0
 8001078:	d320      	bcc.n	80010bc <_strtol_l.constprop.0+0xc0>
 800107a:	d101      	bne.n	8001080 <_strtol_l.constprop.0+0x84>
 800107c:	45a2      	cmp	sl, r4
 800107e:	db1d      	blt.n	80010bc <_strtol_l.constprop.0+0xc0>
 8001080:	fb00 4003 	mla	r0, r0, r3, r4
 8001084:	2201      	movs	r2, #1
 8001086:	f815 4b01 	ldrb.w	r4, [r5], #1
 800108a:	e7eb      	b.n	8001064 <_strtol_l.constprop.0+0x68>
 800108c:	2c2b      	cmp	r4, #43	@ 0x2b
 800108e:	bf04      	itt	eq
 8001090:	782c      	ldrbeq	r4, [r5, #0]
 8001092:	1c95      	addeq	r5, r2, #2
 8001094:	e7cf      	b.n	8001036 <_strtol_l.constprop.0+0x3a>
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1da      	bne.n	8001050 <_strtol_l.constprop.0+0x54>
 800109a:	2c30      	cmp	r4, #48	@ 0x30
 800109c:	bf0c      	ite	eq
 800109e:	2308      	moveq	r3, #8
 80010a0:	230a      	movne	r3, #10
 80010a2:	e7d5      	b.n	8001050 <_strtol_l.constprop.0+0x54>
 80010a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80010a8:	2f19      	cmp	r7, #25
 80010aa:	d801      	bhi.n	80010b0 <_strtol_l.constprop.0+0xb4>
 80010ac:	3c37      	subs	r4, #55	@ 0x37
 80010ae:	e7de      	b.n	800106e <_strtol_l.constprop.0+0x72>
 80010b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80010b4:	2f19      	cmp	r7, #25
 80010b6:	d804      	bhi.n	80010c2 <_strtol_l.constprop.0+0xc6>
 80010b8:	3c57      	subs	r4, #87	@ 0x57
 80010ba:	e7d8      	b.n	800106e <_strtol_l.constprop.0+0x72>
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	e7e1      	b.n	8001086 <_strtol_l.constprop.0+0x8a>
 80010c2:	1c53      	adds	r3, r2, #1
 80010c4:	d108      	bne.n	80010d8 <_strtol_l.constprop.0+0xdc>
 80010c6:	2322      	movs	r3, #34	@ 0x22
 80010c8:	f8ce 3000 	str.w	r3, [lr]
 80010cc:	4660      	mov	r0, ip
 80010ce:	f1b8 0f00 	cmp.w	r8, #0
 80010d2:	d0a0      	beq.n	8001016 <_strtol_l.constprop.0+0x1a>
 80010d4:	1e69      	subs	r1, r5, #1
 80010d6:	e006      	b.n	80010e6 <_strtol_l.constprop.0+0xea>
 80010d8:	b106      	cbz	r6, 80010dc <_strtol_l.constprop.0+0xe0>
 80010da:	4240      	negs	r0, r0
 80010dc:	f1b8 0f00 	cmp.w	r8, #0
 80010e0:	d099      	beq.n	8001016 <_strtol_l.constprop.0+0x1a>
 80010e2:	2a00      	cmp	r2, #0
 80010e4:	d1f6      	bne.n	80010d4 <_strtol_l.constprop.0+0xd8>
 80010e6:	f8c8 1000 	str.w	r1, [r8]
 80010ea:	e794      	b.n	8001016 <_strtol_l.constprop.0+0x1a>
 80010ec:	08002304 	.word	0x08002304

080010f0 <strtol>:
 80010f0:	4613      	mov	r3, r2
 80010f2:	460a      	mov	r2, r1
 80010f4:	4601      	mov	r1, r0
 80010f6:	4802      	ldr	r0, [pc, #8]	@ (8001100 <strtol+0x10>)
 80010f8:	6800      	ldr	r0, [r0, #0]
 80010fa:	f7ff bf7f 	b.w	8000ffc <_strtol_l.constprop.0>
 80010fe:	bf00      	nop
 8001100:	2000013c 	.word	0x2000013c

08001104 <std>:
 8001104:	2300      	movs	r3, #0
 8001106:	b510      	push	{r4, lr}
 8001108:	4604      	mov	r4, r0
 800110a:	e9c0 3300 	strd	r3, r3, [r0]
 800110e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001112:	6083      	str	r3, [r0, #8]
 8001114:	8181      	strh	r1, [r0, #12]
 8001116:	6643      	str	r3, [r0, #100]	@ 0x64
 8001118:	81c2      	strh	r2, [r0, #14]
 800111a:	6183      	str	r3, [r0, #24]
 800111c:	4619      	mov	r1, r3
 800111e:	2208      	movs	r2, #8
 8001120:	305c      	adds	r0, #92	@ 0x5c
 8001122:	f000 f8f4 	bl	800130e <memset>
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <std+0x58>)
 8001128:	6263      	str	r3, [r4, #36]	@ 0x24
 800112a:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <std+0x5c>)
 800112c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800112e:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <std+0x60>)
 8001130:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <std+0x64>)
 8001134:	6323      	str	r3, [r4, #48]	@ 0x30
 8001136:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <std+0x68>)
 8001138:	6224      	str	r4, [r4, #32]
 800113a:	429c      	cmp	r4, r3
 800113c:	d006      	beq.n	800114c <std+0x48>
 800113e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001142:	4294      	cmp	r4, r2
 8001144:	d002      	beq.n	800114c <std+0x48>
 8001146:	33d0      	adds	r3, #208	@ 0xd0
 8001148:	429c      	cmp	r4, r3
 800114a:	d105      	bne.n	8001158 <std+0x54>
 800114c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001154:	f000 b9c2 	b.w	80014dc <__retarget_lock_init_recursive>
 8001158:	bd10      	pop	{r4, pc}
 800115a:	bf00      	nop
 800115c:	08001289 	.word	0x08001289
 8001160:	080012ab 	.word	0x080012ab
 8001164:	080012e3 	.word	0x080012e3
 8001168:	08001307 	.word	0x08001307
 800116c:	200003c4 	.word	0x200003c4

08001170 <stdio_exit_handler>:
 8001170:	4a02      	ldr	r2, [pc, #8]	@ (800117c <stdio_exit_handler+0xc>)
 8001172:	4903      	ldr	r1, [pc, #12]	@ (8001180 <stdio_exit_handler+0x10>)
 8001174:	4803      	ldr	r0, [pc, #12]	@ (8001184 <stdio_exit_handler+0x14>)
 8001176:	f000 b869 	b.w	800124c <_fwalk_sglue>
 800117a:	bf00      	nop
 800117c:	20000130 	.word	0x20000130
 8001180:	08001829 	.word	0x08001829
 8001184:	20000140 	.word	0x20000140

08001188 <cleanup_stdio>:
 8001188:	6841      	ldr	r1, [r0, #4]
 800118a:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <cleanup_stdio+0x34>)
 800118c:	4299      	cmp	r1, r3
 800118e:	b510      	push	{r4, lr}
 8001190:	4604      	mov	r4, r0
 8001192:	d001      	beq.n	8001198 <cleanup_stdio+0x10>
 8001194:	f000 fb48 	bl	8001828 <_fflush_r>
 8001198:	68a1      	ldr	r1, [r4, #8]
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <cleanup_stdio+0x38>)
 800119c:	4299      	cmp	r1, r3
 800119e:	d002      	beq.n	80011a6 <cleanup_stdio+0x1e>
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fb41 	bl	8001828 <_fflush_r>
 80011a6:	68e1      	ldr	r1, [r4, #12]
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <cleanup_stdio+0x3c>)
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d004      	beq.n	80011b8 <cleanup_stdio+0x30>
 80011ae:	4620      	mov	r0, r4
 80011b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b4:	f000 bb38 	b.w	8001828 <_fflush_r>
 80011b8:	bd10      	pop	{r4, pc}
 80011ba:	bf00      	nop
 80011bc:	200003c4 	.word	0x200003c4
 80011c0:	2000042c 	.word	0x2000042c
 80011c4:	20000494 	.word	0x20000494

080011c8 <global_stdio_init.part.0>:
 80011c8:	b510      	push	{r4, lr}
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <global_stdio_init.part.0+0x30>)
 80011cc:	4c0b      	ldr	r4, [pc, #44]	@ (80011fc <global_stdio_init.part.0+0x34>)
 80011ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001200 <global_stdio_init.part.0+0x38>)
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	4620      	mov	r0, r4
 80011d4:	2200      	movs	r2, #0
 80011d6:	2104      	movs	r1, #4
 80011d8:	f7ff ff94 	bl	8001104 <std>
 80011dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80011e0:	2201      	movs	r2, #1
 80011e2:	2109      	movs	r1, #9
 80011e4:	f7ff ff8e 	bl	8001104 <std>
 80011e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80011ec:	2202      	movs	r2, #2
 80011ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011f2:	2112      	movs	r1, #18
 80011f4:	f7ff bf86 	b.w	8001104 <std>
 80011f8:	200004fc 	.word	0x200004fc
 80011fc:	200003c4 	.word	0x200003c4
 8001200:	08001171 	.word	0x08001171

08001204 <__sfp_lock_acquire>:
 8001204:	4801      	ldr	r0, [pc, #4]	@ (800120c <__sfp_lock_acquire+0x8>)
 8001206:	f000 b96a 	b.w	80014de <__retarget_lock_acquire_recursive>
 800120a:	bf00      	nop
 800120c:	20000505 	.word	0x20000505

08001210 <__sfp_lock_release>:
 8001210:	4801      	ldr	r0, [pc, #4]	@ (8001218 <__sfp_lock_release+0x8>)
 8001212:	f000 b965 	b.w	80014e0 <__retarget_lock_release_recursive>
 8001216:	bf00      	nop
 8001218:	20000505 	.word	0x20000505

0800121c <__sinit>:
 800121c:	b510      	push	{r4, lr}
 800121e:	4604      	mov	r4, r0
 8001220:	f7ff fff0 	bl	8001204 <__sfp_lock_acquire>
 8001224:	6a23      	ldr	r3, [r4, #32]
 8001226:	b11b      	cbz	r3, 8001230 <__sinit+0x14>
 8001228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800122c:	f7ff bff0 	b.w	8001210 <__sfp_lock_release>
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__sinit+0x28>)
 8001232:	6223      	str	r3, [r4, #32]
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <__sinit+0x2c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f5      	bne.n	8001228 <__sinit+0xc>
 800123c:	f7ff ffc4 	bl	80011c8 <global_stdio_init.part.0>
 8001240:	e7f2      	b.n	8001228 <__sinit+0xc>
 8001242:	bf00      	nop
 8001244:	08001189 	.word	0x08001189
 8001248:	200004fc 	.word	0x200004fc

0800124c <_fwalk_sglue>:
 800124c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001250:	4607      	mov	r7, r0
 8001252:	4688      	mov	r8, r1
 8001254:	4614      	mov	r4, r2
 8001256:	2600      	movs	r6, #0
 8001258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800125c:	f1b9 0901 	subs.w	r9, r9, #1
 8001260:	d505      	bpl.n	800126e <_fwalk_sglue+0x22>
 8001262:	6824      	ldr	r4, [r4, #0]
 8001264:	2c00      	cmp	r4, #0
 8001266:	d1f7      	bne.n	8001258 <_fwalk_sglue+0xc>
 8001268:	4630      	mov	r0, r6
 800126a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800126e:	89ab      	ldrh	r3, [r5, #12]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d907      	bls.n	8001284 <_fwalk_sglue+0x38>
 8001274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001278:	3301      	adds	r3, #1
 800127a:	d003      	beq.n	8001284 <_fwalk_sglue+0x38>
 800127c:	4629      	mov	r1, r5
 800127e:	4638      	mov	r0, r7
 8001280:	47c0      	blx	r8
 8001282:	4306      	orrs	r6, r0
 8001284:	3568      	adds	r5, #104	@ 0x68
 8001286:	e7e9      	b.n	800125c <_fwalk_sglue+0x10>

08001288 <__sread>:
 8001288:	b510      	push	{r4, lr}
 800128a:	460c      	mov	r4, r1
 800128c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001290:	f000 f8d6 	bl	8001440 <_read_r>
 8001294:	2800      	cmp	r0, #0
 8001296:	bfab      	itete	ge
 8001298:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800129a:	89a3      	ldrhlt	r3, [r4, #12]
 800129c:	181b      	addge	r3, r3, r0
 800129e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80012a2:	bfac      	ite	ge
 80012a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80012a6:	81a3      	strhlt	r3, [r4, #12]
 80012a8:	bd10      	pop	{r4, pc}

080012aa <__swrite>:
 80012aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ae:	461f      	mov	r7, r3
 80012b0:	898b      	ldrh	r3, [r1, #12]
 80012b2:	05db      	lsls	r3, r3, #23
 80012b4:	4605      	mov	r5, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4616      	mov	r6, r2
 80012ba:	d505      	bpl.n	80012c8 <__swrite+0x1e>
 80012bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012c0:	2302      	movs	r3, #2
 80012c2:	2200      	movs	r2, #0
 80012c4:	f000 f8aa 	bl	800141c <_lseek_r>
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80012d2:	81a3      	strh	r3, [r4, #12]
 80012d4:	4632      	mov	r2, r6
 80012d6:	463b      	mov	r3, r7
 80012d8:	4628      	mov	r0, r5
 80012da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012de:	f000 b8c1 	b.w	8001464 <_write_r>

080012e2 <__sseek>:
 80012e2:	b510      	push	{r4, lr}
 80012e4:	460c      	mov	r4, r1
 80012e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ea:	f000 f897 	bl	800141c <_lseek_r>
 80012ee:	1c43      	adds	r3, r0, #1
 80012f0:	89a3      	ldrh	r3, [r4, #12]
 80012f2:	bf15      	itete	ne
 80012f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80012f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80012fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80012fe:	81a3      	strheq	r3, [r4, #12]
 8001300:	bf18      	it	ne
 8001302:	81a3      	strhne	r3, [r4, #12]
 8001304:	bd10      	pop	{r4, pc}

08001306 <__sclose>:
 8001306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800130a:	f000 b877 	b.w	80013fc <_close_r>

0800130e <memset>:
 800130e:	4402      	add	r2, r0
 8001310:	4603      	mov	r3, r0
 8001312:	4293      	cmp	r3, r2
 8001314:	d100      	bne.n	8001318 <memset+0xa>
 8001316:	4770      	bx	lr
 8001318:	f803 1b01 	strb.w	r1, [r3], #1
 800131c:	e7f9      	b.n	8001312 <memset+0x4>

0800131e <strncpy>:
 800131e:	b510      	push	{r4, lr}
 8001320:	3901      	subs	r1, #1
 8001322:	4603      	mov	r3, r0
 8001324:	b132      	cbz	r2, 8001334 <strncpy+0x16>
 8001326:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800132a:	f803 4b01 	strb.w	r4, [r3], #1
 800132e:	3a01      	subs	r2, #1
 8001330:	2c00      	cmp	r4, #0
 8001332:	d1f7      	bne.n	8001324 <strncpy+0x6>
 8001334:	441a      	add	r2, r3
 8001336:	2100      	movs	r1, #0
 8001338:	4293      	cmp	r3, r2
 800133a:	d100      	bne.n	800133e <strncpy+0x20>
 800133c:	bd10      	pop	{r4, pc}
 800133e:	f803 1b01 	strb.w	r1, [r3], #1
 8001342:	e7f9      	b.n	8001338 <strncpy+0x1a>

08001344 <strtok>:
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <strtok+0x5c>)
 8001346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134a:	681f      	ldr	r7, [r3, #0]
 800134c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800134e:	4605      	mov	r5, r0
 8001350:	460e      	mov	r6, r1
 8001352:	b9ec      	cbnz	r4, 8001390 <strtok+0x4c>
 8001354:	2050      	movs	r0, #80	@ 0x50
 8001356:	f000 f92d 	bl	80015b4 <malloc>
 800135a:	4602      	mov	r2, r0
 800135c:	6478      	str	r0, [r7, #68]	@ 0x44
 800135e:	b920      	cbnz	r0, 800136a <strtok+0x26>
 8001360:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <strtok+0x60>)
 8001362:	4811      	ldr	r0, [pc, #68]	@ (80013a8 <strtok+0x64>)
 8001364:	215b      	movs	r1, #91	@ 0x5b
 8001366:	f000 f8bd 	bl	80014e4 <__assert_func>
 800136a:	e9c0 4400 	strd	r4, r4, [r0]
 800136e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8001372:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8001376:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800137a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800137e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8001382:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8001386:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800138a:	6184      	str	r4, [r0, #24]
 800138c:	7704      	strb	r4, [r0, #28]
 800138e:	6244      	str	r4, [r0, #36]	@ 0x24
 8001390:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001392:	4631      	mov	r1, r6
 8001394:	4628      	mov	r0, r5
 8001396:	2301      	movs	r3, #1
 8001398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800139c:	f000 b806 	b.w	80013ac <__strtok_r>
 80013a0:	2000013c 	.word	0x2000013c
 80013a4:	08002404 	.word	0x08002404
 80013a8:	0800241b 	.word	0x0800241b

080013ac <__strtok_r>:
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	4604      	mov	r4, r0
 80013b0:	b908      	cbnz	r0, 80013b6 <__strtok_r+0xa>
 80013b2:	6814      	ldr	r4, [r2, #0]
 80013b4:	b144      	cbz	r4, 80013c8 <__strtok_r+0x1c>
 80013b6:	4620      	mov	r0, r4
 80013b8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80013bc:	460f      	mov	r7, r1
 80013be:	f817 6b01 	ldrb.w	r6, [r7], #1
 80013c2:	b91e      	cbnz	r6, 80013cc <__strtok_r+0x20>
 80013c4:	b965      	cbnz	r5, 80013e0 <__strtok_r+0x34>
 80013c6:	6015      	str	r5, [r2, #0]
 80013c8:	2000      	movs	r0, #0
 80013ca:	e005      	b.n	80013d8 <__strtok_r+0x2c>
 80013cc:	42b5      	cmp	r5, r6
 80013ce:	d1f6      	bne.n	80013be <__strtok_r+0x12>
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f0      	bne.n	80013b6 <__strtok_r+0xa>
 80013d4:	6014      	str	r4, [r2, #0]
 80013d6:	7003      	strb	r3, [r0, #0]
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013da:	461c      	mov	r4, r3
 80013dc:	e00c      	b.n	80013f8 <__strtok_r+0x4c>
 80013de:	b915      	cbnz	r5, 80013e6 <__strtok_r+0x3a>
 80013e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80013e4:	460e      	mov	r6, r1
 80013e6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80013ea:	42ab      	cmp	r3, r5
 80013ec:	d1f7      	bne.n	80013de <__strtok_r+0x32>
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f3      	beq.n	80013da <__strtok_r+0x2e>
 80013f2:	2300      	movs	r3, #0
 80013f4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80013f8:	6014      	str	r4, [r2, #0]
 80013fa:	e7ed      	b.n	80013d8 <__strtok_r+0x2c>

080013fc <_close_r>:
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	4d06      	ldr	r5, [pc, #24]	@ (8001418 <_close_r+0x1c>)
 8001400:	2300      	movs	r3, #0
 8001402:	4604      	mov	r4, r0
 8001404:	4608      	mov	r0, r1
 8001406:	602b      	str	r3, [r5, #0]
 8001408:	f7ff fb8a 	bl	8000b20 <_close>
 800140c:	1c43      	adds	r3, r0, #1
 800140e:	d102      	bne.n	8001416 <_close_r+0x1a>
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	b103      	cbz	r3, 8001416 <_close_r+0x1a>
 8001414:	6023      	str	r3, [r4, #0]
 8001416:	bd38      	pop	{r3, r4, r5, pc}
 8001418:	20000500 	.word	0x20000500

0800141c <_lseek_r>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	4d07      	ldr	r5, [pc, #28]	@ (800143c <_lseek_r+0x20>)
 8001420:	4604      	mov	r4, r0
 8001422:	4608      	mov	r0, r1
 8001424:	4611      	mov	r1, r2
 8001426:	2200      	movs	r2, #0
 8001428:	602a      	str	r2, [r5, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	f7ff fb9f 	bl	8000b6e <_lseek>
 8001430:	1c43      	adds	r3, r0, #1
 8001432:	d102      	bne.n	800143a <_lseek_r+0x1e>
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	b103      	cbz	r3, 800143a <_lseek_r+0x1e>
 8001438:	6023      	str	r3, [r4, #0]
 800143a:	bd38      	pop	{r3, r4, r5, pc}
 800143c:	20000500 	.word	0x20000500

08001440 <_read_r>:
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	4d07      	ldr	r5, [pc, #28]	@ (8001460 <_read_r+0x20>)
 8001444:	4604      	mov	r4, r0
 8001446:	4608      	mov	r0, r1
 8001448:	4611      	mov	r1, r2
 800144a:	2200      	movs	r2, #0
 800144c:	602a      	str	r2, [r5, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	f7ff fb2d 	bl	8000aae <_read>
 8001454:	1c43      	adds	r3, r0, #1
 8001456:	d102      	bne.n	800145e <_read_r+0x1e>
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	b103      	cbz	r3, 800145e <_read_r+0x1e>
 800145c:	6023      	str	r3, [r4, #0]
 800145e:	bd38      	pop	{r3, r4, r5, pc}
 8001460:	20000500 	.word	0x20000500

08001464 <_write_r>:
 8001464:	b538      	push	{r3, r4, r5, lr}
 8001466:	4d07      	ldr	r5, [pc, #28]	@ (8001484 <_write_r+0x20>)
 8001468:	4604      	mov	r4, r0
 800146a:	4608      	mov	r0, r1
 800146c:	4611      	mov	r1, r2
 800146e:	2200      	movs	r2, #0
 8001470:	602a      	str	r2, [r5, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	f7ff fb38 	bl	8000ae8 <_write>
 8001478:	1c43      	adds	r3, r0, #1
 800147a:	d102      	bne.n	8001482 <_write_r+0x1e>
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	b103      	cbz	r3, 8001482 <_write_r+0x1e>
 8001480:	6023      	str	r3, [r4, #0]
 8001482:	bd38      	pop	{r3, r4, r5, pc}
 8001484:	20000500 	.word	0x20000500

08001488 <__errno>:
 8001488:	4b01      	ldr	r3, [pc, #4]	@ (8001490 <__errno+0x8>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000013c 	.word	0x2000013c

08001494 <__libc_init_array>:
 8001494:	b570      	push	{r4, r5, r6, lr}
 8001496:	4d0d      	ldr	r5, [pc, #52]	@ (80014cc <__libc_init_array+0x38>)
 8001498:	4c0d      	ldr	r4, [pc, #52]	@ (80014d0 <__libc_init_array+0x3c>)
 800149a:	1b64      	subs	r4, r4, r5
 800149c:	10a4      	asrs	r4, r4, #2
 800149e:	2600      	movs	r6, #0
 80014a0:	42a6      	cmp	r6, r4
 80014a2:	d109      	bne.n	80014b8 <__libc_init_array+0x24>
 80014a4:	4d0b      	ldr	r5, [pc, #44]	@ (80014d4 <__libc_init_array+0x40>)
 80014a6:	4c0c      	ldr	r4, [pc, #48]	@ (80014d8 <__libc_init_array+0x44>)
 80014a8:	f000 fe3a 	bl	8002120 <_init>
 80014ac:	1b64      	subs	r4, r4, r5
 80014ae:	10a4      	asrs	r4, r4, #2
 80014b0:	2600      	movs	r6, #0
 80014b2:	42a6      	cmp	r6, r4
 80014b4:	d105      	bne.n	80014c2 <__libc_init_array+0x2e>
 80014b6:	bd70      	pop	{r4, r5, r6, pc}
 80014b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80014bc:	4798      	blx	r3
 80014be:	3601      	adds	r6, #1
 80014c0:	e7ee      	b.n	80014a0 <__libc_init_array+0xc>
 80014c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80014c6:	4798      	blx	r3
 80014c8:	3601      	adds	r6, #1
 80014ca:	e7f2      	b.n	80014b2 <__libc_init_array+0x1e>
 80014cc:	080024ec 	.word	0x080024ec
 80014d0:	080024ec 	.word	0x080024ec
 80014d4:	080024ec 	.word	0x080024ec
 80014d8:	080024f0 	.word	0x080024f0

080014dc <__retarget_lock_init_recursive>:
 80014dc:	4770      	bx	lr

080014de <__retarget_lock_acquire_recursive>:
 80014de:	4770      	bx	lr

080014e0 <__retarget_lock_release_recursive>:
 80014e0:	4770      	bx	lr
	...

080014e4 <__assert_func>:
 80014e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80014e6:	4614      	mov	r4, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <__assert_func+0x2c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4605      	mov	r5, r0
 80014f0:	68d8      	ldr	r0, [r3, #12]
 80014f2:	b954      	cbnz	r4, 800150a <__assert_func+0x26>
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <__assert_func+0x30>)
 80014f6:	461c      	mov	r4, r3
 80014f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80014fc:	9100      	str	r1, [sp, #0]
 80014fe:	462b      	mov	r3, r5
 8001500:	4905      	ldr	r1, [pc, #20]	@ (8001518 <__assert_func+0x34>)
 8001502:	f000 f9b9 	bl	8001878 <fiprintf>
 8001506:	f000 f9d9 	bl	80018bc <abort>
 800150a:	4b04      	ldr	r3, [pc, #16]	@ (800151c <__assert_func+0x38>)
 800150c:	e7f4      	b.n	80014f8 <__assert_func+0x14>
 800150e:	bf00      	nop
 8001510:	2000013c 	.word	0x2000013c
 8001514:	080024b0 	.word	0x080024b0
 8001518:	08002482 	.word	0x08002482
 800151c:	08002475 	.word	0x08002475

08001520 <_free_r>:
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	4605      	mov	r5, r0
 8001524:	2900      	cmp	r1, #0
 8001526:	d041      	beq.n	80015ac <_free_r+0x8c>
 8001528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800152c:	1f0c      	subs	r4, r1, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	bfb8      	it	lt
 8001532:	18e4      	addlt	r4, r4, r3
 8001534:	f000 f8e8 	bl	8001708 <__malloc_lock>
 8001538:	4a1d      	ldr	r2, [pc, #116]	@ (80015b0 <_free_r+0x90>)
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	b933      	cbnz	r3, 800154c <_free_r+0x2c>
 800153e:	6063      	str	r3, [r4, #4]
 8001540:	6014      	str	r4, [r2, #0]
 8001542:	4628      	mov	r0, r5
 8001544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001548:	f000 b8e4 	b.w	8001714 <__malloc_unlock>
 800154c:	42a3      	cmp	r3, r4
 800154e:	d908      	bls.n	8001562 <_free_r+0x42>
 8001550:	6820      	ldr	r0, [r4, #0]
 8001552:	1821      	adds	r1, r4, r0
 8001554:	428b      	cmp	r3, r1
 8001556:	bf01      	itttt	eq
 8001558:	6819      	ldreq	r1, [r3, #0]
 800155a:	685b      	ldreq	r3, [r3, #4]
 800155c:	1809      	addeq	r1, r1, r0
 800155e:	6021      	streq	r1, [r4, #0]
 8001560:	e7ed      	b.n	800153e <_free_r+0x1e>
 8001562:	461a      	mov	r2, r3
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	b10b      	cbz	r3, 800156c <_free_r+0x4c>
 8001568:	42a3      	cmp	r3, r4
 800156a:	d9fa      	bls.n	8001562 <_free_r+0x42>
 800156c:	6811      	ldr	r1, [r2, #0]
 800156e:	1850      	adds	r0, r2, r1
 8001570:	42a0      	cmp	r0, r4
 8001572:	d10b      	bne.n	800158c <_free_r+0x6c>
 8001574:	6820      	ldr	r0, [r4, #0]
 8001576:	4401      	add	r1, r0
 8001578:	1850      	adds	r0, r2, r1
 800157a:	4283      	cmp	r3, r0
 800157c:	6011      	str	r1, [r2, #0]
 800157e:	d1e0      	bne.n	8001542 <_free_r+0x22>
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	6053      	str	r3, [r2, #4]
 8001586:	4408      	add	r0, r1
 8001588:	6010      	str	r0, [r2, #0]
 800158a:	e7da      	b.n	8001542 <_free_r+0x22>
 800158c:	d902      	bls.n	8001594 <_free_r+0x74>
 800158e:	230c      	movs	r3, #12
 8001590:	602b      	str	r3, [r5, #0]
 8001592:	e7d6      	b.n	8001542 <_free_r+0x22>
 8001594:	6820      	ldr	r0, [r4, #0]
 8001596:	1821      	adds	r1, r4, r0
 8001598:	428b      	cmp	r3, r1
 800159a:	bf04      	itt	eq
 800159c:	6819      	ldreq	r1, [r3, #0]
 800159e:	685b      	ldreq	r3, [r3, #4]
 80015a0:	6063      	str	r3, [r4, #4]
 80015a2:	bf04      	itt	eq
 80015a4:	1809      	addeq	r1, r1, r0
 80015a6:	6021      	streq	r1, [r4, #0]
 80015a8:	6054      	str	r4, [r2, #4]
 80015aa:	e7ca      	b.n	8001542 <_free_r+0x22>
 80015ac:	bd38      	pop	{r3, r4, r5, pc}
 80015ae:	bf00      	nop
 80015b0:	2000050c 	.word	0x2000050c

080015b4 <malloc>:
 80015b4:	4b02      	ldr	r3, [pc, #8]	@ (80015c0 <malloc+0xc>)
 80015b6:	4601      	mov	r1, r0
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	f000 b825 	b.w	8001608 <_malloc_r>
 80015be:	bf00      	nop
 80015c0:	2000013c 	.word	0x2000013c

080015c4 <sbrk_aligned>:
 80015c4:	b570      	push	{r4, r5, r6, lr}
 80015c6:	4e0f      	ldr	r6, [pc, #60]	@ (8001604 <sbrk_aligned+0x40>)
 80015c8:	460c      	mov	r4, r1
 80015ca:	6831      	ldr	r1, [r6, #0]
 80015cc:	4605      	mov	r5, r0
 80015ce:	b911      	cbnz	r1, 80015d6 <sbrk_aligned+0x12>
 80015d0:	f000 f964 	bl	800189c <_sbrk_r>
 80015d4:	6030      	str	r0, [r6, #0]
 80015d6:	4621      	mov	r1, r4
 80015d8:	4628      	mov	r0, r5
 80015da:	f000 f95f 	bl	800189c <_sbrk_r>
 80015de:	1c43      	adds	r3, r0, #1
 80015e0:	d103      	bne.n	80015ea <sbrk_aligned+0x26>
 80015e2:	f04f 34ff 	mov.w	r4, #4294967295
 80015e6:	4620      	mov	r0, r4
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
 80015ea:	1cc4      	adds	r4, r0, #3
 80015ec:	f024 0403 	bic.w	r4, r4, #3
 80015f0:	42a0      	cmp	r0, r4
 80015f2:	d0f8      	beq.n	80015e6 <sbrk_aligned+0x22>
 80015f4:	1a21      	subs	r1, r4, r0
 80015f6:	4628      	mov	r0, r5
 80015f8:	f000 f950 	bl	800189c <_sbrk_r>
 80015fc:	3001      	adds	r0, #1
 80015fe:	d1f2      	bne.n	80015e6 <sbrk_aligned+0x22>
 8001600:	e7ef      	b.n	80015e2 <sbrk_aligned+0x1e>
 8001602:	bf00      	nop
 8001604:	20000508 	.word	0x20000508

08001608 <_malloc_r>:
 8001608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800160c:	1ccd      	adds	r5, r1, #3
 800160e:	f025 0503 	bic.w	r5, r5, #3
 8001612:	3508      	adds	r5, #8
 8001614:	2d0c      	cmp	r5, #12
 8001616:	bf38      	it	cc
 8001618:	250c      	movcc	r5, #12
 800161a:	2d00      	cmp	r5, #0
 800161c:	4606      	mov	r6, r0
 800161e:	db01      	blt.n	8001624 <_malloc_r+0x1c>
 8001620:	42a9      	cmp	r1, r5
 8001622:	d904      	bls.n	800162e <_malloc_r+0x26>
 8001624:	230c      	movs	r3, #12
 8001626:	6033      	str	r3, [r6, #0]
 8001628:	2000      	movs	r0, #0
 800162a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800162e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001704 <_malloc_r+0xfc>
 8001632:	f000 f869 	bl	8001708 <__malloc_lock>
 8001636:	f8d8 3000 	ldr.w	r3, [r8]
 800163a:	461c      	mov	r4, r3
 800163c:	bb44      	cbnz	r4, 8001690 <_malloc_r+0x88>
 800163e:	4629      	mov	r1, r5
 8001640:	4630      	mov	r0, r6
 8001642:	f7ff ffbf 	bl	80015c4 <sbrk_aligned>
 8001646:	1c43      	adds	r3, r0, #1
 8001648:	4604      	mov	r4, r0
 800164a:	d158      	bne.n	80016fe <_malloc_r+0xf6>
 800164c:	f8d8 4000 	ldr.w	r4, [r8]
 8001650:	4627      	mov	r7, r4
 8001652:	2f00      	cmp	r7, #0
 8001654:	d143      	bne.n	80016de <_malloc_r+0xd6>
 8001656:	2c00      	cmp	r4, #0
 8001658:	d04b      	beq.n	80016f2 <_malloc_r+0xea>
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	4639      	mov	r1, r7
 800165e:	4630      	mov	r0, r6
 8001660:	eb04 0903 	add.w	r9, r4, r3
 8001664:	f000 f91a 	bl	800189c <_sbrk_r>
 8001668:	4581      	cmp	r9, r0
 800166a:	d142      	bne.n	80016f2 <_malloc_r+0xea>
 800166c:	6821      	ldr	r1, [r4, #0]
 800166e:	1a6d      	subs	r5, r5, r1
 8001670:	4629      	mov	r1, r5
 8001672:	4630      	mov	r0, r6
 8001674:	f7ff ffa6 	bl	80015c4 <sbrk_aligned>
 8001678:	3001      	adds	r0, #1
 800167a:	d03a      	beq.n	80016f2 <_malloc_r+0xea>
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	442b      	add	r3, r5
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	f8d8 3000 	ldr.w	r3, [r8]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	bb62      	cbnz	r2, 80016e4 <_malloc_r+0xdc>
 800168a:	f8c8 7000 	str.w	r7, [r8]
 800168e:	e00f      	b.n	80016b0 <_malloc_r+0xa8>
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	1b52      	subs	r2, r2, r5
 8001694:	d420      	bmi.n	80016d8 <_malloc_r+0xd0>
 8001696:	2a0b      	cmp	r2, #11
 8001698:	d917      	bls.n	80016ca <_malloc_r+0xc2>
 800169a:	1961      	adds	r1, r4, r5
 800169c:	42a3      	cmp	r3, r4
 800169e:	6025      	str	r5, [r4, #0]
 80016a0:	bf18      	it	ne
 80016a2:	6059      	strne	r1, [r3, #4]
 80016a4:	6863      	ldr	r3, [r4, #4]
 80016a6:	bf08      	it	eq
 80016a8:	f8c8 1000 	streq.w	r1, [r8]
 80016ac:	5162      	str	r2, [r4, r5]
 80016ae:	604b      	str	r3, [r1, #4]
 80016b0:	4630      	mov	r0, r6
 80016b2:	f000 f82f 	bl	8001714 <__malloc_unlock>
 80016b6:	f104 000b 	add.w	r0, r4, #11
 80016ba:	1d23      	adds	r3, r4, #4
 80016bc:	f020 0007 	bic.w	r0, r0, #7
 80016c0:	1ac2      	subs	r2, r0, r3
 80016c2:	bf1c      	itt	ne
 80016c4:	1a1b      	subne	r3, r3, r0
 80016c6:	50a3      	strne	r3, [r4, r2]
 80016c8:	e7af      	b.n	800162a <_malloc_r+0x22>
 80016ca:	6862      	ldr	r2, [r4, #4]
 80016cc:	42a3      	cmp	r3, r4
 80016ce:	bf0c      	ite	eq
 80016d0:	f8c8 2000 	streq.w	r2, [r8]
 80016d4:	605a      	strne	r2, [r3, #4]
 80016d6:	e7eb      	b.n	80016b0 <_malloc_r+0xa8>
 80016d8:	4623      	mov	r3, r4
 80016da:	6864      	ldr	r4, [r4, #4]
 80016dc:	e7ae      	b.n	800163c <_malloc_r+0x34>
 80016de:	463c      	mov	r4, r7
 80016e0:	687f      	ldr	r7, [r7, #4]
 80016e2:	e7b6      	b.n	8001652 <_malloc_r+0x4a>
 80016e4:	461a      	mov	r2, r3
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	42a3      	cmp	r3, r4
 80016ea:	d1fb      	bne.n	80016e4 <_malloc_r+0xdc>
 80016ec:	2300      	movs	r3, #0
 80016ee:	6053      	str	r3, [r2, #4]
 80016f0:	e7de      	b.n	80016b0 <_malloc_r+0xa8>
 80016f2:	230c      	movs	r3, #12
 80016f4:	6033      	str	r3, [r6, #0]
 80016f6:	4630      	mov	r0, r6
 80016f8:	f000 f80c 	bl	8001714 <__malloc_unlock>
 80016fc:	e794      	b.n	8001628 <_malloc_r+0x20>
 80016fe:	6005      	str	r5, [r0, #0]
 8001700:	e7d6      	b.n	80016b0 <_malloc_r+0xa8>
 8001702:	bf00      	nop
 8001704:	2000050c 	.word	0x2000050c

08001708 <__malloc_lock>:
 8001708:	4801      	ldr	r0, [pc, #4]	@ (8001710 <__malloc_lock+0x8>)
 800170a:	f7ff bee8 	b.w	80014de <__retarget_lock_acquire_recursive>
 800170e:	bf00      	nop
 8001710:	20000504 	.word	0x20000504

08001714 <__malloc_unlock>:
 8001714:	4801      	ldr	r0, [pc, #4]	@ (800171c <__malloc_unlock+0x8>)
 8001716:	f7ff bee3 	b.w	80014e0 <__retarget_lock_release_recursive>
 800171a:	bf00      	nop
 800171c:	20000504 	.word	0x20000504

08001720 <__sflush_r>:
 8001720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001728:	0716      	lsls	r6, r2, #28
 800172a:	4605      	mov	r5, r0
 800172c:	460c      	mov	r4, r1
 800172e:	d454      	bmi.n	80017da <__sflush_r+0xba>
 8001730:	684b      	ldr	r3, [r1, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	dc02      	bgt.n	800173c <__sflush_r+0x1c>
 8001736:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	dd48      	ble.n	80017ce <__sflush_r+0xae>
 800173c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800173e:	2e00      	cmp	r6, #0
 8001740:	d045      	beq.n	80017ce <__sflush_r+0xae>
 8001742:	2300      	movs	r3, #0
 8001744:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001748:	682f      	ldr	r7, [r5, #0]
 800174a:	6a21      	ldr	r1, [r4, #32]
 800174c:	602b      	str	r3, [r5, #0]
 800174e:	d030      	beq.n	80017b2 <__sflush_r+0x92>
 8001750:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001752:	89a3      	ldrh	r3, [r4, #12]
 8001754:	0759      	lsls	r1, r3, #29
 8001756:	d505      	bpl.n	8001764 <__sflush_r+0x44>
 8001758:	6863      	ldr	r3, [r4, #4]
 800175a:	1ad2      	subs	r2, r2, r3
 800175c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800175e:	b10b      	cbz	r3, 8001764 <__sflush_r+0x44>
 8001760:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001762:	1ad2      	subs	r2, r2, r3
 8001764:	2300      	movs	r3, #0
 8001766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001768:	6a21      	ldr	r1, [r4, #32]
 800176a:	4628      	mov	r0, r5
 800176c:	47b0      	blx	r6
 800176e:	1c43      	adds	r3, r0, #1
 8001770:	89a3      	ldrh	r3, [r4, #12]
 8001772:	d106      	bne.n	8001782 <__sflush_r+0x62>
 8001774:	6829      	ldr	r1, [r5, #0]
 8001776:	291d      	cmp	r1, #29
 8001778:	d82b      	bhi.n	80017d2 <__sflush_r+0xb2>
 800177a:	4a2a      	ldr	r2, [pc, #168]	@ (8001824 <__sflush_r+0x104>)
 800177c:	410a      	asrs	r2, r1
 800177e:	07d6      	lsls	r6, r2, #31
 8001780:	d427      	bmi.n	80017d2 <__sflush_r+0xb2>
 8001782:	2200      	movs	r2, #0
 8001784:	6062      	str	r2, [r4, #4]
 8001786:	04d9      	lsls	r1, r3, #19
 8001788:	6922      	ldr	r2, [r4, #16]
 800178a:	6022      	str	r2, [r4, #0]
 800178c:	d504      	bpl.n	8001798 <__sflush_r+0x78>
 800178e:	1c42      	adds	r2, r0, #1
 8001790:	d101      	bne.n	8001796 <__sflush_r+0x76>
 8001792:	682b      	ldr	r3, [r5, #0]
 8001794:	b903      	cbnz	r3, 8001798 <__sflush_r+0x78>
 8001796:	6560      	str	r0, [r4, #84]	@ 0x54
 8001798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800179a:	602f      	str	r7, [r5, #0]
 800179c:	b1b9      	cbz	r1, 80017ce <__sflush_r+0xae>
 800179e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80017a2:	4299      	cmp	r1, r3
 80017a4:	d002      	beq.n	80017ac <__sflush_r+0x8c>
 80017a6:	4628      	mov	r0, r5
 80017a8:	f7ff feba 	bl	8001520 <_free_r>
 80017ac:	2300      	movs	r3, #0
 80017ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80017b0:	e00d      	b.n	80017ce <__sflush_r+0xae>
 80017b2:	2301      	movs	r3, #1
 80017b4:	4628      	mov	r0, r5
 80017b6:	47b0      	blx	r6
 80017b8:	4602      	mov	r2, r0
 80017ba:	1c50      	adds	r0, r2, #1
 80017bc:	d1c9      	bne.n	8001752 <__sflush_r+0x32>
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0c6      	beq.n	8001752 <__sflush_r+0x32>
 80017c4:	2b1d      	cmp	r3, #29
 80017c6:	d001      	beq.n	80017cc <__sflush_r+0xac>
 80017c8:	2b16      	cmp	r3, #22
 80017ca:	d11e      	bne.n	800180a <__sflush_r+0xea>
 80017cc:	602f      	str	r7, [r5, #0]
 80017ce:	2000      	movs	r0, #0
 80017d0:	e022      	b.n	8001818 <__sflush_r+0xf8>
 80017d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	e01b      	b.n	8001812 <__sflush_r+0xf2>
 80017da:	690f      	ldr	r7, [r1, #16]
 80017dc:	2f00      	cmp	r7, #0
 80017de:	d0f6      	beq.n	80017ce <__sflush_r+0xae>
 80017e0:	0793      	lsls	r3, r2, #30
 80017e2:	680e      	ldr	r6, [r1, #0]
 80017e4:	bf08      	it	eq
 80017e6:	694b      	ldreq	r3, [r1, #20]
 80017e8:	600f      	str	r7, [r1, #0]
 80017ea:	bf18      	it	ne
 80017ec:	2300      	movne	r3, #0
 80017ee:	eba6 0807 	sub.w	r8, r6, r7
 80017f2:	608b      	str	r3, [r1, #8]
 80017f4:	f1b8 0f00 	cmp.w	r8, #0
 80017f8:	dde9      	ble.n	80017ce <__sflush_r+0xae>
 80017fa:	6a21      	ldr	r1, [r4, #32]
 80017fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80017fe:	4643      	mov	r3, r8
 8001800:	463a      	mov	r2, r7
 8001802:	4628      	mov	r0, r5
 8001804:	47b0      	blx	r6
 8001806:	2800      	cmp	r0, #0
 8001808:	dc08      	bgt.n	800181c <__sflush_r+0xfc>
 800180a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800180e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001812:	81a3      	strh	r3, [r4, #12]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800181c:	4407      	add	r7, r0
 800181e:	eba8 0800 	sub.w	r8, r8, r0
 8001822:	e7e7      	b.n	80017f4 <__sflush_r+0xd4>
 8001824:	dfbffffe 	.word	0xdfbffffe

08001828 <_fflush_r>:
 8001828:	b538      	push	{r3, r4, r5, lr}
 800182a:	690b      	ldr	r3, [r1, #16]
 800182c:	4605      	mov	r5, r0
 800182e:	460c      	mov	r4, r1
 8001830:	b913      	cbnz	r3, 8001838 <_fflush_r+0x10>
 8001832:	2500      	movs	r5, #0
 8001834:	4628      	mov	r0, r5
 8001836:	bd38      	pop	{r3, r4, r5, pc}
 8001838:	b118      	cbz	r0, 8001842 <_fflush_r+0x1a>
 800183a:	6a03      	ldr	r3, [r0, #32]
 800183c:	b90b      	cbnz	r3, 8001842 <_fflush_r+0x1a>
 800183e:	f7ff fced 	bl	800121c <__sinit>
 8001842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f3      	beq.n	8001832 <_fflush_r+0xa>
 800184a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800184c:	07d0      	lsls	r0, r2, #31
 800184e:	d404      	bmi.n	800185a <_fflush_r+0x32>
 8001850:	0599      	lsls	r1, r3, #22
 8001852:	d402      	bmi.n	800185a <_fflush_r+0x32>
 8001854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001856:	f7ff fe42 	bl	80014de <__retarget_lock_acquire_recursive>
 800185a:	4628      	mov	r0, r5
 800185c:	4621      	mov	r1, r4
 800185e:	f7ff ff5f 	bl	8001720 <__sflush_r>
 8001862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001864:	07da      	lsls	r2, r3, #31
 8001866:	4605      	mov	r5, r0
 8001868:	d4e4      	bmi.n	8001834 <_fflush_r+0xc>
 800186a:	89a3      	ldrh	r3, [r4, #12]
 800186c:	059b      	lsls	r3, r3, #22
 800186e:	d4e1      	bmi.n	8001834 <_fflush_r+0xc>
 8001870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001872:	f7ff fe35 	bl	80014e0 <__retarget_lock_release_recursive>
 8001876:	e7dd      	b.n	8001834 <_fflush_r+0xc>

08001878 <fiprintf>:
 8001878:	b40e      	push	{r1, r2, r3}
 800187a:	b503      	push	{r0, r1, lr}
 800187c:	4601      	mov	r1, r0
 800187e:	ab03      	add	r3, sp, #12
 8001880:	4805      	ldr	r0, [pc, #20]	@ (8001898 <fiprintf+0x20>)
 8001882:	f853 2b04 	ldr.w	r2, [r3], #4
 8001886:	6800      	ldr	r0, [r0, #0]
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	f000 f847 	bl	800191c <_vfiprintf_r>
 800188e:	b002      	add	sp, #8
 8001890:	f85d eb04 	ldr.w	lr, [sp], #4
 8001894:	b003      	add	sp, #12
 8001896:	4770      	bx	lr
 8001898:	2000013c 	.word	0x2000013c

0800189c <_sbrk_r>:
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	4d06      	ldr	r5, [pc, #24]	@ (80018b8 <_sbrk_r+0x1c>)
 80018a0:	2300      	movs	r3, #0
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	602b      	str	r3, [r5, #0]
 80018a8:	f7ff f96e 	bl	8000b88 <_sbrk>
 80018ac:	1c43      	adds	r3, r0, #1
 80018ae:	d102      	bne.n	80018b6 <_sbrk_r+0x1a>
 80018b0:	682b      	ldr	r3, [r5, #0]
 80018b2:	b103      	cbz	r3, 80018b6 <_sbrk_r+0x1a>
 80018b4:	6023      	str	r3, [r4, #0]
 80018b6:	bd38      	pop	{r3, r4, r5, pc}
 80018b8:	20000500 	.word	0x20000500

080018bc <abort>:
 80018bc:	b508      	push	{r3, lr}
 80018be:	2006      	movs	r0, #6
 80018c0:	f000 fb8e 	bl	8001fe0 <raise>
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff f8e7 	bl	8000a98 <_exit>

080018ca <__sfputc_r>:
 80018ca:	6893      	ldr	r3, [r2, #8]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	b410      	push	{r4}
 80018d2:	6093      	str	r3, [r2, #8]
 80018d4:	da08      	bge.n	80018e8 <__sfputc_r+0x1e>
 80018d6:	6994      	ldr	r4, [r2, #24]
 80018d8:	42a3      	cmp	r3, r4
 80018da:	db01      	blt.n	80018e0 <__sfputc_r+0x16>
 80018dc:	290a      	cmp	r1, #10
 80018de:	d103      	bne.n	80018e8 <__sfputc_r+0x1e>
 80018e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018e4:	f000 bac0 	b.w	8001e68 <__swbuf_r>
 80018e8:	6813      	ldr	r3, [r2, #0]
 80018ea:	1c58      	adds	r0, r3, #1
 80018ec:	6010      	str	r0, [r2, #0]
 80018ee:	7019      	strb	r1, [r3, #0]
 80018f0:	4608      	mov	r0, r1
 80018f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <__sfputs_r>:
 80018f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fa:	4606      	mov	r6, r0
 80018fc:	460f      	mov	r7, r1
 80018fe:	4614      	mov	r4, r2
 8001900:	18d5      	adds	r5, r2, r3
 8001902:	42ac      	cmp	r4, r5
 8001904:	d101      	bne.n	800190a <__sfputs_r+0x12>
 8001906:	2000      	movs	r0, #0
 8001908:	e007      	b.n	800191a <__sfputs_r+0x22>
 800190a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800190e:	463a      	mov	r2, r7
 8001910:	4630      	mov	r0, r6
 8001912:	f7ff ffda 	bl	80018ca <__sfputc_r>
 8001916:	1c43      	adds	r3, r0, #1
 8001918:	d1f3      	bne.n	8001902 <__sfputs_r+0xa>
 800191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800191c <_vfiprintf_r>:
 800191c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001920:	460d      	mov	r5, r1
 8001922:	b09d      	sub	sp, #116	@ 0x74
 8001924:	4614      	mov	r4, r2
 8001926:	4698      	mov	r8, r3
 8001928:	4606      	mov	r6, r0
 800192a:	b118      	cbz	r0, 8001934 <_vfiprintf_r+0x18>
 800192c:	6a03      	ldr	r3, [r0, #32]
 800192e:	b90b      	cbnz	r3, 8001934 <_vfiprintf_r+0x18>
 8001930:	f7ff fc74 	bl	800121c <__sinit>
 8001934:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001936:	07d9      	lsls	r1, r3, #31
 8001938:	d405      	bmi.n	8001946 <_vfiprintf_r+0x2a>
 800193a:	89ab      	ldrh	r3, [r5, #12]
 800193c:	059a      	lsls	r2, r3, #22
 800193e:	d402      	bmi.n	8001946 <_vfiprintf_r+0x2a>
 8001940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001942:	f7ff fdcc 	bl	80014de <__retarget_lock_acquire_recursive>
 8001946:	89ab      	ldrh	r3, [r5, #12]
 8001948:	071b      	lsls	r3, r3, #28
 800194a:	d501      	bpl.n	8001950 <_vfiprintf_r+0x34>
 800194c:	692b      	ldr	r3, [r5, #16]
 800194e:	b99b      	cbnz	r3, 8001978 <_vfiprintf_r+0x5c>
 8001950:	4629      	mov	r1, r5
 8001952:	4630      	mov	r0, r6
 8001954:	f000 fac6 	bl	8001ee4 <__swsetup_r>
 8001958:	b170      	cbz	r0, 8001978 <_vfiprintf_r+0x5c>
 800195a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800195c:	07dc      	lsls	r4, r3, #31
 800195e:	d504      	bpl.n	800196a <_vfiprintf_r+0x4e>
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	b01d      	add	sp, #116	@ 0x74
 8001966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800196a:	89ab      	ldrh	r3, [r5, #12]
 800196c:	0598      	lsls	r0, r3, #22
 800196e:	d4f7      	bmi.n	8001960 <_vfiprintf_r+0x44>
 8001970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001972:	f7ff fdb5 	bl	80014e0 <__retarget_lock_release_recursive>
 8001976:	e7f3      	b.n	8001960 <_vfiprintf_r+0x44>
 8001978:	2300      	movs	r3, #0
 800197a:	9309      	str	r3, [sp, #36]	@ 0x24
 800197c:	2320      	movs	r3, #32
 800197e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001982:	f8cd 800c 	str.w	r8, [sp, #12]
 8001986:	2330      	movs	r3, #48	@ 0x30
 8001988:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001b38 <_vfiprintf_r+0x21c>
 800198c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001990:	f04f 0901 	mov.w	r9, #1
 8001994:	4623      	mov	r3, r4
 8001996:	469a      	mov	sl, r3
 8001998:	f813 2b01 	ldrb.w	r2, [r3], #1
 800199c:	b10a      	cbz	r2, 80019a2 <_vfiprintf_r+0x86>
 800199e:	2a25      	cmp	r2, #37	@ 0x25
 80019a0:	d1f9      	bne.n	8001996 <_vfiprintf_r+0x7a>
 80019a2:	ebba 0b04 	subs.w	fp, sl, r4
 80019a6:	d00b      	beq.n	80019c0 <_vfiprintf_r+0xa4>
 80019a8:	465b      	mov	r3, fp
 80019aa:	4622      	mov	r2, r4
 80019ac:	4629      	mov	r1, r5
 80019ae:	4630      	mov	r0, r6
 80019b0:	f7ff ffa2 	bl	80018f8 <__sfputs_r>
 80019b4:	3001      	adds	r0, #1
 80019b6:	f000 80a7 	beq.w	8001b08 <_vfiprintf_r+0x1ec>
 80019ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80019bc:	445a      	add	r2, fp
 80019be:	9209      	str	r2, [sp, #36]	@ 0x24
 80019c0:	f89a 3000 	ldrb.w	r3, [sl]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 809f 	beq.w	8001b08 <_vfiprintf_r+0x1ec>
 80019ca:	2300      	movs	r3, #0
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019d4:	f10a 0a01 	add.w	sl, sl, #1
 80019d8:	9304      	str	r3, [sp, #16]
 80019da:	9307      	str	r3, [sp, #28]
 80019dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80019e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80019e2:	4654      	mov	r4, sl
 80019e4:	2205      	movs	r2, #5
 80019e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019ea:	4853      	ldr	r0, [pc, #332]	@ (8001b38 <_vfiprintf_r+0x21c>)
 80019ec:	f7fe fc10 	bl	8000210 <memchr>
 80019f0:	9a04      	ldr	r2, [sp, #16]
 80019f2:	b9d8      	cbnz	r0, 8001a2c <_vfiprintf_r+0x110>
 80019f4:	06d1      	lsls	r1, r2, #27
 80019f6:	bf44      	itt	mi
 80019f8:	2320      	movmi	r3, #32
 80019fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019fe:	0713      	lsls	r3, r2, #28
 8001a00:	bf44      	itt	mi
 8001a02:	232b      	movmi	r3, #43	@ 0x2b
 8001a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a08:	f89a 3000 	ldrb.w	r3, [sl]
 8001a0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a0e:	d015      	beq.n	8001a3c <_vfiprintf_r+0x120>
 8001a10:	9a07      	ldr	r2, [sp, #28]
 8001a12:	4654      	mov	r4, sl
 8001a14:	2000      	movs	r0, #0
 8001a16:	f04f 0c0a 	mov.w	ip, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a20:	3b30      	subs	r3, #48	@ 0x30
 8001a22:	2b09      	cmp	r3, #9
 8001a24:	d94b      	bls.n	8001abe <_vfiprintf_r+0x1a2>
 8001a26:	b1b0      	cbz	r0, 8001a56 <_vfiprintf_r+0x13a>
 8001a28:	9207      	str	r2, [sp, #28]
 8001a2a:	e014      	b.n	8001a56 <_vfiprintf_r+0x13a>
 8001a2c:	eba0 0308 	sub.w	r3, r0, r8
 8001a30:	fa09 f303 	lsl.w	r3, r9, r3
 8001a34:	4313      	orrs	r3, r2
 8001a36:	9304      	str	r3, [sp, #16]
 8001a38:	46a2      	mov	sl, r4
 8001a3a:	e7d2      	b.n	80019e2 <_vfiprintf_r+0xc6>
 8001a3c:	9b03      	ldr	r3, [sp, #12]
 8001a3e:	1d19      	adds	r1, r3, #4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	9103      	str	r1, [sp, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bfbb      	ittet	lt
 8001a48:	425b      	neglt	r3, r3
 8001a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8001a4e:	9307      	strge	r3, [sp, #28]
 8001a50:	9307      	strlt	r3, [sp, #28]
 8001a52:	bfb8      	it	lt
 8001a54:	9204      	strlt	r2, [sp, #16]
 8001a56:	7823      	ldrb	r3, [r4, #0]
 8001a58:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a5a:	d10a      	bne.n	8001a72 <_vfiprintf_r+0x156>
 8001a5c:	7863      	ldrb	r3, [r4, #1]
 8001a5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a60:	d132      	bne.n	8001ac8 <_vfiprintf_r+0x1ac>
 8001a62:	9b03      	ldr	r3, [sp, #12]
 8001a64:	1d1a      	adds	r2, r3, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	9203      	str	r2, [sp, #12]
 8001a6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a6e:	3402      	adds	r4, #2
 8001a70:	9305      	str	r3, [sp, #20]
 8001a72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b48 <_vfiprintf_r+0x22c>
 8001a76:	7821      	ldrb	r1, [r4, #0]
 8001a78:	2203      	movs	r2, #3
 8001a7a:	4650      	mov	r0, sl
 8001a7c:	f7fe fbc8 	bl	8000210 <memchr>
 8001a80:	b138      	cbz	r0, 8001a92 <_vfiprintf_r+0x176>
 8001a82:	9b04      	ldr	r3, [sp, #16]
 8001a84:	eba0 000a 	sub.w	r0, r0, sl
 8001a88:	2240      	movs	r2, #64	@ 0x40
 8001a8a:	4082      	lsls	r2, r0
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	3401      	adds	r4, #1
 8001a90:	9304      	str	r3, [sp, #16]
 8001a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a96:	4829      	ldr	r0, [pc, #164]	@ (8001b3c <_vfiprintf_r+0x220>)
 8001a98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a9c:	2206      	movs	r2, #6
 8001a9e:	f7fe fbb7 	bl	8000210 <memchr>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	d03f      	beq.n	8001b26 <_vfiprintf_r+0x20a>
 8001aa6:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <_vfiprintf_r+0x224>)
 8001aa8:	bb1b      	cbnz	r3, 8001af2 <_vfiprintf_r+0x1d6>
 8001aaa:	9b03      	ldr	r3, [sp, #12]
 8001aac:	3307      	adds	r3, #7
 8001aae:	f023 0307 	bic.w	r3, r3, #7
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	9303      	str	r3, [sp, #12]
 8001ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ab8:	443b      	add	r3, r7
 8001aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8001abc:	e76a      	b.n	8001994 <_vfiprintf_r+0x78>
 8001abe:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ac2:	460c      	mov	r4, r1
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	e7a8      	b.n	8001a1a <_vfiprintf_r+0xfe>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	3401      	adds	r4, #1
 8001acc:	9305      	str	r3, [sp, #20]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f04f 0c0a 	mov.w	ip, #10
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ada:	3a30      	subs	r2, #48	@ 0x30
 8001adc:	2a09      	cmp	r2, #9
 8001ade:	d903      	bls.n	8001ae8 <_vfiprintf_r+0x1cc>
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0c6      	beq.n	8001a72 <_vfiprintf_r+0x156>
 8001ae4:	9105      	str	r1, [sp, #20]
 8001ae6:	e7c4      	b.n	8001a72 <_vfiprintf_r+0x156>
 8001ae8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001aec:	4604      	mov	r4, r0
 8001aee:	2301      	movs	r3, #1
 8001af0:	e7f0      	b.n	8001ad4 <_vfiprintf_r+0x1b8>
 8001af2:	ab03      	add	r3, sp, #12
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	462a      	mov	r2, r5
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <_vfiprintf_r+0x228>)
 8001afa:	a904      	add	r1, sp, #16
 8001afc:	4630      	mov	r0, r6
 8001afe:	f3af 8000 	nop.w
 8001b02:	4607      	mov	r7, r0
 8001b04:	1c78      	adds	r0, r7, #1
 8001b06:	d1d6      	bne.n	8001ab6 <_vfiprintf_r+0x19a>
 8001b08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001b0a:	07d9      	lsls	r1, r3, #31
 8001b0c:	d405      	bmi.n	8001b1a <_vfiprintf_r+0x1fe>
 8001b0e:	89ab      	ldrh	r3, [r5, #12]
 8001b10:	059a      	lsls	r2, r3, #22
 8001b12:	d402      	bmi.n	8001b1a <_vfiprintf_r+0x1fe>
 8001b14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001b16:	f7ff fce3 	bl	80014e0 <__retarget_lock_release_recursive>
 8001b1a:	89ab      	ldrh	r3, [r5, #12]
 8001b1c:	065b      	lsls	r3, r3, #25
 8001b1e:	f53f af1f 	bmi.w	8001960 <_vfiprintf_r+0x44>
 8001b22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b24:	e71e      	b.n	8001964 <_vfiprintf_r+0x48>
 8001b26:	ab03      	add	r3, sp, #12
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	462a      	mov	r2, r5
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <_vfiprintf_r+0x228>)
 8001b2e:	a904      	add	r1, sp, #16
 8001b30:	4630      	mov	r0, r6
 8001b32:	f000 f879 	bl	8001c28 <_printf_i>
 8001b36:	e7e4      	b.n	8001b02 <_vfiprintf_r+0x1e6>
 8001b38:	080024b1 	.word	0x080024b1
 8001b3c:	080024bb 	.word	0x080024bb
 8001b40:	00000000 	.word	0x00000000
 8001b44:	080018f9 	.word	0x080018f9
 8001b48:	080024b7 	.word	0x080024b7

08001b4c <_printf_common>:
 8001b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b50:	4616      	mov	r6, r2
 8001b52:	4698      	mov	r8, r3
 8001b54:	688a      	ldr	r2, [r1, #8]
 8001b56:	690b      	ldr	r3, [r1, #16]
 8001b58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	bfb8      	it	lt
 8001b60:	4613      	movlt	r3, r2
 8001b62:	6033      	str	r3, [r6, #0]
 8001b64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b68:	4607      	mov	r7, r0
 8001b6a:	460c      	mov	r4, r1
 8001b6c:	b10a      	cbz	r2, 8001b72 <_printf_common+0x26>
 8001b6e:	3301      	adds	r3, #1
 8001b70:	6033      	str	r3, [r6, #0]
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	0699      	lsls	r1, r3, #26
 8001b76:	bf42      	ittt	mi
 8001b78:	6833      	ldrmi	r3, [r6, #0]
 8001b7a:	3302      	addmi	r3, #2
 8001b7c:	6033      	strmi	r3, [r6, #0]
 8001b7e:	6825      	ldr	r5, [r4, #0]
 8001b80:	f015 0506 	ands.w	r5, r5, #6
 8001b84:	d106      	bne.n	8001b94 <_printf_common+0x48>
 8001b86:	f104 0a19 	add.w	sl, r4, #25
 8001b8a:	68e3      	ldr	r3, [r4, #12]
 8001b8c:	6832      	ldr	r2, [r6, #0]
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	42ab      	cmp	r3, r5
 8001b92:	dc26      	bgt.n	8001be2 <_printf_common+0x96>
 8001b94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b98:	6822      	ldr	r2, [r4, #0]
 8001b9a:	3b00      	subs	r3, #0
 8001b9c:	bf18      	it	ne
 8001b9e:	2301      	movne	r3, #1
 8001ba0:	0692      	lsls	r2, r2, #26
 8001ba2:	d42b      	bmi.n	8001bfc <_printf_common+0xb0>
 8001ba4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001ba8:	4641      	mov	r1, r8
 8001baa:	4638      	mov	r0, r7
 8001bac:	47c8      	blx	r9
 8001bae:	3001      	adds	r0, #1
 8001bb0:	d01e      	beq.n	8001bf0 <_printf_common+0xa4>
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	6922      	ldr	r2, [r4, #16]
 8001bb6:	f003 0306 	and.w	r3, r3, #6
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf02      	ittt	eq
 8001bbe:	68e5      	ldreq	r5, [r4, #12]
 8001bc0:	6833      	ldreq	r3, [r6, #0]
 8001bc2:	1aed      	subeq	r5, r5, r3
 8001bc4:	68a3      	ldr	r3, [r4, #8]
 8001bc6:	bf0c      	ite	eq
 8001bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bcc:	2500      	movne	r5, #0
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	bfc4      	itt	gt
 8001bd2:	1a9b      	subgt	r3, r3, r2
 8001bd4:	18ed      	addgt	r5, r5, r3
 8001bd6:	2600      	movs	r6, #0
 8001bd8:	341a      	adds	r4, #26
 8001bda:	42b5      	cmp	r5, r6
 8001bdc:	d11a      	bne.n	8001c14 <_printf_common+0xc8>
 8001bde:	2000      	movs	r0, #0
 8001be0:	e008      	b.n	8001bf4 <_printf_common+0xa8>
 8001be2:	2301      	movs	r3, #1
 8001be4:	4652      	mov	r2, sl
 8001be6:	4641      	mov	r1, r8
 8001be8:	4638      	mov	r0, r7
 8001bea:	47c8      	blx	r9
 8001bec:	3001      	adds	r0, #1
 8001bee:	d103      	bne.n	8001bf8 <_printf_common+0xac>
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bf8:	3501      	adds	r5, #1
 8001bfa:	e7c6      	b.n	8001b8a <_printf_common+0x3e>
 8001bfc:	18e1      	adds	r1, r4, r3
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	2030      	movs	r0, #48	@ 0x30
 8001c02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c06:	4422      	add	r2, r4
 8001c08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c10:	3302      	adds	r3, #2
 8001c12:	e7c7      	b.n	8001ba4 <_printf_common+0x58>
 8001c14:	2301      	movs	r3, #1
 8001c16:	4622      	mov	r2, r4
 8001c18:	4641      	mov	r1, r8
 8001c1a:	4638      	mov	r0, r7
 8001c1c:	47c8      	blx	r9
 8001c1e:	3001      	adds	r0, #1
 8001c20:	d0e6      	beq.n	8001bf0 <_printf_common+0xa4>
 8001c22:	3601      	adds	r6, #1
 8001c24:	e7d9      	b.n	8001bda <_printf_common+0x8e>
	...

08001c28 <_printf_i>:
 8001c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c2c:	7e0f      	ldrb	r7, [r1, #24]
 8001c2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c30:	2f78      	cmp	r7, #120	@ 0x78
 8001c32:	4691      	mov	r9, r2
 8001c34:	4680      	mov	r8, r0
 8001c36:	460c      	mov	r4, r1
 8001c38:	469a      	mov	sl, r3
 8001c3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c3e:	d807      	bhi.n	8001c50 <_printf_i+0x28>
 8001c40:	2f62      	cmp	r7, #98	@ 0x62
 8001c42:	d80a      	bhi.n	8001c5a <_printf_i+0x32>
 8001c44:	2f00      	cmp	r7, #0
 8001c46:	f000 80d2 	beq.w	8001dee <_printf_i+0x1c6>
 8001c4a:	2f58      	cmp	r7, #88	@ 0x58
 8001c4c:	f000 80b9 	beq.w	8001dc2 <_printf_i+0x19a>
 8001c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c58:	e03a      	b.n	8001cd0 <_printf_i+0xa8>
 8001c5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c5e:	2b15      	cmp	r3, #21
 8001c60:	d8f6      	bhi.n	8001c50 <_printf_i+0x28>
 8001c62:	a101      	add	r1, pc, #4	@ (adr r1, 8001c68 <_printf_i+0x40>)
 8001c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c68:	08001cc1 	.word	0x08001cc1
 8001c6c:	08001cd5 	.word	0x08001cd5
 8001c70:	08001c51 	.word	0x08001c51
 8001c74:	08001c51 	.word	0x08001c51
 8001c78:	08001c51 	.word	0x08001c51
 8001c7c:	08001c51 	.word	0x08001c51
 8001c80:	08001cd5 	.word	0x08001cd5
 8001c84:	08001c51 	.word	0x08001c51
 8001c88:	08001c51 	.word	0x08001c51
 8001c8c:	08001c51 	.word	0x08001c51
 8001c90:	08001c51 	.word	0x08001c51
 8001c94:	08001dd5 	.word	0x08001dd5
 8001c98:	08001cff 	.word	0x08001cff
 8001c9c:	08001d8f 	.word	0x08001d8f
 8001ca0:	08001c51 	.word	0x08001c51
 8001ca4:	08001c51 	.word	0x08001c51
 8001ca8:	08001df7 	.word	0x08001df7
 8001cac:	08001c51 	.word	0x08001c51
 8001cb0:	08001cff 	.word	0x08001cff
 8001cb4:	08001c51 	.word	0x08001c51
 8001cb8:	08001c51 	.word	0x08001c51
 8001cbc:	08001d97 	.word	0x08001d97
 8001cc0:	6833      	ldr	r3, [r6, #0]
 8001cc2:	1d1a      	adds	r2, r3, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6032      	str	r2, [r6, #0]
 8001cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ccc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e09d      	b.n	8001e10 <_printf_i+0x1e8>
 8001cd4:	6833      	ldr	r3, [r6, #0]
 8001cd6:	6820      	ldr	r0, [r4, #0]
 8001cd8:	1d19      	adds	r1, r3, #4
 8001cda:	6031      	str	r1, [r6, #0]
 8001cdc:	0606      	lsls	r6, r0, #24
 8001cde:	d501      	bpl.n	8001ce4 <_printf_i+0xbc>
 8001ce0:	681d      	ldr	r5, [r3, #0]
 8001ce2:	e003      	b.n	8001cec <_printf_i+0xc4>
 8001ce4:	0645      	lsls	r5, r0, #25
 8001ce6:	d5fb      	bpl.n	8001ce0 <_printf_i+0xb8>
 8001ce8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cec:	2d00      	cmp	r5, #0
 8001cee:	da03      	bge.n	8001cf8 <_printf_i+0xd0>
 8001cf0:	232d      	movs	r3, #45	@ 0x2d
 8001cf2:	426d      	negs	r5, r5
 8001cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cf8:	4859      	ldr	r0, [pc, #356]	@ (8001e60 <_printf_i+0x238>)
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	e011      	b.n	8001d22 <_printf_i+0xfa>
 8001cfe:	6821      	ldr	r1, [r4, #0]
 8001d00:	6833      	ldr	r3, [r6, #0]
 8001d02:	0608      	lsls	r0, r1, #24
 8001d04:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d08:	d402      	bmi.n	8001d10 <_printf_i+0xe8>
 8001d0a:	0649      	lsls	r1, r1, #25
 8001d0c:	bf48      	it	mi
 8001d0e:	b2ad      	uxthmi	r5, r5
 8001d10:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d12:	4853      	ldr	r0, [pc, #332]	@ (8001e60 <_printf_i+0x238>)
 8001d14:	6033      	str	r3, [r6, #0]
 8001d16:	bf14      	ite	ne
 8001d18:	230a      	movne	r3, #10
 8001d1a:	2308      	moveq	r3, #8
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d22:	6866      	ldr	r6, [r4, #4]
 8001d24:	60a6      	str	r6, [r4, #8]
 8001d26:	2e00      	cmp	r6, #0
 8001d28:	bfa2      	ittt	ge
 8001d2a:	6821      	ldrge	r1, [r4, #0]
 8001d2c:	f021 0104 	bicge.w	r1, r1, #4
 8001d30:	6021      	strge	r1, [r4, #0]
 8001d32:	b90d      	cbnz	r5, 8001d38 <_printf_i+0x110>
 8001d34:	2e00      	cmp	r6, #0
 8001d36:	d04b      	beq.n	8001dd0 <_printf_i+0x1a8>
 8001d38:	4616      	mov	r6, r2
 8001d3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d3e:	fb03 5711 	mls	r7, r3, r1, r5
 8001d42:	5dc7      	ldrb	r7, [r0, r7]
 8001d44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d48:	462f      	mov	r7, r5
 8001d4a:	42bb      	cmp	r3, r7
 8001d4c:	460d      	mov	r5, r1
 8001d4e:	d9f4      	bls.n	8001d3a <_printf_i+0x112>
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d10b      	bne.n	8001d6c <_printf_i+0x144>
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	07df      	lsls	r7, r3, #31
 8001d58:	d508      	bpl.n	8001d6c <_printf_i+0x144>
 8001d5a:	6923      	ldr	r3, [r4, #16]
 8001d5c:	6861      	ldr	r1, [r4, #4]
 8001d5e:	4299      	cmp	r1, r3
 8001d60:	bfde      	ittt	le
 8001d62:	2330      	movle	r3, #48	@ 0x30
 8001d64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d6c:	1b92      	subs	r2, r2, r6
 8001d6e:	6122      	str	r2, [r4, #16]
 8001d70:	f8cd a000 	str.w	sl, [sp]
 8001d74:	464b      	mov	r3, r9
 8001d76:	aa03      	add	r2, sp, #12
 8001d78:	4621      	mov	r1, r4
 8001d7a:	4640      	mov	r0, r8
 8001d7c:	f7ff fee6 	bl	8001b4c <_printf_common>
 8001d80:	3001      	adds	r0, #1
 8001d82:	d14a      	bne.n	8001e1a <_printf_i+0x1f2>
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	b004      	add	sp, #16
 8001d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	f043 0320 	orr.w	r3, r3, #32
 8001d94:	6023      	str	r3, [r4, #0]
 8001d96:	4833      	ldr	r0, [pc, #204]	@ (8001e64 <_printf_i+0x23c>)
 8001d98:	2778      	movs	r7, #120	@ 0x78
 8001d9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	6831      	ldr	r1, [r6, #0]
 8001da2:	061f      	lsls	r7, r3, #24
 8001da4:	f851 5b04 	ldr.w	r5, [r1], #4
 8001da8:	d402      	bmi.n	8001db0 <_printf_i+0x188>
 8001daa:	065f      	lsls	r7, r3, #25
 8001dac:	bf48      	it	mi
 8001dae:	b2ad      	uxthmi	r5, r5
 8001db0:	6031      	str	r1, [r6, #0]
 8001db2:	07d9      	lsls	r1, r3, #31
 8001db4:	bf44      	itt	mi
 8001db6:	f043 0320 	orrmi.w	r3, r3, #32
 8001dba:	6023      	strmi	r3, [r4, #0]
 8001dbc:	b11d      	cbz	r5, 8001dc6 <_printf_i+0x19e>
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	e7ac      	b.n	8001d1c <_printf_i+0xf4>
 8001dc2:	4827      	ldr	r0, [pc, #156]	@ (8001e60 <_printf_i+0x238>)
 8001dc4:	e7e9      	b.n	8001d9a <_printf_i+0x172>
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	f023 0320 	bic.w	r3, r3, #32
 8001dcc:	6023      	str	r3, [r4, #0]
 8001dce:	e7f6      	b.n	8001dbe <_printf_i+0x196>
 8001dd0:	4616      	mov	r6, r2
 8001dd2:	e7bd      	b.n	8001d50 <_printf_i+0x128>
 8001dd4:	6833      	ldr	r3, [r6, #0]
 8001dd6:	6825      	ldr	r5, [r4, #0]
 8001dd8:	6961      	ldr	r1, [r4, #20]
 8001dda:	1d18      	adds	r0, r3, #4
 8001ddc:	6030      	str	r0, [r6, #0]
 8001dde:	062e      	lsls	r6, r5, #24
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	d501      	bpl.n	8001de8 <_printf_i+0x1c0>
 8001de4:	6019      	str	r1, [r3, #0]
 8001de6:	e002      	b.n	8001dee <_printf_i+0x1c6>
 8001de8:	0668      	lsls	r0, r5, #25
 8001dea:	d5fb      	bpl.n	8001de4 <_printf_i+0x1bc>
 8001dec:	8019      	strh	r1, [r3, #0]
 8001dee:	2300      	movs	r3, #0
 8001df0:	6123      	str	r3, [r4, #16]
 8001df2:	4616      	mov	r6, r2
 8001df4:	e7bc      	b.n	8001d70 <_printf_i+0x148>
 8001df6:	6833      	ldr	r3, [r6, #0]
 8001df8:	1d1a      	adds	r2, r3, #4
 8001dfa:	6032      	str	r2, [r6, #0]
 8001dfc:	681e      	ldr	r6, [r3, #0]
 8001dfe:	6862      	ldr	r2, [r4, #4]
 8001e00:	2100      	movs	r1, #0
 8001e02:	4630      	mov	r0, r6
 8001e04:	f7fe fa04 	bl	8000210 <memchr>
 8001e08:	b108      	cbz	r0, 8001e0e <_printf_i+0x1e6>
 8001e0a:	1b80      	subs	r0, r0, r6
 8001e0c:	6060      	str	r0, [r4, #4]
 8001e0e:	6863      	ldr	r3, [r4, #4]
 8001e10:	6123      	str	r3, [r4, #16]
 8001e12:	2300      	movs	r3, #0
 8001e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e18:	e7aa      	b.n	8001d70 <_printf_i+0x148>
 8001e1a:	6923      	ldr	r3, [r4, #16]
 8001e1c:	4632      	mov	r2, r6
 8001e1e:	4649      	mov	r1, r9
 8001e20:	4640      	mov	r0, r8
 8001e22:	47d0      	blx	sl
 8001e24:	3001      	adds	r0, #1
 8001e26:	d0ad      	beq.n	8001d84 <_printf_i+0x15c>
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	079b      	lsls	r3, r3, #30
 8001e2c:	d413      	bmi.n	8001e56 <_printf_i+0x22e>
 8001e2e:	68e0      	ldr	r0, [r4, #12]
 8001e30:	9b03      	ldr	r3, [sp, #12]
 8001e32:	4298      	cmp	r0, r3
 8001e34:	bfb8      	it	lt
 8001e36:	4618      	movlt	r0, r3
 8001e38:	e7a6      	b.n	8001d88 <_printf_i+0x160>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	4632      	mov	r2, r6
 8001e3e:	4649      	mov	r1, r9
 8001e40:	4640      	mov	r0, r8
 8001e42:	47d0      	blx	sl
 8001e44:	3001      	adds	r0, #1
 8001e46:	d09d      	beq.n	8001d84 <_printf_i+0x15c>
 8001e48:	3501      	adds	r5, #1
 8001e4a:	68e3      	ldr	r3, [r4, #12]
 8001e4c:	9903      	ldr	r1, [sp, #12]
 8001e4e:	1a5b      	subs	r3, r3, r1
 8001e50:	42ab      	cmp	r3, r5
 8001e52:	dcf2      	bgt.n	8001e3a <_printf_i+0x212>
 8001e54:	e7eb      	b.n	8001e2e <_printf_i+0x206>
 8001e56:	2500      	movs	r5, #0
 8001e58:	f104 0619 	add.w	r6, r4, #25
 8001e5c:	e7f5      	b.n	8001e4a <_printf_i+0x222>
 8001e5e:	bf00      	nop
 8001e60:	080024c2 	.word	0x080024c2
 8001e64:	080024d3 	.word	0x080024d3

08001e68 <__swbuf_r>:
 8001e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6a:	460e      	mov	r6, r1
 8001e6c:	4614      	mov	r4, r2
 8001e6e:	4605      	mov	r5, r0
 8001e70:	b118      	cbz	r0, 8001e7a <__swbuf_r+0x12>
 8001e72:	6a03      	ldr	r3, [r0, #32]
 8001e74:	b90b      	cbnz	r3, 8001e7a <__swbuf_r+0x12>
 8001e76:	f7ff f9d1 	bl	800121c <__sinit>
 8001e7a:	69a3      	ldr	r3, [r4, #24]
 8001e7c:	60a3      	str	r3, [r4, #8]
 8001e7e:	89a3      	ldrh	r3, [r4, #12]
 8001e80:	071a      	lsls	r2, r3, #28
 8001e82:	d501      	bpl.n	8001e88 <__swbuf_r+0x20>
 8001e84:	6923      	ldr	r3, [r4, #16]
 8001e86:	b943      	cbnz	r3, 8001e9a <__swbuf_r+0x32>
 8001e88:	4621      	mov	r1, r4
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f000 f82a 	bl	8001ee4 <__swsetup_r>
 8001e90:	b118      	cbz	r0, 8001e9a <__swbuf_r+0x32>
 8001e92:	f04f 37ff 	mov.w	r7, #4294967295
 8001e96:	4638      	mov	r0, r7
 8001e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	6922      	ldr	r2, [r4, #16]
 8001e9e:	1a98      	subs	r0, r3, r2
 8001ea0:	6963      	ldr	r3, [r4, #20]
 8001ea2:	b2f6      	uxtb	r6, r6
 8001ea4:	4283      	cmp	r3, r0
 8001ea6:	4637      	mov	r7, r6
 8001ea8:	dc05      	bgt.n	8001eb6 <__swbuf_r+0x4e>
 8001eaa:	4621      	mov	r1, r4
 8001eac:	4628      	mov	r0, r5
 8001eae:	f7ff fcbb 	bl	8001828 <_fflush_r>
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	d1ed      	bne.n	8001e92 <__swbuf_r+0x2a>
 8001eb6:	68a3      	ldr	r3, [r4, #8]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	60a3      	str	r3, [r4, #8]
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	6022      	str	r2, [r4, #0]
 8001ec2:	701e      	strb	r6, [r3, #0]
 8001ec4:	6962      	ldr	r2, [r4, #20]
 8001ec6:	1c43      	adds	r3, r0, #1
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d004      	beq.n	8001ed6 <__swbuf_r+0x6e>
 8001ecc:	89a3      	ldrh	r3, [r4, #12]
 8001ece:	07db      	lsls	r3, r3, #31
 8001ed0:	d5e1      	bpl.n	8001e96 <__swbuf_r+0x2e>
 8001ed2:	2e0a      	cmp	r6, #10
 8001ed4:	d1df      	bne.n	8001e96 <__swbuf_r+0x2e>
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f7ff fca5 	bl	8001828 <_fflush_r>
 8001ede:	2800      	cmp	r0, #0
 8001ee0:	d0d9      	beq.n	8001e96 <__swbuf_r+0x2e>
 8001ee2:	e7d6      	b.n	8001e92 <__swbuf_r+0x2a>

08001ee4 <__swsetup_r>:
 8001ee4:	b538      	push	{r3, r4, r5, lr}
 8001ee6:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <__swsetup_r+0xa8>)
 8001ee8:	4605      	mov	r5, r0
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	460c      	mov	r4, r1
 8001eee:	b118      	cbz	r0, 8001ef8 <__swsetup_r+0x14>
 8001ef0:	6a03      	ldr	r3, [r0, #32]
 8001ef2:	b90b      	cbnz	r3, 8001ef8 <__swsetup_r+0x14>
 8001ef4:	f7ff f992 	bl	800121c <__sinit>
 8001ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001efc:	0719      	lsls	r1, r3, #28
 8001efe:	d422      	bmi.n	8001f46 <__swsetup_r+0x62>
 8001f00:	06da      	lsls	r2, r3, #27
 8001f02:	d407      	bmi.n	8001f14 <__swsetup_r+0x30>
 8001f04:	2209      	movs	r2, #9
 8001f06:	602a      	str	r2, [r5, #0]
 8001f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f0c:	81a3      	strh	r3, [r4, #12]
 8001f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f12:	e033      	b.n	8001f7c <__swsetup_r+0x98>
 8001f14:	0758      	lsls	r0, r3, #29
 8001f16:	d512      	bpl.n	8001f3e <__swsetup_r+0x5a>
 8001f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001f1a:	b141      	cbz	r1, 8001f2e <__swsetup_r+0x4a>
 8001f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001f20:	4299      	cmp	r1, r3
 8001f22:	d002      	beq.n	8001f2a <__swsetup_r+0x46>
 8001f24:	4628      	mov	r0, r5
 8001f26:	f7ff fafb 	bl	8001520 <_free_r>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f2e:	89a3      	ldrh	r3, [r4, #12]
 8001f30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001f34:	81a3      	strh	r3, [r4, #12]
 8001f36:	2300      	movs	r3, #0
 8001f38:	6063      	str	r3, [r4, #4]
 8001f3a:	6923      	ldr	r3, [r4, #16]
 8001f3c:	6023      	str	r3, [r4, #0]
 8001f3e:	89a3      	ldrh	r3, [r4, #12]
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	81a3      	strh	r3, [r4, #12]
 8001f46:	6923      	ldr	r3, [r4, #16]
 8001f48:	b94b      	cbnz	r3, 8001f5e <__swsetup_r+0x7a>
 8001f4a:	89a3      	ldrh	r3, [r4, #12]
 8001f4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f54:	d003      	beq.n	8001f5e <__swsetup_r+0x7a>
 8001f56:	4621      	mov	r1, r4
 8001f58:	4628      	mov	r0, r5
 8001f5a:	f000 f883 	bl	8002064 <__smakebuf_r>
 8001f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f62:	f013 0201 	ands.w	r2, r3, #1
 8001f66:	d00a      	beq.n	8001f7e <__swsetup_r+0x9a>
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60a2      	str	r2, [r4, #8]
 8001f6c:	6962      	ldr	r2, [r4, #20]
 8001f6e:	4252      	negs	r2, r2
 8001f70:	61a2      	str	r2, [r4, #24]
 8001f72:	6922      	ldr	r2, [r4, #16]
 8001f74:	b942      	cbnz	r2, 8001f88 <__swsetup_r+0xa4>
 8001f76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001f7a:	d1c5      	bne.n	8001f08 <__swsetup_r+0x24>
 8001f7c:	bd38      	pop	{r3, r4, r5, pc}
 8001f7e:	0799      	lsls	r1, r3, #30
 8001f80:	bf58      	it	pl
 8001f82:	6962      	ldrpl	r2, [r4, #20]
 8001f84:	60a2      	str	r2, [r4, #8]
 8001f86:	e7f4      	b.n	8001f72 <__swsetup_r+0x8e>
 8001f88:	2000      	movs	r0, #0
 8001f8a:	e7f7      	b.n	8001f7c <__swsetup_r+0x98>
 8001f8c:	2000013c 	.word	0x2000013c

08001f90 <_raise_r>:
 8001f90:	291f      	cmp	r1, #31
 8001f92:	b538      	push	{r3, r4, r5, lr}
 8001f94:	4605      	mov	r5, r0
 8001f96:	460c      	mov	r4, r1
 8001f98:	d904      	bls.n	8001fa4 <_raise_r+0x14>
 8001f9a:	2316      	movs	r3, #22
 8001f9c:	6003      	str	r3, [r0, #0]
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
 8001fa4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001fa6:	b112      	cbz	r2, 8001fae <_raise_r+0x1e>
 8001fa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001fac:	b94b      	cbnz	r3, 8001fc2 <_raise_r+0x32>
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f000 f830 	bl	8002014 <_getpid_r>
 8001fb4:	4622      	mov	r2, r4
 8001fb6:	4601      	mov	r1, r0
 8001fb8:	4628      	mov	r0, r5
 8001fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fbe:	f000 b817 	b.w	8001ff0 <_kill_r>
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d00a      	beq.n	8001fdc <_raise_r+0x4c>
 8001fc6:	1c59      	adds	r1, r3, #1
 8001fc8:	d103      	bne.n	8001fd2 <_raise_r+0x42>
 8001fca:	2316      	movs	r3, #22
 8001fcc:	6003      	str	r3, [r0, #0]
 8001fce:	2001      	movs	r0, #1
 8001fd0:	e7e7      	b.n	8001fa2 <_raise_r+0x12>
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001fd8:	4620      	mov	r0, r4
 8001fda:	4798      	blx	r3
 8001fdc:	2000      	movs	r0, #0
 8001fde:	e7e0      	b.n	8001fa2 <_raise_r+0x12>

08001fe0 <raise>:
 8001fe0:	4b02      	ldr	r3, [pc, #8]	@ (8001fec <raise+0xc>)
 8001fe2:	4601      	mov	r1, r0
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	f7ff bfd3 	b.w	8001f90 <_raise_r>
 8001fea:	bf00      	nop
 8001fec:	2000013c 	.word	0x2000013c

08001ff0 <_kill_r>:
 8001ff0:	b538      	push	{r3, r4, r5, lr}
 8001ff2:	4d07      	ldr	r5, [pc, #28]	@ (8002010 <_kill_r+0x20>)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	4604      	mov	r4, r0
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	602b      	str	r3, [r5, #0]
 8001ffe:	f7fe fd3b 	bl	8000a78 <_kill>
 8002002:	1c43      	adds	r3, r0, #1
 8002004:	d102      	bne.n	800200c <_kill_r+0x1c>
 8002006:	682b      	ldr	r3, [r5, #0]
 8002008:	b103      	cbz	r3, 800200c <_kill_r+0x1c>
 800200a:	6023      	str	r3, [r4, #0]
 800200c:	bd38      	pop	{r3, r4, r5, pc}
 800200e:	bf00      	nop
 8002010:	20000500 	.word	0x20000500

08002014 <_getpid_r>:
 8002014:	f7fe bd28 	b.w	8000a68 <_getpid>

08002018 <__swhatbuf_r>:
 8002018:	b570      	push	{r4, r5, r6, lr}
 800201a:	460c      	mov	r4, r1
 800201c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002020:	2900      	cmp	r1, #0
 8002022:	b096      	sub	sp, #88	@ 0x58
 8002024:	4615      	mov	r5, r2
 8002026:	461e      	mov	r6, r3
 8002028:	da0d      	bge.n	8002046 <__swhatbuf_r+0x2e>
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002030:	f04f 0100 	mov.w	r1, #0
 8002034:	bf14      	ite	ne
 8002036:	2340      	movne	r3, #64	@ 0x40
 8002038:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800203c:	2000      	movs	r0, #0
 800203e:	6031      	str	r1, [r6, #0]
 8002040:	602b      	str	r3, [r5, #0]
 8002042:	b016      	add	sp, #88	@ 0x58
 8002044:	bd70      	pop	{r4, r5, r6, pc}
 8002046:	466a      	mov	r2, sp
 8002048:	f000 f848 	bl	80020dc <_fstat_r>
 800204c:	2800      	cmp	r0, #0
 800204e:	dbec      	blt.n	800202a <__swhatbuf_r+0x12>
 8002050:	9901      	ldr	r1, [sp, #4]
 8002052:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002056:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800205a:	4259      	negs	r1, r3
 800205c:	4159      	adcs	r1, r3
 800205e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002062:	e7eb      	b.n	800203c <__swhatbuf_r+0x24>

08002064 <__smakebuf_r>:
 8002064:	898b      	ldrh	r3, [r1, #12]
 8002066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002068:	079d      	lsls	r5, r3, #30
 800206a:	4606      	mov	r6, r0
 800206c:	460c      	mov	r4, r1
 800206e:	d507      	bpl.n	8002080 <__smakebuf_r+0x1c>
 8002070:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002074:	6023      	str	r3, [r4, #0]
 8002076:	6123      	str	r3, [r4, #16]
 8002078:	2301      	movs	r3, #1
 800207a:	6163      	str	r3, [r4, #20]
 800207c:	b003      	add	sp, #12
 800207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002080:	ab01      	add	r3, sp, #4
 8002082:	466a      	mov	r2, sp
 8002084:	f7ff ffc8 	bl	8002018 <__swhatbuf_r>
 8002088:	9f00      	ldr	r7, [sp, #0]
 800208a:	4605      	mov	r5, r0
 800208c:	4639      	mov	r1, r7
 800208e:	4630      	mov	r0, r6
 8002090:	f7ff faba 	bl	8001608 <_malloc_r>
 8002094:	b948      	cbnz	r0, 80020aa <__smakebuf_r+0x46>
 8002096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800209a:	059a      	lsls	r2, r3, #22
 800209c:	d4ee      	bmi.n	800207c <__smakebuf_r+0x18>
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	81a3      	strh	r3, [r4, #12]
 80020a8:	e7e2      	b.n	8002070 <__smakebuf_r+0xc>
 80020aa:	89a3      	ldrh	r3, [r4, #12]
 80020ac:	6020      	str	r0, [r4, #0]
 80020ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b2:	81a3      	strh	r3, [r4, #12]
 80020b4:	9b01      	ldr	r3, [sp, #4]
 80020b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80020ba:	b15b      	cbz	r3, 80020d4 <__smakebuf_r+0x70>
 80020bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020c0:	4630      	mov	r0, r6
 80020c2:	f000 f81d 	bl	8002100 <_isatty_r>
 80020c6:	b128      	cbz	r0, 80020d4 <__smakebuf_r+0x70>
 80020c8:	89a3      	ldrh	r3, [r4, #12]
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	81a3      	strh	r3, [r4, #12]
 80020d4:	89a3      	ldrh	r3, [r4, #12]
 80020d6:	431d      	orrs	r5, r3
 80020d8:	81a5      	strh	r5, [r4, #12]
 80020da:	e7cf      	b.n	800207c <__smakebuf_r+0x18>

080020dc <_fstat_r>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	4d07      	ldr	r5, [pc, #28]	@ (80020fc <_fstat_r+0x20>)
 80020e0:	2300      	movs	r3, #0
 80020e2:	4604      	mov	r4, r0
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	602b      	str	r3, [r5, #0]
 80020ea:	f7fe fd25 	bl	8000b38 <_fstat>
 80020ee:	1c43      	adds	r3, r0, #1
 80020f0:	d102      	bne.n	80020f8 <_fstat_r+0x1c>
 80020f2:	682b      	ldr	r3, [r5, #0]
 80020f4:	b103      	cbz	r3, 80020f8 <_fstat_r+0x1c>
 80020f6:	6023      	str	r3, [r4, #0]
 80020f8:	bd38      	pop	{r3, r4, r5, pc}
 80020fa:	bf00      	nop
 80020fc:	20000500 	.word	0x20000500

08002100 <_isatty_r>:
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	4d06      	ldr	r5, [pc, #24]	@ (800211c <_isatty_r+0x1c>)
 8002104:	2300      	movs	r3, #0
 8002106:	4604      	mov	r4, r0
 8002108:	4608      	mov	r0, r1
 800210a:	602b      	str	r3, [r5, #0]
 800210c:	f7fe fd24 	bl	8000b58 <_isatty>
 8002110:	1c43      	adds	r3, r0, #1
 8002112:	d102      	bne.n	800211a <_isatty_r+0x1a>
 8002114:	682b      	ldr	r3, [r5, #0]
 8002116:	b103      	cbz	r3, 800211a <_isatty_r+0x1a>
 8002118:	6023      	str	r3, [r4, #0]
 800211a:	bd38      	pop	{r3, r4, r5, pc}
 800211c:	20000500 	.word	0x20000500

08002120 <_init>:
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	bf00      	nop
 8002124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002126:	bc08      	pop	{r3}
 8002128:	469e      	mov	lr, r3
 800212a:	4770      	bx	lr

0800212c <_fini>:
 800212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212e:	bf00      	nop
 8002130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002132:	bc08      	pop	{r3}
 8002134:	469e      	mov	lr, r3
 8002136:	4770      	bx	lr
