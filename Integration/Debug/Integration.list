
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08001d58  08001d58  00002d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002004  08002004  0000418c  2**0
                  CONTENTS
  4 .ARM          00000008  08002004  08002004  00003004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800200c  0800200c  0000418c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800200c  0800200c  0000300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002010  08002010  00003010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08002014  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000418c  2**0
                  CONTENTS
 10 .bss          00000374  2000018c  2000018c  0000418c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000500  20000500  0000418c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002606  00000000  00000000  000041bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000abf  00000000  00000000  000067c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00007288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000148  00000000  00000000  00007468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016cac  00000000  00000000  000075b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002722  00000000  00000000  0001e25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000784c9  00000000  00000000  0002097e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00098e47  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001044  00000000  00000000  00098e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00099ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000018c 	.word	0x2000018c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001d40 	.word	0x08001d40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000190 	.word	0x20000190
 80001dc:	08001d40 	.word	0x08001d40

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	@ (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	6039      	str	r1, [r7, #0]
 80002f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	db0a      	blt.n	8000316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	b2da      	uxtb	r2, r3
 8000304:	490c      	ldr	r1, [pc, #48]	@ (8000338 <__NVIC_SetPriority+0x4c>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000314:	e00a      	b.n	800032c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4908      	ldr	r1, [pc, #32]	@ (800033c <__NVIC_SetPriority+0x50>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	3b04      	subs	r3, #4
 8000324:	0112      	lsls	r2, r2, #4
 8000326:	b2d2      	uxtb	r2, r2
 8000328:	440b      	add	r3, r1
 800032a:	761a      	strb	r2, [r3, #24]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000e100 	.word	0xe000e100
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <EXTI0_IRQHandler>:
void (*on_button_press)() = 0x00;

static uint8_t led_state = 0x00;

void EXTI0_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	// run the button press handler (make sure it is not null first !)
	if (on_button_press != 0x00) {
 8000344:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <EXTI0_IRQHandler+0x24>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <EXTI0_IRQHandler+0x12>
		on_button_press();
 800034c:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <EXTI0_IRQHandler+0x24>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4798      	blx	r3
	}

	// reset the interrupt (so it doesn't keep firing until the next trigger)
	EXTI->PR |= EXTI_PR_PR0;
 8000352:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <EXTI0_IRQHandler+0x28>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a04      	ldr	r2, [pc, #16]	@ (8000368 <EXTI0_IRQHandler+0x28>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6153      	str	r3, [r2, #20]
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200001a8 	.word	0x200001a8
 8000368:	40010400 	.word	0x40010400

0800036c <enable_clocks>:



// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000370:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <enable_clocks+0x1c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <enable_clocks+0x1c>)
 8000376:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 800037a:	6153      	str	r3, [r2, #20]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000

0800038c <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000392:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <initialise_board+0x20>)
 8000394:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f245 5255 	movw	r2, #21845	@ 0x5555
 800039c:	801a      	strh	r2, [r3, #0]
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	48001002 	.word	0x48001002

080003b0 <enable_interrupt>:


void enable_interrupt() {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b4:	b672      	cpsid	i
}
 80003b6:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable the system configuration controller (SYSCFG in RCC)
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <enable_interrupt+0x48>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a0e      	ldr	r2, [pc, #56]	@ (80003f8 <enable_interrupt+0x48>)
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6193      	str	r3, [r2, #24]

	// External Interrupts details on large manual page 294)
	// PA0 is on interrupt EXTI0 large manual - page 250
	// EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	@ (80003fc <enable_interrupt+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <enable_interrupt+0x50>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000400 <enable_interrupt+0x50>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 80003d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <enable_interrupt+0x50>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a09      	ldr	r2, [pc, #36]	@ (8000400 <enable_interrupt+0x50>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
 80003e2:	2101      	movs	r1, #1
 80003e4:	2006      	movs	r0, #6
 80003e6:	f7ff ff81 	bl	80002ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80003ea:	2006      	movs	r0, #6
 80003ec:	f7ff ff60 	bl	80002b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003f0:	b662      	cpsie	i
}
 80003f2:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010000 	.word	0x40010000
 8000400:	40010400 	.word	0x40010400

08000404 <SetLEDBitmask>:
/**
 * Set the LED state using a bitmask
 * @param mask Bitmask representing LED states
 */
void SetLEDBitmask(uint8_t mask)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
    // Store the new LED state
    led_state = mask;
 800040e:	4a07      	ldr	r2, [pc, #28]	@ (800042c <SetLEDBitmask+0x28>)
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	7013      	strb	r3, [r2, #0]

    // Write the pattern to the high byte of the ODR register (PE8-PE15)
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <SetLEDBitmask+0x2c>)
 8000416:	60fb      	str	r3, [r7, #12]
    *led_register = mask;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	79fa      	ldrb	r2, [r7, #7]
 800041c:	701a      	strb	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	200001ac 	.word	0x200001ac
 8000430:	48001015 	.word	0x48001015

08000434 <DigitalInitialise>:



void DigitalInitialise(void (*callback)())
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	enable_clocks();
 800043c:	f7ff ff96 	bl	800036c <enable_clocks>
	initialise_board();
 8000440:	f7ff ffa4 	bl	800038c <initialise_board>

	// set the interrupt handling function
	on_button_press = callback;
 8000444:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <DigitalInitialise+0x24>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6013      	str	r3, [r2, #0]

	// enable the interrupt for the button
	enable_interrupt();
 800044a:	f7ff ffb1 	bl	80003b0 <enable_interrupt>


}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200001a8 	.word	0x200001a8

0800045c <completion_callback>:
//        str++;
//    }
//    return 1; // All characters were digits
//}

void completion_callback(uint8_t *string_buffer, uint8_t length) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b0c6      	sub	sp, #280	@ 0x118
 8000460:	af00      	add	r7, sp, #0
 8000462:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000466:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800046a:	6018      	str	r0, [r3, #0]
 800046c:	460a      	mov	r2, r1
 800046e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000472:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000476:	701a      	strb	r2, [r3, #0]
    // Copy to modifiable buffer
    char buffer[BUFFER_SIZE];
    strncpy(buffer, (char*)string_buffer, BUFFER_SIZE);
 8000478:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800047c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000480:	f107 0008 	add.w	r0, r7, #8
 8000484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000488:	6819      	ldr	r1, [r3, #0]
 800048a:	f000 fd58 	bl	8000f3e <strncpy>
    buffer[BUFFER_SIZE - 1] = '\0';
 800048e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000492:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000496:	2200      	movs	r2, #0
 8000498:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

    // Split into operation and operand
    char *operation = strtok(buffer, " ");
 800049c:	f107 0308 	add.w	r3, r7, #8
 80004a0:	4935      	ldr	r1, [pc, #212]	@ (8000578 <completion_callback+0x11c>)
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 fd5e 	bl	8000f64 <strtok>
 80004a8:	4603      	mov	r3, r0
 80004aa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    char *operand = strtok(NULL, "\r\n");
 80004ae:	4933      	ldr	r1, [pc, #204]	@ (800057c <completion_callback+0x120>)
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fd57 	bl	8000f64 <strtok>
 80004b6:	4603      	mov	r3, r0
 80004b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    if (operation == NULL || operand == NULL){
 80004bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d003      	beq.n	80004cc <completion_callback+0x70>
 80004c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d104      	bne.n	80004d6 <completion_callback+0x7a>
        SerialOutputString((uint8_t*)"Invalid input.\r\n", &USART1_PORT);
 80004cc:	492c      	ldr	r1, [pc, #176]	@ (8000580 <completion_callback+0x124>)
 80004ce:	482d      	ldr	r0, [pc, #180]	@ (8000584 <completion_callback+0x128>)
 80004d0:	f000 f940 	bl	8000754 <SerialOutputString>
        return;
 80004d4:	e04b      	b.n	800056e <completion_callback+0x112>
    }

    if (strcmp(operation, "led") == 0) {
 80004d6:	492c      	ldr	r1, [pc, #176]	@ (8000588 <completion_callback+0x12c>)
 80004d8:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80004dc:	f7ff fe80 	bl	80001e0 <strcmp>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d143      	bne.n	800056e <completion_callback+0x112>
        SerialOutputString((uint8_t*)"You selected led operation\r\n", &USART1_PORT);
 80004e6:	4926      	ldr	r1, [pc, #152]	@ (8000580 <completion_callback+0x124>)
 80004e8:	4828      	ldr	r0, [pc, #160]	@ (800058c <completion_callback+0x130>)
 80004ea:	f000 f933 	bl	8000754 <SerialOutputString>

        // Check if length is exactly 8
        if (strlen(operand) != 8) {
 80004ee:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80004f2:	f7ff fe7f 	bl	80001f4 <strlen>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b08      	cmp	r3, #8
 80004fa:	d004      	beq.n	8000506 <completion_callback+0xaa>
            SerialOutputString((uint8_t*)"Invalid input.\r\n\r\n", &USART1_PORT);
 80004fc:	4920      	ldr	r1, [pc, #128]	@ (8000580 <completion_callback+0x124>)
 80004fe:	4824      	ldr	r0, [pc, #144]	@ (8000590 <completion_callback+0x134>)
 8000500:	f000 f928 	bl	8000754 <SerialOutputString>
            return;
 8000504:	e033      	b.n	800056e <completion_callback+0x112>
        }

        // Check if only '0' and '1'
        for (int i = 0; i < 8; i++) {
 8000506:	2300      	movs	r3, #0
 8000508:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800050c:	e019      	b.n	8000542 <completion_callback+0xe6>
            if (operand[i] != '0' && operand[i] != '1') {
 800050e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000512:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000516:	4413      	add	r3, r2
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b30      	cmp	r3, #48	@ 0x30
 800051c:	d00c      	beq.n	8000538 <completion_callback+0xdc>
 800051e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000522:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000526:	4413      	add	r3, r2
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b31      	cmp	r3, #49	@ 0x31
 800052c:	d004      	beq.n	8000538 <completion_callback+0xdc>
                SerialOutputString((uint8_t*)"Invalid input.\r\n", &USART1_PORT);
 800052e:	4914      	ldr	r1, [pc, #80]	@ (8000580 <completion_callback+0x124>)
 8000530:	4814      	ldr	r0, [pc, #80]	@ (8000584 <completion_callback+0x128>)
 8000532:	f000 f90f 	bl	8000754 <SerialOutputString>
                return;
 8000536:	e01a      	b.n	800056e <completion_callback+0x112>
        for (int i = 0; i < 8; i++) {
 8000538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800053c:	3301      	adds	r3, #1
 800053e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000546:	2b07      	cmp	r3, #7
 8000548:	dde1      	ble.n	800050e <completion_callback+0xb2>
            }
        }

        // If valid, convert to bitmask and set
        uint8_t bitmask = (uint8_t)strtol(operand, NULL, 2);
 800054a:	2202      	movs	r2, #2
 800054c:	2100      	movs	r1, #0
 800054e:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000552:	f000 fbdd 	bl	8000d10 <strtol>
 8000556:	4603      	mov	r3, r0
 8000558:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        SetLEDBitmask(bitmask);
 800055c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff4f 	bl	8000404 <SetLEDBitmask>
        SerialOutputString((uint8_t*)"LED pattern set.\r\n", &USART1_PORT);
 8000566:	4906      	ldr	r1, [pc, #24]	@ (8000580 <completion_callback+0x124>)
 8000568:	480a      	ldr	r0, [pc, #40]	@ (8000594 <completion_callback+0x138>)
 800056a:	f000 f8f3 	bl	8000754 <SerialOutputString>
//    SerialOutputString((uint8_t*)num_str, &USART1_PORT);
//    SerialOutputString((uint8_t*)"\r\n\r\n", &USART1_PORT);
//
//    // Prompt for next input
//    SerialOutputString((uint8_t*)"Enter text (RETURN to terminate):\r\n", &USART1_PORT);
}
 800056e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	08001d58 	.word	0x08001d58
 800057c:	08001d5c 	.word	0x08001d5c
 8000580:	20000000 	.word	0x20000000
 8000584:	08001d60 	.word	0x08001d60
 8000588:	08001d74 	.word	0x08001d74
 800058c:	08001d78 	.word	0x08001d78
 8000590:	08001d98 	.word	0x08001d98
 8000594:	08001dac 	.word	0x08001dac

08000598 <main>:



int main(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
    // Initialize the serial port with baud rate 115200 and a pointer to the callback
    SerialInitialise(BAUD_115200, &USART1_PORT, &completion_callback);
 800059c:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <main+0x30>)
 800059e:	490b      	ldr	r1, [pc, #44]	@ (80005cc <main+0x34>)
 80005a0:	2004      	movs	r0, #4
 80005a2:	f000 f819 	bl	80005d8 <SerialInitialise>
    DigitalInitialise(&completion_callback);
 80005a6:	4808      	ldr	r0, [pc, #32]	@ (80005c8 <main+0x30>)
 80005a8:	f7ff ff44 	bl	8000434 <DigitalInitialise>
    //timer functions ??

    // Send welcome messages over UART
    SerialOutputString((uint8_t*)"UART ACTIVATED\r\n", &USART1_PORT);
 80005ac:	4907      	ldr	r1, [pc, #28]	@ (80005cc <main+0x34>)
 80005ae:	4808      	ldr	r0, [pc, #32]	@ (80005d0 <main+0x38>)
 80005b0:	f000 f8d0 	bl	8000754 <SerialOutputString>
    SerialOutputString((uint8_t*)"Enter an operation and operand (RETURN to terminate):\r\n", &USART1_PORT);
 80005b4:	4905      	ldr	r1, [pc, #20]	@ (80005cc <main+0x34>)
 80005b6:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <main+0x3c>)
 80005b8:	f000 f8cc 	bl	8000754 <SerialOutputString>

    // Enable RX interrupt-based input
    EnableSerialInterrupts(&USART1_PORT);
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <main+0x34>)
 80005be:	f000 f92f 	bl	8000820 <EnableSerialInterrupts>

    // Infinite loop: main code does not need to do anything here
    // since everything is handled through interrupts
    for(;;) {
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x2a>
 80005c6:	bf00      	nop
 80005c8:	0800045d 	.word	0x0800045d
 80005cc:	20000000 	.word	0x20000000
 80005d0:	08001dc0 	.word	0x08001dc0
 80005d4:	08001dd4 	.word	0x08001dd4

080005d8 <SerialInitialise>:
    0x00,                     // TX buffer initialized to 0 (legacy/placeholder)
    0x00                      // No completion function set initially
};

// Initialize the serial port with specified baud rate and a receive completion callback
void SerialInitialise(BaudRate baudRate, SerialPort *serial_port, void (*callback)(uint8_t *data, uint8_t length)) {
 80005d8:	b480      	push	{r7}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	73fb      	strb	r3, [r7, #15]

    // Set the function to call when a full string is received
    serial_port->completion_function = callback;
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable peripheral clocks required by the system and GPIO
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;      // Power interface clock
 80005ec:	4b3a      	ldr	r3, [pc, #232]	@ (80006d8 <SerialInitialise+0x100>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	4a39      	ldr	r2, [pc, #228]	@ (80006d8 <SerialInitialise+0x100>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;   // System config clock
 80005f8:	4b37      	ldr	r3, [pc, #220]	@ (80006d8 <SerialInitialise+0x100>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a36      	ldr	r2, [pc, #216]	@ (80006d8 <SerialInitialise+0x100>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= serial_port->MaskAHBENR; // Enable GPIO port clock
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	691a      	ldr	r2, [r3, #16]
 8000608:	4b33      	ldr	r3, [pc, #204]	@ (80006d8 <SerialInitialise+0x100>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4932      	ldr	r1, [pc, #200]	@ (80006d8 <SerialInitialise+0x100>)
 800060e:	4313      	orrs	r3, r2
 8000610:	614b      	str	r3, [r1, #20]

    // Set the GPIO pins to alternate function mode (for USART)
    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	6952      	ldr	r2, [r2, #20]
 800061a:	601a      	str	r2, [r3, #0]

    // Set GPIO pins to high speed mode
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	6992      	ldr	r2, [r2, #24]
 8000624:	609a      	str	r2, [r3, #8]

    // Select alternate function 7 (USART1) for PC10 and PC11
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	69d9      	ldr	r1, [r3, #28]
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	6a1a      	ldr	r2, [r3, #32]
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	430a      	orrs	r2, r1
 8000636:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	6a19      	ldr	r1, [r3, #32]
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	430a      	orrs	r2, r1
 8000648:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable USART peripheral clock
    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SerialInitialise+0x100>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4921      	ldr	r1, [pc, #132]	@ (80006d8 <SerialInitialise+0x100>)
 8000654:	4313      	orrs	r3, r2
 8000656:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <SerialInitialise+0x100>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	491d      	ldr	r1, [pc, #116]	@ (80006d8 <SerialInitialise+0x100>)
 8000662:	4313      	orrs	r3, r2
 8000664:	618b      	str	r3, [r1, #24]

    // Set baud rate register (BRR) based on selected baud rate
    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	330c      	adds	r3, #12
 800066c:	617b      	str	r3, [r7, #20]

    switch(baudRate) {
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	2b04      	cmp	r3, #4
 8000672:	d823      	bhi.n	80006bc <SerialInitialise+0xe4>
 8000674:	a201      	add	r2, pc, #4	@ (adr r2, 800067c <SerialInitialise+0xa4>)
 8000676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067a:	bf00      	nop
 800067c:	08000691 	.word	0x08000691
 8000680:	0800069b 	.word	0x0800069b
 8000684:	080006a5 	.word	0x080006a5
 8000688:	080006ad 	.word	0x080006ad
 800068c:	080006b5 	.word	0x080006b5
        case BAUD_9600:
            *baud_rate_config = 0x341;  // BRR value for 9600 baud at 8 MHz
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	f240 3241 	movw	r2, #833	@ 0x341
 8000696:	801a      	strh	r2, [r3, #0]
            break;
 8000698:	e010      	b.n	80006bc <SerialInitialise+0xe4>
        case BAUD_19200:
            *baud_rate_config = 0x1A0;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80006a0:	801a      	strh	r2, [r3, #0]
            break;
 80006a2:	e00b      	b.n	80006bc <SerialInitialise+0xe4>
        case BAUD_38400:
            *baud_rate_config = 0xD0;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	22d0      	movs	r2, #208	@ 0xd0
 80006a8:	801a      	strh	r2, [r3, #0]
            break;
 80006aa:	e007      	b.n	80006bc <SerialInitialise+0xe4>
        case BAUD_57600:
            *baud_rate_config = 0x8B;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	228b      	movs	r2, #139	@ 0x8b
 80006b0:	801a      	strh	r2, [r3, #0]
            break;
 80006b2:	e003      	b.n	80006bc <SerialInitialise+0xe4>
        case BAUD_115200:
            *baud_rate_config = 0x46;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	2246      	movs	r2, #70	@ 0x46
 80006b8:	801a      	strh	r2, [r3, #0]
            break;
 80006ba:	bf00      	nop
    }

    // Enable USART transmitter and receiver, and the USART itself
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f042 020d 	orr.w	r2, r2, #13
 80006ca:	601a      	str	r2, [r3, #0]
}
 80006cc:	bf00      	nop
 80006ce:	371c      	adds	r7, #28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000

080006dc <SerialOutputChar>:

// Transmit a single character via USART using non-blocking (interrupt-based) method
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
    // Wait (stall) if buffer is full (circular buffer wraparound)
    while (((serial_port->tx_head + 1) % TX_BUFFER_SIZE) == serial_port->tx_tail);
 80006e8:	bf00      	nop
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	3301      	adds	r3, #1
 80006f2:	425a      	negs	r2, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	bf58      	it	pl
 80006fa:	4253      	negpl	r3, r2
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8000700:	b292      	uxth	r2, r2
 8000702:	4293      	cmp	r3, r2
 8000704:	d0f1      	beq.n	80006ea <SerialOutputChar+0xe>

    // Store character in TX buffer
    serial_port->tx_buffer[serial_port->tx_head] = data;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800070a:	b29b      	uxth	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	4413      	add	r3, r2
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    // Advance head index, wrapping around if needed
    serial_port->tx_head = (serial_port->tx_head + 1) % TX_BUFFER_SIZE;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800071c:	b29b      	uxth	r3, r3
 800071e:	3301      	adds	r3, #1
 8000720:	425a      	negs	r2, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	bf58      	it	pl
 8000728:	4253      	negpl	r3, r2
 800072a:	b29a      	uxth	r2, r3
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	851a      	strh	r2, [r3, #40]	@ 0x28

    // Mark transmitter as active and enable TXE interrupt to begin sending
    serial_port->tx_busy = 1;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	2201      	movs	r2, #1
 8000734:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    serial_port->UART->CR1 |= USART_CR1_TXEIE;
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000746:	601a      	str	r2, [r3, #0]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <SerialOutputString>:

// Transmit a full null-terminated string via USART using interrupt-based method
void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
    uint32_t counter = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]

    // Send each character until null-terminator is reached
    while (*pt) {
 8000762:	e00b      	b.n	800077c <SerialOutputString+0x28>
        SerialOutputChar(*pt, serial_port);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	6839      	ldr	r1, [r7, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ffb6 	bl	80006dc <SerialOutputChar>
        counter++;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3301      	adds	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
        pt++;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3301      	adds	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
    while (*pt) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1ef      	bne.n	8000764 <SerialOutputString+0x10>
    }
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <__NVIC_EnableIRQ>:
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	4907      	ldr	r1, [pc, #28]	@ (80007c8 <__NVIC_EnableIRQ+0x38>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100

080007cc <__NVIC_SetPriority>:
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db0a      	blt.n	80007f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	490c      	ldr	r1, [pc, #48]	@ (8000818 <__NVIC_SetPriority+0x4c>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	0112      	lsls	r2, r2, #4
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	440b      	add	r3, r1
 80007f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80007f4:	e00a      	b.n	800080c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4908      	ldr	r1, [pc, #32]	@ (800081c <__NVIC_SetPriority+0x50>)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	3b04      	subs	r3, #4
 8000804:	0112      	lsls	r2, r2, #4
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	440b      	add	r3, r1
 800080a:	761a      	strb	r2, [r3, #24]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <EnableSerialInterrupts>:
// rx_buffer1 is filled live during character reception
// rx_buffer2 is a safe copy handed off to the main loop
uint8_t rx_buffer1[BUFFER_SIZE];
uint8_t rx_buffer2[BUFFER_SIZE];

void EnableSerialInterrupts(SerialPort *serial_port) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
    // Disable global interrupts to prevent issues during setup
    __disable_irq();

    // Reset flags and index
    rx_index = 0;
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <EnableSerialInterrupts+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
    string_recieved = 0;
 8000832:	4b16      	ldr	r3, [pc, #88]	@ (800088c <EnableSerialInterrupts+0x6c>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]

    // Clear both RX buffers
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	e00c      	b.n	8000858 <EnableSerialInterrupts+0x38>
        rx_buffer1[i] = 0;
 800083e:	4a14      	ldr	r2, [pc, #80]	@ (8000890 <EnableSerialInterrupts+0x70>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
        rx_buffer2[i] = 0;
 8000848:	4a12      	ldr	r2, [pc, #72]	@ (8000894 <EnableSerialInterrupts+0x74>)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	4413      	add	r3, r2
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3301      	adds	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2bff      	cmp	r3, #255	@ 0xff
 800085c:	ddef      	ble.n	800083e <EnableSerialInterrupts+0x1e>
    }

    // Enable Receive Not Empty interrupt (triggers when data arrives)
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f042 0220 	orr.w	r2, r2, #32
 800086c:	601a      	str	r2, [r3, #0]

    // Enable USART1 interrupt in the NVIC
    NVIC_EnableIRQ(USART1_IRQn);              // Be sure your startup file maps this correctly
 800086e:	2025      	movs	r0, #37	@ 0x25
 8000870:	f7ff ff8e 	bl	8000790 <__NVIC_EnableIRQ>
    NVIC_SetPriority(USART1_IRQn, 0);         // Highest priority (lowest numerical value)
 8000874:	2100      	movs	r1, #0
 8000876:	2025      	movs	r0, #37	@ 0x25
 8000878:	f7ff ffa8 	bl	80007cc <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800087c:	b662      	cpsie	i
}
 800087e:	bf00      	nop

    // Re-enable global interrupts
    __enable_irq();
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200001ae 	.word	0x200001ae
 800088c:	200001ad 	.word	0x200001ad
 8000890:	200001b0 	.word	0x200001b0
 8000894:	200002b0 	.word	0x200002b0

08000898 <USART1_EXTI25_IRQHandler>:

// Interrupt Service Routine for USART1
void USART1_EXTI25_IRQHandler(void) {
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b0c3      	sub	sp, #268	@ 0x10c
 800089c:	af00      	add	r7, sp, #0
    // ---------------------------
    // RX SECTION
    // ---------------------------
    // Check if RXNE (Receive Data Register Not Empty) is set
    if (USART1_PORT.UART->ISR & USART_ISR_RXNE) {
 800089e:	4b60      	ldr	r3, [pc, #384]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	f003 0320 	and.w	r3, r3, #32
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d07d      	beq.n	80009a8 <USART1_EXTI25_IRQHandler+0x110>
        // Read the incoming character
        uint8_t received_char = USART1_PORT.UART->RDR;
 80008ac:	4b5c      	ldr	r3, [pc, #368]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103

        // Echo the character back for user feedback
        SerialOutputChar(received_char, &USART1_PORT);
 80008b8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80008bc:	4958      	ldr	r1, [pc, #352]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ff0c 	bl	80006dc <SerialOutputChar>

        // Only process if there's space in the buffer
        if (rx_index < BUFFER_SIZE - 1) {
 80008c4:	4b57      	ldr	r3, [pc, #348]	@ (8000a24 <USART1_EXTI25_IRQHandler+0x18c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2bff      	cmp	r3, #255	@ 0xff
 80008cc:	d047      	beq.n	800095e <USART1_EXTI25_IRQHandler+0xc6>
            // Store received character in live RX buffer
            rx_buffer1[rx_index++] = received_char;
 80008ce:	4b55      	ldr	r3, [pc, #340]	@ (8000a24 <USART1_EXTI25_IRQHandler+0x18c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	b2d1      	uxtb	r1, r2
 80008d8:	4a52      	ldr	r2, [pc, #328]	@ (8000a24 <USART1_EXTI25_IRQHandler+0x18c>)
 80008da:	7011      	strb	r1, [r2, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	4a52      	ldr	r2, [pc, #328]	@ (8000a28 <USART1_EXTI25_IRQHandler+0x190>)
 80008e0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80008e4:	5453      	strb	r3, [r2, r1]

            // Check for end-of-input character (ENTER/RETURN key)
            if (received_char == '\r' || received_char == '\n') {
 80008e6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80008ea:	2b0d      	cmp	r3, #13
 80008ec:	d003      	beq.n	80008f6 <USART1_EXTI25_IRQHandler+0x5e>
 80008ee:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80008f2:	2b0a      	cmp	r3, #10
 80008f4:	d158      	bne.n	80009a8 <USART1_EXTI25_IRQHandler+0x110>
                // Null-terminate the string
                rx_buffer1[rx_index] = '\0';
 80008f6:	4b4b      	ldr	r3, [pc, #300]	@ (8000a24 <USART1_EXTI25_IRQHandler+0x18c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000a28 <USART1_EXTI25_IRQHandler+0x190>)
 8000900:	2100      	movs	r1, #0
 8000902:	5499      	strb	r1, [r3, r2]
                string_recieved = 1;
 8000904:	4b49      	ldr	r3, [pc, #292]	@ (8000a2c <USART1_EXTI25_IRQHandler+0x194>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]

                // Copy buffer1 to buffer2 (safe for processing outside ISR)
                for (int i = 0; i < BUFFER_SIZE; i++) {
 800090a:	2300      	movs	r3, #0
 800090c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000910:	e015      	b.n	800093e <USART1_EXTI25_IRQHandler+0xa6>
                    rx_buffer2[i] = rx_buffer1[i];
 8000912:	4a45      	ldr	r2, [pc, #276]	@ (8000a28 <USART1_EXTI25_IRQHandler+0x190>)
 8000914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000918:	4413      	add	r3, r2
 800091a:	7819      	ldrb	r1, [r3, #0]
 800091c:	4a44      	ldr	r2, [pc, #272]	@ (8000a30 <USART1_EXTI25_IRQHandler+0x198>)
 800091e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
                    rx_buffer1[i] = 0; // Clear buffer1 for next message
 8000928:	4a3f      	ldr	r2, [pc, #252]	@ (8000a28 <USART1_EXTI25_IRQHandler+0x190>)
 800092a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800092e:	4413      	add	r3, r2
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < BUFFER_SIZE; i++) {
 8000934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000938:	3301      	adds	r3, #1
 800093a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800093e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000942:	2bff      	cmp	r3, #255	@ 0xff
 8000944:	dde5      	ble.n	8000912 <USART1_EXTI25_IRQHandler+0x7a>
                }

                // Trigger the completion callback with the full message
                USART1_PORT.completion_function(rx_buffer2, rx_index);
 8000946:	4b36      	ldr	r3, [pc, #216]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800094a:	4a36      	ldr	r2, [pc, #216]	@ (8000a24 <USART1_EXTI25_IRQHandler+0x18c>)
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	4611      	mov	r1, r2
 8000952:	4837      	ldr	r0, [pc, #220]	@ (8000a30 <USART1_EXTI25_IRQHandler+0x198>)
 8000954:	4798      	blx	r3

                // Reset index for next message
                rx_index = 0;
 8000956:	4b33      	ldr	r3, [pc, #204]	@ (8000a24 <USART1_EXTI25_IRQHandler+0x18c>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e024      	b.n	80009a8 <USART1_EXTI25_IRQHandler+0x110>
            }
        } else {
            // If buffer overflows, clear and notify
            rx_index = 0;
 800095e:	4b31      	ldr	r3, [pc, #196]	@ (8000a24 <USART1_EXTI25_IRQHandler+0x18c>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
            uint8_t BUFFEROVERFLOW[BUFFER_SIZE] = "ERROR: BUFFER OVERFLOW";
 8000964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000968:	f5a3 7684 	sub.w	r6, r3, #264	@ 0x108
 800096c:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <USART1_EXTI25_IRQHandler+0x19c>)
 800096e:	4634      	mov	r4, r6
 8000970:	461d      	mov	r5, r3
 8000972:	6828      	ldr	r0, [r5, #0]
 8000974:	6869      	ldr	r1, [r5, #4]
 8000976:	68aa      	ldr	r2, [r5, #8]
 8000978:	68eb      	ldr	r3, [r5, #12]
 800097a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097c:	6928      	ldr	r0, [r5, #16]
 800097e:	6020      	str	r0, [r4, #0]
 8000980:	8aab      	ldrh	r3, [r5, #20]
 8000982:	7daa      	ldrb	r2, [r5, #22]
 8000984:	80a3      	strh	r3, [r4, #4]
 8000986:	4613      	mov	r3, r2
 8000988:	71a3      	strb	r3, [r4, #6]
 800098a:	f106 0317 	add.w	r3, r6, #23
 800098e:	22e9      	movs	r2, #233	@ 0xe9
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f000 facb 	bl	8000f2e <memset>
            USART1_PORT.completion_function(BUFFEROVERFLOW, rx_index);
 8000998:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 800099a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800099c:	4a21      	ldr	r2, [pc, #132]	@ (8000a24 <USART1_EXTI25_IRQHandler+0x18c>)
 800099e:	7812      	ldrb	r2, [r2, #0]
 80009a0:	b2d1      	uxtb	r1, r2
 80009a2:	463a      	mov	r2, r7
 80009a4:	4610      	mov	r0, r2
 80009a6:	4798      	blx	r3

    // ---------------------------
    // TX SECTION
    // ---------------------------
    // Check if TXE (Transmit Data Register Empty) interrupt is enabled and pending
    if ((USART1->CR1 & USART_CR1_TXEIE) && (USART1->ISR & USART_ISR_TXE)) {
 80009a8:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <USART1_EXTI25_IRQHandler+0x1a0>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d02f      	beq.n	8000a14 <USART1_EXTI25_IRQHandler+0x17c>
 80009b4:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <USART1_EXTI25_IRQHandler+0x1a0>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d029      	beq.n	8000a14 <USART1_EXTI25_IRQHandler+0x17c>
        // Check if there is data left to transmit in the circular buffer
        if (USART1_PORT.tx_tail != USART1_PORT.tx_head) {
 80009c0:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 80009c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 80009c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d017      	beq.n	8000a00 <USART1_EXTI25_IRQHandler+0x168>
            // Send next character from the TX buffer
            USART1->TDR = USART1_PORT.tx_buffer[USART1_PORT.tx_tail];
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 80009d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 80009da:	4413      	add	r3, r2
 80009dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <USART1_EXTI25_IRQHandler+0x1a0>)
 80009e4:	851a      	strh	r2, [r3, #40]	@ 0x28
            USART1_PORT.tx_tail = (USART1_PORT.tx_tail + 1) % TX_BUFFER_SIZE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 80009e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	3301      	adds	r3, #1
 80009ee:	425a      	negs	r2, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	bf58      	it	pl
 80009f6:	4253      	negpl	r3, r2
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 80009fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
            // Transmission is complete — disable TXE interrupt
            USART1->CR1 &= ~USART_CR1_TXEIE;
            USART1_PORT.tx_busy = 0;
        }
    }
}
 80009fe:	e009      	b.n	8000a14 <USART1_EXTI25_IRQHandler+0x17c>
            USART1->CR1 &= ~USART_CR1_TXEIE;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <USART1_EXTI25_IRQHandler+0x1a0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <USART1_EXTI25_IRQHandler+0x1a0>)
 8000a06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a0a:	6013      	str	r3, [r2, #0]
            USART1_PORT.tx_busy = 0;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <USART1_EXTI25_IRQHandler+0x188>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
}
 8000a14:	bf00      	nop
 8000a16:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000000 	.word	0x20000000
 8000a24:	200001ae 	.word	0x200001ae
 8000a28:	200001b0 	.word	0x200001b0
 8000a2c:	200001ad 	.word	0x200001ad
 8000a30:	200002b0 	.word	0x200002b0
 8000a34:	08001e0c 	.word	0x08001e0c
 8000a38:	40013800 	.word	0x40013800

08000a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return 1;
 8000a40:	2301      	movs	r3, #1
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_kill>:

int _kill(int pid, int sig)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a56:	f000 fb27 	bl	80010a8 <__errno>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2216      	movs	r2, #22
 8000a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_exit>:

void _exit (int status)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ffe7 	bl	8000a4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a7e:	bf00      	nop
 8000a80:	e7fd      	b.n	8000a7e <_exit+0x12>

08000a82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e00a      	b.n	8000aaa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a94:	f3af 8000 	nop.w
 8000a98:	4601      	mov	r1, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	60ba      	str	r2, [r7, #8]
 8000aa0:	b2ca      	uxtb	r2, r1
 8000aa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	dbf0      	blt.n	8000a94 <_read+0x12>
  }

  return len;
 8000ab2:	687b      	ldr	r3, [r7, #4]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e009      	b.n	8000ae2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	60ba      	str	r2, [r7, #8]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	dbf1      	blt.n	8000ace <_write+0x12>
  }
  return len;
 8000aea:	687b      	ldr	r3, [r7, #4]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_close>:

int _close(int file)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b1c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <_isatty>:

int _isatty(int file)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b085      	sub	sp, #20
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d207      	bcs.n	8000b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b8c:	f000 fa8c 	bl	80010a8 <__errno>
 8000b90:	4603      	mov	r3, r0
 8000b92:	220c      	movs	r2, #12
 8000b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e009      	b.n	8000bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <_sbrk+0x64>)
 8000bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bae:	68fb      	ldr	r3, [r7, #12]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3718      	adds	r7, #24
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000a000 	.word	0x2000a000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	200003b0 	.word	0x200003b0
 8000bc4:	20000500 	.word	0x20000500

08000bc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc8:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bcc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bf6:	f000 fa5d 	bl	80010b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfa:	f7ff fccd 	bl	8000598 <main>

08000bfe <LoopForever>:

LoopForever:
  b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   r0, =_estack
 8000c00:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8000c0c:	08002014 	.word	0x08002014
  ldr r2, =_sbss
 8000c10:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8000c14:	20000500 	.word	0x20000500

08000c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <_strtol_l.constprop.0>:
 8000c1c:	2b24      	cmp	r3, #36	@ 0x24
 8000c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c22:	4686      	mov	lr, r0
 8000c24:	4690      	mov	r8, r2
 8000c26:	d801      	bhi.n	8000c2c <_strtol_l.constprop.0+0x10>
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d106      	bne.n	8000c3a <_strtol_l.constprop.0+0x1e>
 8000c2c:	f000 fa3c 	bl	80010a8 <__errno>
 8000c30:	2316      	movs	r3, #22
 8000c32:	6003      	str	r3, [r0, #0]
 8000c34:	2000      	movs	r0, #0
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	4834      	ldr	r0, [pc, #208]	@ (8000d0c <_strtol_l.constprop.0+0xf0>)
 8000c3c:	460d      	mov	r5, r1
 8000c3e:	462a      	mov	r2, r5
 8000c40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000c44:	5d06      	ldrb	r6, [r0, r4]
 8000c46:	f016 0608 	ands.w	r6, r6, #8
 8000c4a:	d1f8      	bne.n	8000c3e <_strtol_l.constprop.0+0x22>
 8000c4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8000c4e:	d12d      	bne.n	8000cac <_strtol_l.constprop.0+0x90>
 8000c50:	782c      	ldrb	r4, [r5, #0]
 8000c52:	2601      	movs	r6, #1
 8000c54:	1c95      	adds	r5, r2, #2
 8000c56:	f033 0210 	bics.w	r2, r3, #16
 8000c5a:	d109      	bne.n	8000c70 <_strtol_l.constprop.0+0x54>
 8000c5c:	2c30      	cmp	r4, #48	@ 0x30
 8000c5e:	d12a      	bne.n	8000cb6 <_strtol_l.constprop.0+0x9a>
 8000c60:	782a      	ldrb	r2, [r5, #0]
 8000c62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000c66:	2a58      	cmp	r2, #88	@ 0x58
 8000c68:	d125      	bne.n	8000cb6 <_strtol_l.constprop.0+0x9a>
 8000c6a:	786c      	ldrb	r4, [r5, #1]
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	3502      	adds	r5, #2
 8000c70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000c74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000c78:	2200      	movs	r2, #0
 8000c7a:	fbbc f9f3 	udiv	r9, ip, r3
 8000c7e:	4610      	mov	r0, r2
 8000c80:	fb03 ca19 	mls	sl, r3, r9, ip
 8000c84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000c88:	2f09      	cmp	r7, #9
 8000c8a:	d81b      	bhi.n	8000cc4 <_strtol_l.constprop.0+0xa8>
 8000c8c:	463c      	mov	r4, r7
 8000c8e:	42a3      	cmp	r3, r4
 8000c90:	dd27      	ble.n	8000ce2 <_strtol_l.constprop.0+0xc6>
 8000c92:	1c57      	adds	r7, r2, #1
 8000c94:	d007      	beq.n	8000ca6 <_strtol_l.constprop.0+0x8a>
 8000c96:	4581      	cmp	r9, r0
 8000c98:	d320      	bcc.n	8000cdc <_strtol_l.constprop.0+0xc0>
 8000c9a:	d101      	bne.n	8000ca0 <_strtol_l.constprop.0+0x84>
 8000c9c:	45a2      	cmp	sl, r4
 8000c9e:	db1d      	blt.n	8000cdc <_strtol_l.constprop.0+0xc0>
 8000ca0:	fb00 4003 	mla	r0, r0, r3, r4
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000caa:	e7eb      	b.n	8000c84 <_strtol_l.constprop.0+0x68>
 8000cac:	2c2b      	cmp	r4, #43	@ 0x2b
 8000cae:	bf04      	itt	eq
 8000cb0:	782c      	ldrbeq	r4, [r5, #0]
 8000cb2:	1c95      	addeq	r5, r2, #2
 8000cb4:	e7cf      	b.n	8000c56 <_strtol_l.constprop.0+0x3a>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1da      	bne.n	8000c70 <_strtol_l.constprop.0+0x54>
 8000cba:	2c30      	cmp	r4, #48	@ 0x30
 8000cbc:	bf0c      	ite	eq
 8000cbe:	2308      	moveq	r3, #8
 8000cc0:	230a      	movne	r3, #10
 8000cc2:	e7d5      	b.n	8000c70 <_strtol_l.constprop.0+0x54>
 8000cc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000cc8:	2f19      	cmp	r7, #25
 8000cca:	d801      	bhi.n	8000cd0 <_strtol_l.constprop.0+0xb4>
 8000ccc:	3c37      	subs	r4, #55	@ 0x37
 8000cce:	e7de      	b.n	8000c8e <_strtol_l.constprop.0+0x72>
 8000cd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8000cd4:	2f19      	cmp	r7, #25
 8000cd6:	d804      	bhi.n	8000ce2 <_strtol_l.constprop.0+0xc6>
 8000cd8:	3c57      	subs	r4, #87	@ 0x57
 8000cda:	e7d8      	b.n	8000c8e <_strtol_l.constprop.0+0x72>
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	e7e1      	b.n	8000ca6 <_strtol_l.constprop.0+0x8a>
 8000ce2:	1c53      	adds	r3, r2, #1
 8000ce4:	d108      	bne.n	8000cf8 <_strtol_l.constprop.0+0xdc>
 8000ce6:	2322      	movs	r3, #34	@ 0x22
 8000ce8:	f8ce 3000 	str.w	r3, [lr]
 8000cec:	4660      	mov	r0, ip
 8000cee:	f1b8 0f00 	cmp.w	r8, #0
 8000cf2:	d0a0      	beq.n	8000c36 <_strtol_l.constprop.0+0x1a>
 8000cf4:	1e69      	subs	r1, r5, #1
 8000cf6:	e006      	b.n	8000d06 <_strtol_l.constprop.0+0xea>
 8000cf8:	b106      	cbz	r6, 8000cfc <_strtol_l.constprop.0+0xe0>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	f1b8 0f00 	cmp.w	r8, #0
 8000d00:	d099      	beq.n	8000c36 <_strtol_l.constprop.0+0x1a>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d1f6      	bne.n	8000cf4 <_strtol_l.constprop.0+0xd8>
 8000d06:	f8c8 1000 	str.w	r1, [r8]
 8000d0a:	e794      	b.n	8000c36 <_strtol_l.constprop.0+0x1a>
 8000d0c:	08001e24 	.word	0x08001e24

08000d10 <strtol>:
 8000d10:	4613      	mov	r3, r2
 8000d12:	460a      	mov	r2, r1
 8000d14:	4601      	mov	r1, r0
 8000d16:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <strtol+0x10>)
 8000d18:	6800      	ldr	r0, [r0, #0]
 8000d1a:	f7ff bf7f 	b.w	8000c1c <_strtol_l.constprop.0>
 8000d1e:	bf00      	nop
 8000d20:	2000013c 	.word	0x2000013c

08000d24 <std>:
 8000d24:	2300      	movs	r3, #0
 8000d26:	b510      	push	{r4, lr}
 8000d28:	4604      	mov	r4, r0
 8000d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8000d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d32:	6083      	str	r3, [r0, #8]
 8000d34:	8181      	strh	r1, [r0, #12]
 8000d36:	6643      	str	r3, [r0, #100]	@ 0x64
 8000d38:	81c2      	strh	r2, [r0, #14]
 8000d3a:	6183      	str	r3, [r0, #24]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2208      	movs	r2, #8
 8000d40:	305c      	adds	r0, #92	@ 0x5c
 8000d42:	f000 f8f4 	bl	8000f2e <memset>
 8000d46:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <std+0x58>)
 8000d48:	6263      	str	r3, [r4, #36]	@ 0x24
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <std+0x5c>)
 8000d4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <std+0x60>)
 8000d50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <std+0x64>)
 8000d54:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d56:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <std+0x68>)
 8000d58:	6224      	str	r4, [r4, #32]
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	d006      	beq.n	8000d6c <std+0x48>
 8000d5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000d62:	4294      	cmp	r4, r2
 8000d64:	d002      	beq.n	8000d6c <std+0x48>
 8000d66:	33d0      	adds	r3, #208	@ 0xd0
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d105      	bne.n	8000d78 <std+0x54>
 8000d6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d74:	f000 b9c2 	b.w	80010fc <__retarget_lock_init_recursive>
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	bf00      	nop
 8000d7c:	08000ea9 	.word	0x08000ea9
 8000d80:	08000ecb 	.word	0x08000ecb
 8000d84:	08000f03 	.word	0x08000f03
 8000d88:	08000f27 	.word	0x08000f27
 8000d8c:	200003b4 	.word	0x200003b4

08000d90 <stdio_exit_handler>:
 8000d90:	4a02      	ldr	r2, [pc, #8]	@ (8000d9c <stdio_exit_handler+0xc>)
 8000d92:	4903      	ldr	r1, [pc, #12]	@ (8000da0 <stdio_exit_handler+0x10>)
 8000d94:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <stdio_exit_handler+0x14>)
 8000d96:	f000 b869 	b.w	8000e6c <_fwalk_sglue>
 8000d9a:	bf00      	nop
 8000d9c:	20000130 	.word	0x20000130
 8000da0:	08001449 	.word	0x08001449
 8000da4:	20000140 	.word	0x20000140

08000da8 <cleanup_stdio>:
 8000da8:	6841      	ldr	r1, [r0, #4]
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <cleanup_stdio+0x34>)
 8000dac:	4299      	cmp	r1, r3
 8000dae:	b510      	push	{r4, lr}
 8000db0:	4604      	mov	r4, r0
 8000db2:	d001      	beq.n	8000db8 <cleanup_stdio+0x10>
 8000db4:	f000 fb48 	bl	8001448 <_fflush_r>
 8000db8:	68a1      	ldr	r1, [r4, #8]
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <cleanup_stdio+0x38>)
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d002      	beq.n	8000dc6 <cleanup_stdio+0x1e>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f000 fb41 	bl	8001448 <_fflush_r>
 8000dc6:	68e1      	ldr	r1, [r4, #12]
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <cleanup_stdio+0x3c>)
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d004      	beq.n	8000dd8 <cleanup_stdio+0x30>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dd4:	f000 bb38 	b.w	8001448 <_fflush_r>
 8000dd8:	bd10      	pop	{r4, pc}
 8000dda:	bf00      	nop
 8000ddc:	200003b4 	.word	0x200003b4
 8000de0:	2000041c 	.word	0x2000041c
 8000de4:	20000484 	.word	0x20000484

08000de8 <global_stdio_init.part.0>:
 8000de8:	b510      	push	{r4, lr}
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <global_stdio_init.part.0+0x30>)
 8000dec:	4c0b      	ldr	r4, [pc, #44]	@ (8000e1c <global_stdio_init.part.0+0x34>)
 8000dee:	4a0c      	ldr	r2, [pc, #48]	@ (8000e20 <global_stdio_init.part.0+0x38>)
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	4620      	mov	r0, r4
 8000df4:	2200      	movs	r2, #0
 8000df6:	2104      	movs	r1, #4
 8000df8:	f7ff ff94 	bl	8000d24 <std>
 8000dfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000e00:	2201      	movs	r2, #1
 8000e02:	2109      	movs	r1, #9
 8000e04:	f7ff ff8e 	bl	8000d24 <std>
 8000e08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e12:	2112      	movs	r1, #18
 8000e14:	f7ff bf86 	b.w	8000d24 <std>
 8000e18:	200004ec 	.word	0x200004ec
 8000e1c:	200003b4 	.word	0x200003b4
 8000e20:	08000d91 	.word	0x08000d91

08000e24 <__sfp_lock_acquire>:
 8000e24:	4801      	ldr	r0, [pc, #4]	@ (8000e2c <__sfp_lock_acquire+0x8>)
 8000e26:	f000 b96a 	b.w	80010fe <__retarget_lock_acquire_recursive>
 8000e2a:	bf00      	nop
 8000e2c:	200004f5 	.word	0x200004f5

08000e30 <__sfp_lock_release>:
 8000e30:	4801      	ldr	r0, [pc, #4]	@ (8000e38 <__sfp_lock_release+0x8>)
 8000e32:	f000 b965 	b.w	8001100 <__retarget_lock_release_recursive>
 8000e36:	bf00      	nop
 8000e38:	200004f5 	.word	0x200004f5

08000e3c <__sinit>:
 8000e3c:	b510      	push	{r4, lr}
 8000e3e:	4604      	mov	r4, r0
 8000e40:	f7ff fff0 	bl	8000e24 <__sfp_lock_acquire>
 8000e44:	6a23      	ldr	r3, [r4, #32]
 8000e46:	b11b      	cbz	r3, 8000e50 <__sinit+0x14>
 8000e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e4c:	f7ff bff0 	b.w	8000e30 <__sfp_lock_release>
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__sinit+0x28>)
 8000e52:	6223      	str	r3, [r4, #32]
 8000e54:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <__sinit+0x2c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1f5      	bne.n	8000e48 <__sinit+0xc>
 8000e5c:	f7ff ffc4 	bl	8000de8 <global_stdio_init.part.0>
 8000e60:	e7f2      	b.n	8000e48 <__sinit+0xc>
 8000e62:	bf00      	nop
 8000e64:	08000da9 	.word	0x08000da9
 8000e68:	200004ec 	.word	0x200004ec

08000e6c <_fwalk_sglue>:
 8000e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e70:	4607      	mov	r7, r0
 8000e72:	4688      	mov	r8, r1
 8000e74:	4614      	mov	r4, r2
 8000e76:	2600      	movs	r6, #0
 8000e78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e7c:	f1b9 0901 	subs.w	r9, r9, #1
 8000e80:	d505      	bpl.n	8000e8e <_fwalk_sglue+0x22>
 8000e82:	6824      	ldr	r4, [r4, #0]
 8000e84:	2c00      	cmp	r4, #0
 8000e86:	d1f7      	bne.n	8000e78 <_fwalk_sglue+0xc>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e8e:	89ab      	ldrh	r3, [r5, #12]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d907      	bls.n	8000ea4 <_fwalk_sglue+0x38>
 8000e94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	d003      	beq.n	8000ea4 <_fwalk_sglue+0x38>
 8000e9c:	4629      	mov	r1, r5
 8000e9e:	4638      	mov	r0, r7
 8000ea0:	47c0      	blx	r8
 8000ea2:	4306      	orrs	r6, r0
 8000ea4:	3568      	adds	r5, #104	@ 0x68
 8000ea6:	e7e9      	b.n	8000e7c <_fwalk_sglue+0x10>

08000ea8 <__sread>:
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	460c      	mov	r4, r1
 8000eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eb0:	f000 f8d6 	bl	8001060 <_read_r>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	bfab      	itete	ge
 8000eb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000eba:	89a3      	ldrhlt	r3, [r4, #12]
 8000ebc:	181b      	addge	r3, r3, r0
 8000ebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ec2:	bfac      	ite	ge
 8000ec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000ec6:	81a3      	strhlt	r3, [r4, #12]
 8000ec8:	bd10      	pop	{r4, pc}

08000eca <__swrite>:
 8000eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ece:	461f      	mov	r7, r3
 8000ed0:	898b      	ldrh	r3, [r1, #12]
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	4605      	mov	r5, r0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	4616      	mov	r6, r2
 8000eda:	d505      	bpl.n	8000ee8 <__swrite+0x1e>
 8000edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f000 f8aa 	bl	800103c <_lseek_r>
 8000ee8:	89a3      	ldrh	r3, [r4, #12]
 8000eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000eee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ef2:	81a3      	strh	r3, [r4, #12]
 8000ef4:	4632      	mov	r2, r6
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4628      	mov	r0, r5
 8000efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000efe:	f000 b8c1 	b.w	8001084 <_write_r>

08000f02 <__sseek>:
 8000f02:	b510      	push	{r4, lr}
 8000f04:	460c      	mov	r4, r1
 8000f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f0a:	f000 f897 	bl	800103c <_lseek_r>
 8000f0e:	1c43      	adds	r3, r0, #1
 8000f10:	89a3      	ldrh	r3, [r4, #12]
 8000f12:	bf15      	itete	ne
 8000f14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000f16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000f1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000f1e:	81a3      	strheq	r3, [r4, #12]
 8000f20:	bf18      	it	ne
 8000f22:	81a3      	strhne	r3, [r4, #12]
 8000f24:	bd10      	pop	{r4, pc}

08000f26 <__sclose>:
 8000f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f2a:	f000 b877 	b.w	800101c <_close_r>

08000f2e <memset>:
 8000f2e:	4402      	add	r2, r0
 8000f30:	4603      	mov	r3, r0
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d100      	bne.n	8000f38 <memset+0xa>
 8000f36:	4770      	bx	lr
 8000f38:	f803 1b01 	strb.w	r1, [r3], #1
 8000f3c:	e7f9      	b.n	8000f32 <memset+0x4>

08000f3e <strncpy>:
 8000f3e:	b510      	push	{r4, lr}
 8000f40:	3901      	subs	r1, #1
 8000f42:	4603      	mov	r3, r0
 8000f44:	b132      	cbz	r2, 8000f54 <strncpy+0x16>
 8000f46:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000f4a:	f803 4b01 	strb.w	r4, [r3], #1
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	2c00      	cmp	r4, #0
 8000f52:	d1f7      	bne.n	8000f44 <strncpy+0x6>
 8000f54:	441a      	add	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d100      	bne.n	8000f5e <strncpy+0x20>
 8000f5c:	bd10      	pop	{r4, pc}
 8000f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8000f62:	e7f9      	b.n	8000f58 <strncpy+0x1a>

08000f64 <strtok>:
 8000f64:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <strtok+0x5c>)
 8000f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6a:	681f      	ldr	r7, [r3, #0]
 8000f6c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8000f6e:	4605      	mov	r5, r0
 8000f70:	460e      	mov	r6, r1
 8000f72:	b9ec      	cbnz	r4, 8000fb0 <strtok+0x4c>
 8000f74:	2050      	movs	r0, #80	@ 0x50
 8000f76:	f000 f92d 	bl	80011d4 <malloc>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	6478      	str	r0, [r7, #68]	@ 0x44
 8000f7e:	b920      	cbnz	r0, 8000f8a <strtok+0x26>
 8000f80:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <strtok+0x60>)
 8000f82:	4811      	ldr	r0, [pc, #68]	@ (8000fc8 <strtok+0x64>)
 8000f84:	215b      	movs	r1, #91	@ 0x5b
 8000f86:	f000 f8bd 	bl	8001104 <__assert_func>
 8000f8a:	e9c0 4400 	strd	r4, r4, [r0]
 8000f8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8000f92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8000f96:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8000f9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8000f9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8000fa2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8000fa6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8000faa:	6184      	str	r4, [r0, #24]
 8000fac:	7704      	strb	r4, [r0, #28]
 8000fae:	6244      	str	r4, [r0, #36]	@ 0x24
 8000fb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fbc:	f000 b806 	b.w	8000fcc <__strtok_r>
 8000fc0:	2000013c 	.word	0x2000013c
 8000fc4:	08001f24 	.word	0x08001f24
 8000fc8:	08001f3b 	.word	0x08001f3b

08000fcc <__strtok_r>:
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fce:	4604      	mov	r4, r0
 8000fd0:	b908      	cbnz	r0, 8000fd6 <__strtok_r+0xa>
 8000fd2:	6814      	ldr	r4, [r2, #0]
 8000fd4:	b144      	cbz	r4, 8000fe8 <__strtok_r+0x1c>
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000fdc:	460f      	mov	r7, r1
 8000fde:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000fe2:	b91e      	cbnz	r6, 8000fec <__strtok_r+0x20>
 8000fe4:	b965      	cbnz	r5, 8001000 <__strtok_r+0x34>
 8000fe6:	6015      	str	r5, [r2, #0]
 8000fe8:	2000      	movs	r0, #0
 8000fea:	e005      	b.n	8000ff8 <__strtok_r+0x2c>
 8000fec:	42b5      	cmp	r5, r6
 8000fee:	d1f6      	bne.n	8000fde <__strtok_r+0x12>
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f0      	bne.n	8000fd6 <__strtok_r+0xa>
 8000ff4:	6014      	str	r4, [r2, #0]
 8000ff6:	7003      	strb	r3, [r0, #0]
 8000ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ffa:	461c      	mov	r4, r3
 8000ffc:	e00c      	b.n	8001018 <__strtok_r+0x4c>
 8000ffe:	b915      	cbnz	r5, 8001006 <__strtok_r+0x3a>
 8001000:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001004:	460e      	mov	r6, r1
 8001006:	f816 5b01 	ldrb.w	r5, [r6], #1
 800100a:	42ab      	cmp	r3, r5
 800100c:	d1f7      	bne.n	8000ffe <__strtok_r+0x32>
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f3      	beq.n	8000ffa <__strtok_r+0x2e>
 8001012:	2300      	movs	r3, #0
 8001014:	f804 3c01 	strb.w	r3, [r4, #-1]
 8001018:	6014      	str	r4, [r2, #0]
 800101a:	e7ed      	b.n	8000ff8 <__strtok_r+0x2c>

0800101c <_close_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d06      	ldr	r5, [pc, #24]	@ (8001038 <_close_r+0x1c>)
 8001020:	2300      	movs	r3, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	602b      	str	r3, [r5, #0]
 8001028:	f7ff fd64 	bl	8000af4 <_close>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_close_r+0x1a>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_close_r+0x1a>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	200004f0 	.word	0x200004f0

0800103c <_lseek_r>:
 800103c:	b538      	push	{r3, r4, r5, lr}
 800103e:	4d07      	ldr	r5, [pc, #28]	@ (800105c <_lseek_r+0x20>)
 8001040:	4604      	mov	r4, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4611      	mov	r1, r2
 8001046:	2200      	movs	r2, #0
 8001048:	602a      	str	r2, [r5, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	f7ff fd79 	bl	8000b42 <_lseek>
 8001050:	1c43      	adds	r3, r0, #1
 8001052:	d102      	bne.n	800105a <_lseek_r+0x1e>
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	b103      	cbz	r3, 800105a <_lseek_r+0x1e>
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	200004f0 	.word	0x200004f0

08001060 <_read_r>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4d07      	ldr	r5, [pc, #28]	@ (8001080 <_read_r+0x20>)
 8001064:	4604      	mov	r4, r0
 8001066:	4608      	mov	r0, r1
 8001068:	4611      	mov	r1, r2
 800106a:	2200      	movs	r2, #0
 800106c:	602a      	str	r2, [r5, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	f7ff fd07 	bl	8000a82 <_read>
 8001074:	1c43      	adds	r3, r0, #1
 8001076:	d102      	bne.n	800107e <_read_r+0x1e>
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	b103      	cbz	r3, 800107e <_read_r+0x1e>
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	bd38      	pop	{r3, r4, r5, pc}
 8001080:	200004f0 	.word	0x200004f0

08001084 <_write_r>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	4d07      	ldr	r5, [pc, #28]	@ (80010a4 <_write_r+0x20>)
 8001088:	4604      	mov	r4, r0
 800108a:	4608      	mov	r0, r1
 800108c:	4611      	mov	r1, r2
 800108e:	2200      	movs	r2, #0
 8001090:	602a      	str	r2, [r5, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	f7ff fd12 	bl	8000abc <_write>
 8001098:	1c43      	adds	r3, r0, #1
 800109a:	d102      	bne.n	80010a2 <_write_r+0x1e>
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	b103      	cbz	r3, 80010a2 <_write_r+0x1e>
 80010a0:	6023      	str	r3, [r4, #0]
 80010a2:	bd38      	pop	{r3, r4, r5, pc}
 80010a4:	200004f0 	.word	0x200004f0

080010a8 <__errno>:
 80010a8:	4b01      	ldr	r3, [pc, #4]	@ (80010b0 <__errno+0x8>)
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2000013c 	.word	0x2000013c

080010b4 <__libc_init_array>:
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	4d0d      	ldr	r5, [pc, #52]	@ (80010ec <__libc_init_array+0x38>)
 80010b8:	4c0d      	ldr	r4, [pc, #52]	@ (80010f0 <__libc_init_array+0x3c>)
 80010ba:	1b64      	subs	r4, r4, r5
 80010bc:	10a4      	asrs	r4, r4, #2
 80010be:	2600      	movs	r6, #0
 80010c0:	42a6      	cmp	r6, r4
 80010c2:	d109      	bne.n	80010d8 <__libc_init_array+0x24>
 80010c4:	4d0b      	ldr	r5, [pc, #44]	@ (80010f4 <__libc_init_array+0x40>)
 80010c6:	4c0c      	ldr	r4, [pc, #48]	@ (80010f8 <__libc_init_array+0x44>)
 80010c8:	f000 fe3a 	bl	8001d40 <_init>
 80010cc:	1b64      	subs	r4, r4, r5
 80010ce:	10a4      	asrs	r4, r4, #2
 80010d0:	2600      	movs	r6, #0
 80010d2:	42a6      	cmp	r6, r4
 80010d4:	d105      	bne.n	80010e2 <__libc_init_array+0x2e>
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80010dc:	4798      	blx	r3
 80010de:	3601      	adds	r6, #1
 80010e0:	e7ee      	b.n	80010c0 <__libc_init_array+0xc>
 80010e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80010e6:	4798      	blx	r3
 80010e8:	3601      	adds	r6, #1
 80010ea:	e7f2      	b.n	80010d2 <__libc_init_array+0x1e>
 80010ec:	0800200c 	.word	0x0800200c
 80010f0:	0800200c 	.word	0x0800200c
 80010f4:	0800200c 	.word	0x0800200c
 80010f8:	08002010 	.word	0x08002010

080010fc <__retarget_lock_init_recursive>:
 80010fc:	4770      	bx	lr

080010fe <__retarget_lock_acquire_recursive>:
 80010fe:	4770      	bx	lr

08001100 <__retarget_lock_release_recursive>:
 8001100:	4770      	bx	lr
	...

08001104 <__assert_func>:
 8001104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001106:	4614      	mov	r4, r2
 8001108:	461a      	mov	r2, r3
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <__assert_func+0x2c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4605      	mov	r5, r0
 8001110:	68d8      	ldr	r0, [r3, #12]
 8001112:	b954      	cbnz	r4, 800112a <__assert_func+0x26>
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <__assert_func+0x30>)
 8001116:	461c      	mov	r4, r3
 8001118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800111c:	9100      	str	r1, [sp, #0]
 800111e:	462b      	mov	r3, r5
 8001120:	4905      	ldr	r1, [pc, #20]	@ (8001138 <__assert_func+0x34>)
 8001122:	f000 f9b9 	bl	8001498 <fiprintf>
 8001126:	f000 f9d9 	bl	80014dc <abort>
 800112a:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__assert_func+0x38>)
 800112c:	e7f4      	b.n	8001118 <__assert_func+0x14>
 800112e:	bf00      	nop
 8001130:	2000013c 	.word	0x2000013c
 8001134:	08001fd0 	.word	0x08001fd0
 8001138:	08001fa2 	.word	0x08001fa2
 800113c:	08001f95 	.word	0x08001f95

08001140 <_free_r>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4605      	mov	r5, r0
 8001144:	2900      	cmp	r1, #0
 8001146:	d041      	beq.n	80011cc <_free_r+0x8c>
 8001148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800114c:	1f0c      	subs	r4, r1, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	bfb8      	it	lt
 8001152:	18e4      	addlt	r4, r4, r3
 8001154:	f000 f8e8 	bl	8001328 <__malloc_lock>
 8001158:	4a1d      	ldr	r2, [pc, #116]	@ (80011d0 <_free_r+0x90>)
 800115a:	6813      	ldr	r3, [r2, #0]
 800115c:	b933      	cbnz	r3, 800116c <_free_r+0x2c>
 800115e:	6063      	str	r3, [r4, #4]
 8001160:	6014      	str	r4, [r2, #0]
 8001162:	4628      	mov	r0, r5
 8001164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001168:	f000 b8e4 	b.w	8001334 <__malloc_unlock>
 800116c:	42a3      	cmp	r3, r4
 800116e:	d908      	bls.n	8001182 <_free_r+0x42>
 8001170:	6820      	ldr	r0, [r4, #0]
 8001172:	1821      	adds	r1, r4, r0
 8001174:	428b      	cmp	r3, r1
 8001176:	bf01      	itttt	eq
 8001178:	6819      	ldreq	r1, [r3, #0]
 800117a:	685b      	ldreq	r3, [r3, #4]
 800117c:	1809      	addeq	r1, r1, r0
 800117e:	6021      	streq	r1, [r4, #0]
 8001180:	e7ed      	b.n	800115e <_free_r+0x1e>
 8001182:	461a      	mov	r2, r3
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	b10b      	cbz	r3, 800118c <_free_r+0x4c>
 8001188:	42a3      	cmp	r3, r4
 800118a:	d9fa      	bls.n	8001182 <_free_r+0x42>
 800118c:	6811      	ldr	r1, [r2, #0]
 800118e:	1850      	adds	r0, r2, r1
 8001190:	42a0      	cmp	r0, r4
 8001192:	d10b      	bne.n	80011ac <_free_r+0x6c>
 8001194:	6820      	ldr	r0, [r4, #0]
 8001196:	4401      	add	r1, r0
 8001198:	1850      	adds	r0, r2, r1
 800119a:	4283      	cmp	r3, r0
 800119c:	6011      	str	r1, [r2, #0]
 800119e:	d1e0      	bne.n	8001162 <_free_r+0x22>
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	6053      	str	r3, [r2, #4]
 80011a6:	4408      	add	r0, r1
 80011a8:	6010      	str	r0, [r2, #0]
 80011aa:	e7da      	b.n	8001162 <_free_r+0x22>
 80011ac:	d902      	bls.n	80011b4 <_free_r+0x74>
 80011ae:	230c      	movs	r3, #12
 80011b0:	602b      	str	r3, [r5, #0]
 80011b2:	e7d6      	b.n	8001162 <_free_r+0x22>
 80011b4:	6820      	ldr	r0, [r4, #0]
 80011b6:	1821      	adds	r1, r4, r0
 80011b8:	428b      	cmp	r3, r1
 80011ba:	bf04      	itt	eq
 80011bc:	6819      	ldreq	r1, [r3, #0]
 80011be:	685b      	ldreq	r3, [r3, #4]
 80011c0:	6063      	str	r3, [r4, #4]
 80011c2:	bf04      	itt	eq
 80011c4:	1809      	addeq	r1, r1, r0
 80011c6:	6021      	streq	r1, [r4, #0]
 80011c8:	6054      	str	r4, [r2, #4]
 80011ca:	e7ca      	b.n	8001162 <_free_r+0x22>
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop
 80011d0:	200004fc 	.word	0x200004fc

080011d4 <malloc>:
 80011d4:	4b02      	ldr	r3, [pc, #8]	@ (80011e0 <malloc+0xc>)
 80011d6:	4601      	mov	r1, r0
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	f000 b825 	b.w	8001228 <_malloc_r>
 80011de:	bf00      	nop
 80011e0:	2000013c 	.word	0x2000013c

080011e4 <sbrk_aligned>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	4e0f      	ldr	r6, [pc, #60]	@ (8001224 <sbrk_aligned+0x40>)
 80011e8:	460c      	mov	r4, r1
 80011ea:	6831      	ldr	r1, [r6, #0]
 80011ec:	4605      	mov	r5, r0
 80011ee:	b911      	cbnz	r1, 80011f6 <sbrk_aligned+0x12>
 80011f0:	f000 f964 	bl	80014bc <_sbrk_r>
 80011f4:	6030      	str	r0, [r6, #0]
 80011f6:	4621      	mov	r1, r4
 80011f8:	4628      	mov	r0, r5
 80011fa:	f000 f95f 	bl	80014bc <_sbrk_r>
 80011fe:	1c43      	adds	r3, r0, #1
 8001200:	d103      	bne.n	800120a <sbrk_aligned+0x26>
 8001202:	f04f 34ff 	mov.w	r4, #4294967295
 8001206:	4620      	mov	r0, r4
 8001208:	bd70      	pop	{r4, r5, r6, pc}
 800120a:	1cc4      	adds	r4, r0, #3
 800120c:	f024 0403 	bic.w	r4, r4, #3
 8001210:	42a0      	cmp	r0, r4
 8001212:	d0f8      	beq.n	8001206 <sbrk_aligned+0x22>
 8001214:	1a21      	subs	r1, r4, r0
 8001216:	4628      	mov	r0, r5
 8001218:	f000 f950 	bl	80014bc <_sbrk_r>
 800121c:	3001      	adds	r0, #1
 800121e:	d1f2      	bne.n	8001206 <sbrk_aligned+0x22>
 8001220:	e7ef      	b.n	8001202 <sbrk_aligned+0x1e>
 8001222:	bf00      	nop
 8001224:	200004f8 	.word	0x200004f8

08001228 <_malloc_r>:
 8001228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800122c:	1ccd      	adds	r5, r1, #3
 800122e:	f025 0503 	bic.w	r5, r5, #3
 8001232:	3508      	adds	r5, #8
 8001234:	2d0c      	cmp	r5, #12
 8001236:	bf38      	it	cc
 8001238:	250c      	movcc	r5, #12
 800123a:	2d00      	cmp	r5, #0
 800123c:	4606      	mov	r6, r0
 800123e:	db01      	blt.n	8001244 <_malloc_r+0x1c>
 8001240:	42a9      	cmp	r1, r5
 8001242:	d904      	bls.n	800124e <_malloc_r+0x26>
 8001244:	230c      	movs	r3, #12
 8001246:	6033      	str	r3, [r6, #0]
 8001248:	2000      	movs	r0, #0
 800124a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800124e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001324 <_malloc_r+0xfc>
 8001252:	f000 f869 	bl	8001328 <__malloc_lock>
 8001256:	f8d8 3000 	ldr.w	r3, [r8]
 800125a:	461c      	mov	r4, r3
 800125c:	bb44      	cbnz	r4, 80012b0 <_malloc_r+0x88>
 800125e:	4629      	mov	r1, r5
 8001260:	4630      	mov	r0, r6
 8001262:	f7ff ffbf 	bl	80011e4 <sbrk_aligned>
 8001266:	1c43      	adds	r3, r0, #1
 8001268:	4604      	mov	r4, r0
 800126a:	d158      	bne.n	800131e <_malloc_r+0xf6>
 800126c:	f8d8 4000 	ldr.w	r4, [r8]
 8001270:	4627      	mov	r7, r4
 8001272:	2f00      	cmp	r7, #0
 8001274:	d143      	bne.n	80012fe <_malloc_r+0xd6>
 8001276:	2c00      	cmp	r4, #0
 8001278:	d04b      	beq.n	8001312 <_malloc_r+0xea>
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	4639      	mov	r1, r7
 800127e:	4630      	mov	r0, r6
 8001280:	eb04 0903 	add.w	r9, r4, r3
 8001284:	f000 f91a 	bl	80014bc <_sbrk_r>
 8001288:	4581      	cmp	r9, r0
 800128a:	d142      	bne.n	8001312 <_malloc_r+0xea>
 800128c:	6821      	ldr	r1, [r4, #0]
 800128e:	1a6d      	subs	r5, r5, r1
 8001290:	4629      	mov	r1, r5
 8001292:	4630      	mov	r0, r6
 8001294:	f7ff ffa6 	bl	80011e4 <sbrk_aligned>
 8001298:	3001      	adds	r0, #1
 800129a:	d03a      	beq.n	8001312 <_malloc_r+0xea>
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	442b      	add	r3, r5
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	f8d8 3000 	ldr.w	r3, [r8]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	bb62      	cbnz	r2, 8001304 <_malloc_r+0xdc>
 80012aa:	f8c8 7000 	str.w	r7, [r8]
 80012ae:	e00f      	b.n	80012d0 <_malloc_r+0xa8>
 80012b0:	6822      	ldr	r2, [r4, #0]
 80012b2:	1b52      	subs	r2, r2, r5
 80012b4:	d420      	bmi.n	80012f8 <_malloc_r+0xd0>
 80012b6:	2a0b      	cmp	r2, #11
 80012b8:	d917      	bls.n	80012ea <_malloc_r+0xc2>
 80012ba:	1961      	adds	r1, r4, r5
 80012bc:	42a3      	cmp	r3, r4
 80012be:	6025      	str	r5, [r4, #0]
 80012c0:	bf18      	it	ne
 80012c2:	6059      	strne	r1, [r3, #4]
 80012c4:	6863      	ldr	r3, [r4, #4]
 80012c6:	bf08      	it	eq
 80012c8:	f8c8 1000 	streq.w	r1, [r8]
 80012cc:	5162      	str	r2, [r4, r5]
 80012ce:	604b      	str	r3, [r1, #4]
 80012d0:	4630      	mov	r0, r6
 80012d2:	f000 f82f 	bl	8001334 <__malloc_unlock>
 80012d6:	f104 000b 	add.w	r0, r4, #11
 80012da:	1d23      	adds	r3, r4, #4
 80012dc:	f020 0007 	bic.w	r0, r0, #7
 80012e0:	1ac2      	subs	r2, r0, r3
 80012e2:	bf1c      	itt	ne
 80012e4:	1a1b      	subne	r3, r3, r0
 80012e6:	50a3      	strne	r3, [r4, r2]
 80012e8:	e7af      	b.n	800124a <_malloc_r+0x22>
 80012ea:	6862      	ldr	r2, [r4, #4]
 80012ec:	42a3      	cmp	r3, r4
 80012ee:	bf0c      	ite	eq
 80012f0:	f8c8 2000 	streq.w	r2, [r8]
 80012f4:	605a      	strne	r2, [r3, #4]
 80012f6:	e7eb      	b.n	80012d0 <_malloc_r+0xa8>
 80012f8:	4623      	mov	r3, r4
 80012fa:	6864      	ldr	r4, [r4, #4]
 80012fc:	e7ae      	b.n	800125c <_malloc_r+0x34>
 80012fe:	463c      	mov	r4, r7
 8001300:	687f      	ldr	r7, [r7, #4]
 8001302:	e7b6      	b.n	8001272 <_malloc_r+0x4a>
 8001304:	461a      	mov	r2, r3
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	42a3      	cmp	r3, r4
 800130a:	d1fb      	bne.n	8001304 <_malloc_r+0xdc>
 800130c:	2300      	movs	r3, #0
 800130e:	6053      	str	r3, [r2, #4]
 8001310:	e7de      	b.n	80012d0 <_malloc_r+0xa8>
 8001312:	230c      	movs	r3, #12
 8001314:	6033      	str	r3, [r6, #0]
 8001316:	4630      	mov	r0, r6
 8001318:	f000 f80c 	bl	8001334 <__malloc_unlock>
 800131c:	e794      	b.n	8001248 <_malloc_r+0x20>
 800131e:	6005      	str	r5, [r0, #0]
 8001320:	e7d6      	b.n	80012d0 <_malloc_r+0xa8>
 8001322:	bf00      	nop
 8001324:	200004fc 	.word	0x200004fc

08001328 <__malloc_lock>:
 8001328:	4801      	ldr	r0, [pc, #4]	@ (8001330 <__malloc_lock+0x8>)
 800132a:	f7ff bee8 	b.w	80010fe <__retarget_lock_acquire_recursive>
 800132e:	bf00      	nop
 8001330:	200004f4 	.word	0x200004f4

08001334 <__malloc_unlock>:
 8001334:	4801      	ldr	r0, [pc, #4]	@ (800133c <__malloc_unlock+0x8>)
 8001336:	f7ff bee3 	b.w	8001100 <__retarget_lock_release_recursive>
 800133a:	bf00      	nop
 800133c:	200004f4 	.word	0x200004f4

08001340 <__sflush_r>:
 8001340:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001348:	0716      	lsls	r6, r2, #28
 800134a:	4605      	mov	r5, r0
 800134c:	460c      	mov	r4, r1
 800134e:	d454      	bmi.n	80013fa <__sflush_r+0xba>
 8001350:	684b      	ldr	r3, [r1, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	dc02      	bgt.n	800135c <__sflush_r+0x1c>
 8001356:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001358:	2b00      	cmp	r3, #0
 800135a:	dd48      	ble.n	80013ee <__sflush_r+0xae>
 800135c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800135e:	2e00      	cmp	r6, #0
 8001360:	d045      	beq.n	80013ee <__sflush_r+0xae>
 8001362:	2300      	movs	r3, #0
 8001364:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001368:	682f      	ldr	r7, [r5, #0]
 800136a:	6a21      	ldr	r1, [r4, #32]
 800136c:	602b      	str	r3, [r5, #0]
 800136e:	d030      	beq.n	80013d2 <__sflush_r+0x92>
 8001370:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001372:	89a3      	ldrh	r3, [r4, #12]
 8001374:	0759      	lsls	r1, r3, #29
 8001376:	d505      	bpl.n	8001384 <__sflush_r+0x44>
 8001378:	6863      	ldr	r3, [r4, #4]
 800137a:	1ad2      	subs	r2, r2, r3
 800137c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800137e:	b10b      	cbz	r3, 8001384 <__sflush_r+0x44>
 8001380:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001382:	1ad2      	subs	r2, r2, r3
 8001384:	2300      	movs	r3, #0
 8001386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001388:	6a21      	ldr	r1, [r4, #32]
 800138a:	4628      	mov	r0, r5
 800138c:	47b0      	blx	r6
 800138e:	1c43      	adds	r3, r0, #1
 8001390:	89a3      	ldrh	r3, [r4, #12]
 8001392:	d106      	bne.n	80013a2 <__sflush_r+0x62>
 8001394:	6829      	ldr	r1, [r5, #0]
 8001396:	291d      	cmp	r1, #29
 8001398:	d82b      	bhi.n	80013f2 <__sflush_r+0xb2>
 800139a:	4a2a      	ldr	r2, [pc, #168]	@ (8001444 <__sflush_r+0x104>)
 800139c:	410a      	asrs	r2, r1
 800139e:	07d6      	lsls	r6, r2, #31
 80013a0:	d427      	bmi.n	80013f2 <__sflush_r+0xb2>
 80013a2:	2200      	movs	r2, #0
 80013a4:	6062      	str	r2, [r4, #4]
 80013a6:	04d9      	lsls	r1, r3, #19
 80013a8:	6922      	ldr	r2, [r4, #16]
 80013aa:	6022      	str	r2, [r4, #0]
 80013ac:	d504      	bpl.n	80013b8 <__sflush_r+0x78>
 80013ae:	1c42      	adds	r2, r0, #1
 80013b0:	d101      	bne.n	80013b6 <__sflush_r+0x76>
 80013b2:	682b      	ldr	r3, [r5, #0]
 80013b4:	b903      	cbnz	r3, 80013b8 <__sflush_r+0x78>
 80013b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80013b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013ba:	602f      	str	r7, [r5, #0]
 80013bc:	b1b9      	cbz	r1, 80013ee <__sflush_r+0xae>
 80013be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013c2:	4299      	cmp	r1, r3
 80013c4:	d002      	beq.n	80013cc <__sflush_r+0x8c>
 80013c6:	4628      	mov	r0, r5
 80013c8:	f7ff feba 	bl	8001140 <_free_r>
 80013cc:	2300      	movs	r3, #0
 80013ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80013d0:	e00d      	b.n	80013ee <__sflush_r+0xae>
 80013d2:	2301      	movs	r3, #1
 80013d4:	4628      	mov	r0, r5
 80013d6:	47b0      	blx	r6
 80013d8:	4602      	mov	r2, r0
 80013da:	1c50      	adds	r0, r2, #1
 80013dc:	d1c9      	bne.n	8001372 <__sflush_r+0x32>
 80013de:	682b      	ldr	r3, [r5, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0c6      	beq.n	8001372 <__sflush_r+0x32>
 80013e4:	2b1d      	cmp	r3, #29
 80013e6:	d001      	beq.n	80013ec <__sflush_r+0xac>
 80013e8:	2b16      	cmp	r3, #22
 80013ea:	d11e      	bne.n	800142a <__sflush_r+0xea>
 80013ec:	602f      	str	r7, [r5, #0]
 80013ee:	2000      	movs	r0, #0
 80013f0:	e022      	b.n	8001438 <__sflush_r+0xf8>
 80013f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	e01b      	b.n	8001432 <__sflush_r+0xf2>
 80013fa:	690f      	ldr	r7, [r1, #16]
 80013fc:	2f00      	cmp	r7, #0
 80013fe:	d0f6      	beq.n	80013ee <__sflush_r+0xae>
 8001400:	0793      	lsls	r3, r2, #30
 8001402:	680e      	ldr	r6, [r1, #0]
 8001404:	bf08      	it	eq
 8001406:	694b      	ldreq	r3, [r1, #20]
 8001408:	600f      	str	r7, [r1, #0]
 800140a:	bf18      	it	ne
 800140c:	2300      	movne	r3, #0
 800140e:	eba6 0807 	sub.w	r8, r6, r7
 8001412:	608b      	str	r3, [r1, #8]
 8001414:	f1b8 0f00 	cmp.w	r8, #0
 8001418:	dde9      	ble.n	80013ee <__sflush_r+0xae>
 800141a:	6a21      	ldr	r1, [r4, #32]
 800141c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800141e:	4643      	mov	r3, r8
 8001420:	463a      	mov	r2, r7
 8001422:	4628      	mov	r0, r5
 8001424:	47b0      	blx	r6
 8001426:	2800      	cmp	r0, #0
 8001428:	dc08      	bgt.n	800143c <__sflush_r+0xfc>
 800142a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800142e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001432:	81a3      	strh	r3, [r4, #12]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800143c:	4407      	add	r7, r0
 800143e:	eba8 0800 	sub.w	r8, r8, r0
 8001442:	e7e7      	b.n	8001414 <__sflush_r+0xd4>
 8001444:	dfbffffe 	.word	0xdfbffffe

08001448 <_fflush_r>:
 8001448:	b538      	push	{r3, r4, r5, lr}
 800144a:	690b      	ldr	r3, [r1, #16]
 800144c:	4605      	mov	r5, r0
 800144e:	460c      	mov	r4, r1
 8001450:	b913      	cbnz	r3, 8001458 <_fflush_r+0x10>
 8001452:	2500      	movs	r5, #0
 8001454:	4628      	mov	r0, r5
 8001456:	bd38      	pop	{r3, r4, r5, pc}
 8001458:	b118      	cbz	r0, 8001462 <_fflush_r+0x1a>
 800145a:	6a03      	ldr	r3, [r0, #32]
 800145c:	b90b      	cbnz	r3, 8001462 <_fflush_r+0x1a>
 800145e:	f7ff fced 	bl	8000e3c <__sinit>
 8001462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f3      	beq.n	8001452 <_fflush_r+0xa>
 800146a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800146c:	07d0      	lsls	r0, r2, #31
 800146e:	d404      	bmi.n	800147a <_fflush_r+0x32>
 8001470:	0599      	lsls	r1, r3, #22
 8001472:	d402      	bmi.n	800147a <_fflush_r+0x32>
 8001474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001476:	f7ff fe42 	bl	80010fe <__retarget_lock_acquire_recursive>
 800147a:	4628      	mov	r0, r5
 800147c:	4621      	mov	r1, r4
 800147e:	f7ff ff5f 	bl	8001340 <__sflush_r>
 8001482:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001484:	07da      	lsls	r2, r3, #31
 8001486:	4605      	mov	r5, r0
 8001488:	d4e4      	bmi.n	8001454 <_fflush_r+0xc>
 800148a:	89a3      	ldrh	r3, [r4, #12]
 800148c:	059b      	lsls	r3, r3, #22
 800148e:	d4e1      	bmi.n	8001454 <_fflush_r+0xc>
 8001490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001492:	f7ff fe35 	bl	8001100 <__retarget_lock_release_recursive>
 8001496:	e7dd      	b.n	8001454 <_fflush_r+0xc>

08001498 <fiprintf>:
 8001498:	b40e      	push	{r1, r2, r3}
 800149a:	b503      	push	{r0, r1, lr}
 800149c:	4601      	mov	r1, r0
 800149e:	ab03      	add	r3, sp, #12
 80014a0:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <fiprintf+0x20>)
 80014a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80014a6:	6800      	ldr	r0, [r0, #0]
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	f000 f847 	bl	800153c <_vfiprintf_r>
 80014ae:	b002      	add	sp, #8
 80014b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80014b4:	b003      	add	sp, #12
 80014b6:	4770      	bx	lr
 80014b8:	2000013c 	.word	0x2000013c

080014bc <_sbrk_r>:
 80014bc:	b538      	push	{r3, r4, r5, lr}
 80014be:	4d06      	ldr	r5, [pc, #24]	@ (80014d8 <_sbrk_r+0x1c>)
 80014c0:	2300      	movs	r3, #0
 80014c2:	4604      	mov	r4, r0
 80014c4:	4608      	mov	r0, r1
 80014c6:	602b      	str	r3, [r5, #0]
 80014c8:	f7ff fb48 	bl	8000b5c <_sbrk>
 80014cc:	1c43      	adds	r3, r0, #1
 80014ce:	d102      	bne.n	80014d6 <_sbrk_r+0x1a>
 80014d0:	682b      	ldr	r3, [r5, #0]
 80014d2:	b103      	cbz	r3, 80014d6 <_sbrk_r+0x1a>
 80014d4:	6023      	str	r3, [r4, #0]
 80014d6:	bd38      	pop	{r3, r4, r5, pc}
 80014d8:	200004f0 	.word	0x200004f0

080014dc <abort>:
 80014dc:	b508      	push	{r3, lr}
 80014de:	2006      	movs	r0, #6
 80014e0:	f000 fb8e 	bl	8001c00 <raise>
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff fac1 	bl	8000a6c <_exit>

080014ea <__sfputc_r>:
 80014ea:	6893      	ldr	r3, [r2, #8]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	b410      	push	{r4}
 80014f2:	6093      	str	r3, [r2, #8]
 80014f4:	da08      	bge.n	8001508 <__sfputc_r+0x1e>
 80014f6:	6994      	ldr	r4, [r2, #24]
 80014f8:	42a3      	cmp	r3, r4
 80014fa:	db01      	blt.n	8001500 <__sfputc_r+0x16>
 80014fc:	290a      	cmp	r1, #10
 80014fe:	d103      	bne.n	8001508 <__sfputc_r+0x1e>
 8001500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001504:	f000 bac0 	b.w	8001a88 <__swbuf_r>
 8001508:	6813      	ldr	r3, [r2, #0]
 800150a:	1c58      	adds	r0, r3, #1
 800150c:	6010      	str	r0, [r2, #0]
 800150e:	7019      	strb	r1, [r3, #0]
 8001510:	4608      	mov	r0, r1
 8001512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001516:	4770      	bx	lr

08001518 <__sfputs_r>:
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151a:	4606      	mov	r6, r0
 800151c:	460f      	mov	r7, r1
 800151e:	4614      	mov	r4, r2
 8001520:	18d5      	adds	r5, r2, r3
 8001522:	42ac      	cmp	r4, r5
 8001524:	d101      	bne.n	800152a <__sfputs_r+0x12>
 8001526:	2000      	movs	r0, #0
 8001528:	e007      	b.n	800153a <__sfputs_r+0x22>
 800152a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800152e:	463a      	mov	r2, r7
 8001530:	4630      	mov	r0, r6
 8001532:	f7ff ffda 	bl	80014ea <__sfputc_r>
 8001536:	1c43      	adds	r3, r0, #1
 8001538:	d1f3      	bne.n	8001522 <__sfputs_r+0xa>
 800153a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800153c <_vfiprintf_r>:
 800153c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001540:	460d      	mov	r5, r1
 8001542:	b09d      	sub	sp, #116	@ 0x74
 8001544:	4614      	mov	r4, r2
 8001546:	4698      	mov	r8, r3
 8001548:	4606      	mov	r6, r0
 800154a:	b118      	cbz	r0, 8001554 <_vfiprintf_r+0x18>
 800154c:	6a03      	ldr	r3, [r0, #32]
 800154e:	b90b      	cbnz	r3, 8001554 <_vfiprintf_r+0x18>
 8001550:	f7ff fc74 	bl	8000e3c <__sinit>
 8001554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001556:	07d9      	lsls	r1, r3, #31
 8001558:	d405      	bmi.n	8001566 <_vfiprintf_r+0x2a>
 800155a:	89ab      	ldrh	r3, [r5, #12]
 800155c:	059a      	lsls	r2, r3, #22
 800155e:	d402      	bmi.n	8001566 <_vfiprintf_r+0x2a>
 8001560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001562:	f7ff fdcc 	bl	80010fe <__retarget_lock_acquire_recursive>
 8001566:	89ab      	ldrh	r3, [r5, #12]
 8001568:	071b      	lsls	r3, r3, #28
 800156a:	d501      	bpl.n	8001570 <_vfiprintf_r+0x34>
 800156c:	692b      	ldr	r3, [r5, #16]
 800156e:	b99b      	cbnz	r3, 8001598 <_vfiprintf_r+0x5c>
 8001570:	4629      	mov	r1, r5
 8001572:	4630      	mov	r0, r6
 8001574:	f000 fac6 	bl	8001b04 <__swsetup_r>
 8001578:	b170      	cbz	r0, 8001598 <_vfiprintf_r+0x5c>
 800157a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800157c:	07dc      	lsls	r4, r3, #31
 800157e:	d504      	bpl.n	800158a <_vfiprintf_r+0x4e>
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	b01d      	add	sp, #116	@ 0x74
 8001586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800158a:	89ab      	ldrh	r3, [r5, #12]
 800158c:	0598      	lsls	r0, r3, #22
 800158e:	d4f7      	bmi.n	8001580 <_vfiprintf_r+0x44>
 8001590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001592:	f7ff fdb5 	bl	8001100 <__retarget_lock_release_recursive>
 8001596:	e7f3      	b.n	8001580 <_vfiprintf_r+0x44>
 8001598:	2300      	movs	r3, #0
 800159a:	9309      	str	r3, [sp, #36]	@ 0x24
 800159c:	2320      	movs	r3, #32
 800159e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80015a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80015a6:	2330      	movs	r3, #48	@ 0x30
 80015a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001758 <_vfiprintf_r+0x21c>
 80015ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80015b0:	f04f 0901 	mov.w	r9, #1
 80015b4:	4623      	mov	r3, r4
 80015b6:	469a      	mov	sl, r3
 80015b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015bc:	b10a      	cbz	r2, 80015c2 <_vfiprintf_r+0x86>
 80015be:	2a25      	cmp	r2, #37	@ 0x25
 80015c0:	d1f9      	bne.n	80015b6 <_vfiprintf_r+0x7a>
 80015c2:	ebba 0b04 	subs.w	fp, sl, r4
 80015c6:	d00b      	beq.n	80015e0 <_vfiprintf_r+0xa4>
 80015c8:	465b      	mov	r3, fp
 80015ca:	4622      	mov	r2, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	4630      	mov	r0, r6
 80015d0:	f7ff ffa2 	bl	8001518 <__sfputs_r>
 80015d4:	3001      	adds	r0, #1
 80015d6:	f000 80a7 	beq.w	8001728 <_vfiprintf_r+0x1ec>
 80015da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80015dc:	445a      	add	r2, fp
 80015de:	9209      	str	r2, [sp, #36]	@ 0x24
 80015e0:	f89a 3000 	ldrb.w	r3, [sl]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 809f 	beq.w	8001728 <_vfiprintf_r+0x1ec>
 80015ea:	2300      	movs	r3, #0
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015f4:	f10a 0a01 	add.w	sl, sl, #1
 80015f8:	9304      	str	r3, [sp, #16]
 80015fa:	9307      	str	r3, [sp, #28]
 80015fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001600:	931a      	str	r3, [sp, #104]	@ 0x68
 8001602:	4654      	mov	r4, sl
 8001604:	2205      	movs	r2, #5
 8001606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800160a:	4853      	ldr	r0, [pc, #332]	@ (8001758 <_vfiprintf_r+0x21c>)
 800160c:	f7fe fe00 	bl	8000210 <memchr>
 8001610:	9a04      	ldr	r2, [sp, #16]
 8001612:	b9d8      	cbnz	r0, 800164c <_vfiprintf_r+0x110>
 8001614:	06d1      	lsls	r1, r2, #27
 8001616:	bf44      	itt	mi
 8001618:	2320      	movmi	r3, #32
 800161a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800161e:	0713      	lsls	r3, r2, #28
 8001620:	bf44      	itt	mi
 8001622:	232b      	movmi	r3, #43	@ 0x2b
 8001624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001628:	f89a 3000 	ldrb.w	r3, [sl]
 800162c:	2b2a      	cmp	r3, #42	@ 0x2a
 800162e:	d015      	beq.n	800165c <_vfiprintf_r+0x120>
 8001630:	9a07      	ldr	r2, [sp, #28]
 8001632:	4654      	mov	r4, sl
 8001634:	2000      	movs	r0, #0
 8001636:	f04f 0c0a 	mov.w	ip, #10
 800163a:	4621      	mov	r1, r4
 800163c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001640:	3b30      	subs	r3, #48	@ 0x30
 8001642:	2b09      	cmp	r3, #9
 8001644:	d94b      	bls.n	80016de <_vfiprintf_r+0x1a2>
 8001646:	b1b0      	cbz	r0, 8001676 <_vfiprintf_r+0x13a>
 8001648:	9207      	str	r2, [sp, #28]
 800164a:	e014      	b.n	8001676 <_vfiprintf_r+0x13a>
 800164c:	eba0 0308 	sub.w	r3, r0, r8
 8001650:	fa09 f303 	lsl.w	r3, r9, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	9304      	str	r3, [sp, #16]
 8001658:	46a2      	mov	sl, r4
 800165a:	e7d2      	b.n	8001602 <_vfiprintf_r+0xc6>
 800165c:	9b03      	ldr	r3, [sp, #12]
 800165e:	1d19      	adds	r1, r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	9103      	str	r1, [sp, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	bfbb      	ittet	lt
 8001668:	425b      	neglt	r3, r3
 800166a:	f042 0202 	orrlt.w	r2, r2, #2
 800166e:	9307      	strge	r3, [sp, #28]
 8001670:	9307      	strlt	r3, [sp, #28]
 8001672:	bfb8      	it	lt
 8001674:	9204      	strlt	r2, [sp, #16]
 8001676:	7823      	ldrb	r3, [r4, #0]
 8001678:	2b2e      	cmp	r3, #46	@ 0x2e
 800167a:	d10a      	bne.n	8001692 <_vfiprintf_r+0x156>
 800167c:	7863      	ldrb	r3, [r4, #1]
 800167e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001680:	d132      	bne.n	80016e8 <_vfiprintf_r+0x1ac>
 8001682:	9b03      	ldr	r3, [sp, #12]
 8001684:	1d1a      	adds	r2, r3, #4
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	9203      	str	r2, [sp, #12]
 800168a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800168e:	3402      	adds	r4, #2
 8001690:	9305      	str	r3, [sp, #20]
 8001692:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001768 <_vfiprintf_r+0x22c>
 8001696:	7821      	ldrb	r1, [r4, #0]
 8001698:	2203      	movs	r2, #3
 800169a:	4650      	mov	r0, sl
 800169c:	f7fe fdb8 	bl	8000210 <memchr>
 80016a0:	b138      	cbz	r0, 80016b2 <_vfiprintf_r+0x176>
 80016a2:	9b04      	ldr	r3, [sp, #16]
 80016a4:	eba0 000a 	sub.w	r0, r0, sl
 80016a8:	2240      	movs	r2, #64	@ 0x40
 80016aa:	4082      	lsls	r2, r0
 80016ac:	4313      	orrs	r3, r2
 80016ae:	3401      	adds	r4, #1
 80016b0:	9304      	str	r3, [sp, #16]
 80016b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016b6:	4829      	ldr	r0, [pc, #164]	@ (800175c <_vfiprintf_r+0x220>)
 80016b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80016bc:	2206      	movs	r2, #6
 80016be:	f7fe fda7 	bl	8000210 <memchr>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	d03f      	beq.n	8001746 <_vfiprintf_r+0x20a>
 80016c6:	4b26      	ldr	r3, [pc, #152]	@ (8001760 <_vfiprintf_r+0x224>)
 80016c8:	bb1b      	cbnz	r3, 8001712 <_vfiprintf_r+0x1d6>
 80016ca:	9b03      	ldr	r3, [sp, #12]
 80016cc:	3307      	adds	r3, #7
 80016ce:	f023 0307 	bic.w	r3, r3, #7
 80016d2:	3308      	adds	r3, #8
 80016d4:	9303      	str	r3, [sp, #12]
 80016d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80016d8:	443b      	add	r3, r7
 80016da:	9309      	str	r3, [sp, #36]	@ 0x24
 80016dc:	e76a      	b.n	80015b4 <_vfiprintf_r+0x78>
 80016de:	fb0c 3202 	mla	r2, ip, r2, r3
 80016e2:	460c      	mov	r4, r1
 80016e4:	2001      	movs	r0, #1
 80016e6:	e7a8      	b.n	800163a <_vfiprintf_r+0xfe>
 80016e8:	2300      	movs	r3, #0
 80016ea:	3401      	adds	r4, #1
 80016ec:	9305      	str	r3, [sp, #20]
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 0c0a 	mov.w	ip, #10
 80016f4:	4620      	mov	r0, r4
 80016f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016fa:	3a30      	subs	r2, #48	@ 0x30
 80016fc:	2a09      	cmp	r2, #9
 80016fe:	d903      	bls.n	8001708 <_vfiprintf_r+0x1cc>
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0c6      	beq.n	8001692 <_vfiprintf_r+0x156>
 8001704:	9105      	str	r1, [sp, #20]
 8001706:	e7c4      	b.n	8001692 <_vfiprintf_r+0x156>
 8001708:	fb0c 2101 	mla	r1, ip, r1, r2
 800170c:	4604      	mov	r4, r0
 800170e:	2301      	movs	r3, #1
 8001710:	e7f0      	b.n	80016f4 <_vfiprintf_r+0x1b8>
 8001712:	ab03      	add	r3, sp, #12
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	462a      	mov	r2, r5
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <_vfiprintf_r+0x228>)
 800171a:	a904      	add	r1, sp, #16
 800171c:	4630      	mov	r0, r6
 800171e:	f3af 8000 	nop.w
 8001722:	4607      	mov	r7, r0
 8001724:	1c78      	adds	r0, r7, #1
 8001726:	d1d6      	bne.n	80016d6 <_vfiprintf_r+0x19a>
 8001728:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800172a:	07d9      	lsls	r1, r3, #31
 800172c:	d405      	bmi.n	800173a <_vfiprintf_r+0x1fe>
 800172e:	89ab      	ldrh	r3, [r5, #12]
 8001730:	059a      	lsls	r2, r3, #22
 8001732:	d402      	bmi.n	800173a <_vfiprintf_r+0x1fe>
 8001734:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001736:	f7ff fce3 	bl	8001100 <__retarget_lock_release_recursive>
 800173a:	89ab      	ldrh	r3, [r5, #12]
 800173c:	065b      	lsls	r3, r3, #25
 800173e:	f53f af1f 	bmi.w	8001580 <_vfiprintf_r+0x44>
 8001742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001744:	e71e      	b.n	8001584 <_vfiprintf_r+0x48>
 8001746:	ab03      	add	r3, sp, #12
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	462a      	mov	r2, r5
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <_vfiprintf_r+0x228>)
 800174e:	a904      	add	r1, sp, #16
 8001750:	4630      	mov	r0, r6
 8001752:	f000 f879 	bl	8001848 <_printf_i>
 8001756:	e7e4      	b.n	8001722 <_vfiprintf_r+0x1e6>
 8001758:	08001fd1 	.word	0x08001fd1
 800175c:	08001fdb 	.word	0x08001fdb
 8001760:	00000000 	.word	0x00000000
 8001764:	08001519 	.word	0x08001519
 8001768:	08001fd7 	.word	0x08001fd7

0800176c <_printf_common>:
 800176c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001770:	4616      	mov	r6, r2
 8001772:	4698      	mov	r8, r3
 8001774:	688a      	ldr	r2, [r1, #8]
 8001776:	690b      	ldr	r3, [r1, #16]
 8001778:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800177c:	4293      	cmp	r3, r2
 800177e:	bfb8      	it	lt
 8001780:	4613      	movlt	r3, r2
 8001782:	6033      	str	r3, [r6, #0]
 8001784:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001788:	4607      	mov	r7, r0
 800178a:	460c      	mov	r4, r1
 800178c:	b10a      	cbz	r2, 8001792 <_printf_common+0x26>
 800178e:	3301      	adds	r3, #1
 8001790:	6033      	str	r3, [r6, #0]
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	0699      	lsls	r1, r3, #26
 8001796:	bf42      	ittt	mi
 8001798:	6833      	ldrmi	r3, [r6, #0]
 800179a:	3302      	addmi	r3, #2
 800179c:	6033      	strmi	r3, [r6, #0]
 800179e:	6825      	ldr	r5, [r4, #0]
 80017a0:	f015 0506 	ands.w	r5, r5, #6
 80017a4:	d106      	bne.n	80017b4 <_printf_common+0x48>
 80017a6:	f104 0a19 	add.w	sl, r4, #25
 80017aa:	68e3      	ldr	r3, [r4, #12]
 80017ac:	6832      	ldr	r2, [r6, #0]
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	42ab      	cmp	r3, r5
 80017b2:	dc26      	bgt.n	8001802 <_printf_common+0x96>
 80017b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80017b8:	6822      	ldr	r2, [r4, #0]
 80017ba:	3b00      	subs	r3, #0
 80017bc:	bf18      	it	ne
 80017be:	2301      	movne	r3, #1
 80017c0:	0692      	lsls	r2, r2, #26
 80017c2:	d42b      	bmi.n	800181c <_printf_common+0xb0>
 80017c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80017c8:	4641      	mov	r1, r8
 80017ca:	4638      	mov	r0, r7
 80017cc:	47c8      	blx	r9
 80017ce:	3001      	adds	r0, #1
 80017d0:	d01e      	beq.n	8001810 <_printf_common+0xa4>
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	6922      	ldr	r2, [r4, #16]
 80017d6:	f003 0306 	and.w	r3, r3, #6
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf02      	ittt	eq
 80017de:	68e5      	ldreq	r5, [r4, #12]
 80017e0:	6833      	ldreq	r3, [r6, #0]
 80017e2:	1aed      	subeq	r5, r5, r3
 80017e4:	68a3      	ldr	r3, [r4, #8]
 80017e6:	bf0c      	ite	eq
 80017e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017ec:	2500      	movne	r5, #0
 80017ee:	4293      	cmp	r3, r2
 80017f0:	bfc4      	itt	gt
 80017f2:	1a9b      	subgt	r3, r3, r2
 80017f4:	18ed      	addgt	r5, r5, r3
 80017f6:	2600      	movs	r6, #0
 80017f8:	341a      	adds	r4, #26
 80017fa:	42b5      	cmp	r5, r6
 80017fc:	d11a      	bne.n	8001834 <_printf_common+0xc8>
 80017fe:	2000      	movs	r0, #0
 8001800:	e008      	b.n	8001814 <_printf_common+0xa8>
 8001802:	2301      	movs	r3, #1
 8001804:	4652      	mov	r2, sl
 8001806:	4641      	mov	r1, r8
 8001808:	4638      	mov	r0, r7
 800180a:	47c8      	blx	r9
 800180c:	3001      	adds	r0, #1
 800180e:	d103      	bne.n	8001818 <_printf_common+0xac>
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001818:	3501      	adds	r5, #1
 800181a:	e7c6      	b.n	80017aa <_printf_common+0x3e>
 800181c:	18e1      	adds	r1, r4, r3
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	2030      	movs	r0, #48	@ 0x30
 8001822:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001826:	4422      	add	r2, r4
 8001828:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800182c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001830:	3302      	adds	r3, #2
 8001832:	e7c7      	b.n	80017c4 <_printf_common+0x58>
 8001834:	2301      	movs	r3, #1
 8001836:	4622      	mov	r2, r4
 8001838:	4641      	mov	r1, r8
 800183a:	4638      	mov	r0, r7
 800183c:	47c8      	blx	r9
 800183e:	3001      	adds	r0, #1
 8001840:	d0e6      	beq.n	8001810 <_printf_common+0xa4>
 8001842:	3601      	adds	r6, #1
 8001844:	e7d9      	b.n	80017fa <_printf_common+0x8e>
	...

08001848 <_printf_i>:
 8001848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800184c:	7e0f      	ldrb	r7, [r1, #24]
 800184e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001850:	2f78      	cmp	r7, #120	@ 0x78
 8001852:	4691      	mov	r9, r2
 8001854:	4680      	mov	r8, r0
 8001856:	460c      	mov	r4, r1
 8001858:	469a      	mov	sl, r3
 800185a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800185e:	d807      	bhi.n	8001870 <_printf_i+0x28>
 8001860:	2f62      	cmp	r7, #98	@ 0x62
 8001862:	d80a      	bhi.n	800187a <_printf_i+0x32>
 8001864:	2f00      	cmp	r7, #0
 8001866:	f000 80d2 	beq.w	8001a0e <_printf_i+0x1c6>
 800186a:	2f58      	cmp	r7, #88	@ 0x58
 800186c:	f000 80b9 	beq.w	80019e2 <_printf_i+0x19a>
 8001870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001874:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001878:	e03a      	b.n	80018f0 <_printf_i+0xa8>
 800187a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800187e:	2b15      	cmp	r3, #21
 8001880:	d8f6      	bhi.n	8001870 <_printf_i+0x28>
 8001882:	a101      	add	r1, pc, #4	@ (adr r1, 8001888 <_printf_i+0x40>)
 8001884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001888:	080018e1 	.word	0x080018e1
 800188c:	080018f5 	.word	0x080018f5
 8001890:	08001871 	.word	0x08001871
 8001894:	08001871 	.word	0x08001871
 8001898:	08001871 	.word	0x08001871
 800189c:	08001871 	.word	0x08001871
 80018a0:	080018f5 	.word	0x080018f5
 80018a4:	08001871 	.word	0x08001871
 80018a8:	08001871 	.word	0x08001871
 80018ac:	08001871 	.word	0x08001871
 80018b0:	08001871 	.word	0x08001871
 80018b4:	080019f5 	.word	0x080019f5
 80018b8:	0800191f 	.word	0x0800191f
 80018bc:	080019af 	.word	0x080019af
 80018c0:	08001871 	.word	0x08001871
 80018c4:	08001871 	.word	0x08001871
 80018c8:	08001a17 	.word	0x08001a17
 80018cc:	08001871 	.word	0x08001871
 80018d0:	0800191f 	.word	0x0800191f
 80018d4:	08001871 	.word	0x08001871
 80018d8:	08001871 	.word	0x08001871
 80018dc:	080019b7 	.word	0x080019b7
 80018e0:	6833      	ldr	r3, [r6, #0]
 80018e2:	1d1a      	adds	r2, r3, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6032      	str	r2, [r6, #0]
 80018e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80018ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80018f0:	2301      	movs	r3, #1
 80018f2:	e09d      	b.n	8001a30 <_printf_i+0x1e8>
 80018f4:	6833      	ldr	r3, [r6, #0]
 80018f6:	6820      	ldr	r0, [r4, #0]
 80018f8:	1d19      	adds	r1, r3, #4
 80018fa:	6031      	str	r1, [r6, #0]
 80018fc:	0606      	lsls	r6, r0, #24
 80018fe:	d501      	bpl.n	8001904 <_printf_i+0xbc>
 8001900:	681d      	ldr	r5, [r3, #0]
 8001902:	e003      	b.n	800190c <_printf_i+0xc4>
 8001904:	0645      	lsls	r5, r0, #25
 8001906:	d5fb      	bpl.n	8001900 <_printf_i+0xb8>
 8001908:	f9b3 5000 	ldrsh.w	r5, [r3]
 800190c:	2d00      	cmp	r5, #0
 800190e:	da03      	bge.n	8001918 <_printf_i+0xd0>
 8001910:	232d      	movs	r3, #45	@ 0x2d
 8001912:	426d      	negs	r5, r5
 8001914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001918:	4859      	ldr	r0, [pc, #356]	@ (8001a80 <_printf_i+0x238>)
 800191a:	230a      	movs	r3, #10
 800191c:	e011      	b.n	8001942 <_printf_i+0xfa>
 800191e:	6821      	ldr	r1, [r4, #0]
 8001920:	6833      	ldr	r3, [r6, #0]
 8001922:	0608      	lsls	r0, r1, #24
 8001924:	f853 5b04 	ldr.w	r5, [r3], #4
 8001928:	d402      	bmi.n	8001930 <_printf_i+0xe8>
 800192a:	0649      	lsls	r1, r1, #25
 800192c:	bf48      	it	mi
 800192e:	b2ad      	uxthmi	r5, r5
 8001930:	2f6f      	cmp	r7, #111	@ 0x6f
 8001932:	4853      	ldr	r0, [pc, #332]	@ (8001a80 <_printf_i+0x238>)
 8001934:	6033      	str	r3, [r6, #0]
 8001936:	bf14      	ite	ne
 8001938:	230a      	movne	r3, #10
 800193a:	2308      	moveq	r3, #8
 800193c:	2100      	movs	r1, #0
 800193e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001942:	6866      	ldr	r6, [r4, #4]
 8001944:	60a6      	str	r6, [r4, #8]
 8001946:	2e00      	cmp	r6, #0
 8001948:	bfa2      	ittt	ge
 800194a:	6821      	ldrge	r1, [r4, #0]
 800194c:	f021 0104 	bicge.w	r1, r1, #4
 8001950:	6021      	strge	r1, [r4, #0]
 8001952:	b90d      	cbnz	r5, 8001958 <_printf_i+0x110>
 8001954:	2e00      	cmp	r6, #0
 8001956:	d04b      	beq.n	80019f0 <_printf_i+0x1a8>
 8001958:	4616      	mov	r6, r2
 800195a:	fbb5 f1f3 	udiv	r1, r5, r3
 800195e:	fb03 5711 	mls	r7, r3, r1, r5
 8001962:	5dc7      	ldrb	r7, [r0, r7]
 8001964:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001968:	462f      	mov	r7, r5
 800196a:	42bb      	cmp	r3, r7
 800196c:	460d      	mov	r5, r1
 800196e:	d9f4      	bls.n	800195a <_printf_i+0x112>
 8001970:	2b08      	cmp	r3, #8
 8001972:	d10b      	bne.n	800198c <_printf_i+0x144>
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	07df      	lsls	r7, r3, #31
 8001978:	d508      	bpl.n	800198c <_printf_i+0x144>
 800197a:	6923      	ldr	r3, [r4, #16]
 800197c:	6861      	ldr	r1, [r4, #4]
 800197e:	4299      	cmp	r1, r3
 8001980:	bfde      	ittt	le
 8001982:	2330      	movle	r3, #48	@ 0x30
 8001984:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001988:	f106 36ff 	addle.w	r6, r6, #4294967295
 800198c:	1b92      	subs	r2, r2, r6
 800198e:	6122      	str	r2, [r4, #16]
 8001990:	f8cd a000 	str.w	sl, [sp]
 8001994:	464b      	mov	r3, r9
 8001996:	aa03      	add	r2, sp, #12
 8001998:	4621      	mov	r1, r4
 800199a:	4640      	mov	r0, r8
 800199c:	f7ff fee6 	bl	800176c <_printf_common>
 80019a0:	3001      	adds	r0, #1
 80019a2:	d14a      	bne.n	8001a3a <_printf_i+0x1f2>
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	b004      	add	sp, #16
 80019aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	f043 0320 	orr.w	r3, r3, #32
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	4833      	ldr	r0, [pc, #204]	@ (8001a84 <_printf_i+0x23c>)
 80019b8:	2778      	movs	r7, #120	@ 0x78
 80019ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	6831      	ldr	r1, [r6, #0]
 80019c2:	061f      	lsls	r7, r3, #24
 80019c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80019c8:	d402      	bmi.n	80019d0 <_printf_i+0x188>
 80019ca:	065f      	lsls	r7, r3, #25
 80019cc:	bf48      	it	mi
 80019ce:	b2ad      	uxthmi	r5, r5
 80019d0:	6031      	str	r1, [r6, #0]
 80019d2:	07d9      	lsls	r1, r3, #31
 80019d4:	bf44      	itt	mi
 80019d6:	f043 0320 	orrmi.w	r3, r3, #32
 80019da:	6023      	strmi	r3, [r4, #0]
 80019dc:	b11d      	cbz	r5, 80019e6 <_printf_i+0x19e>
 80019de:	2310      	movs	r3, #16
 80019e0:	e7ac      	b.n	800193c <_printf_i+0xf4>
 80019e2:	4827      	ldr	r0, [pc, #156]	@ (8001a80 <_printf_i+0x238>)
 80019e4:	e7e9      	b.n	80019ba <_printf_i+0x172>
 80019e6:	6823      	ldr	r3, [r4, #0]
 80019e8:	f023 0320 	bic.w	r3, r3, #32
 80019ec:	6023      	str	r3, [r4, #0]
 80019ee:	e7f6      	b.n	80019de <_printf_i+0x196>
 80019f0:	4616      	mov	r6, r2
 80019f2:	e7bd      	b.n	8001970 <_printf_i+0x128>
 80019f4:	6833      	ldr	r3, [r6, #0]
 80019f6:	6825      	ldr	r5, [r4, #0]
 80019f8:	6961      	ldr	r1, [r4, #20]
 80019fa:	1d18      	adds	r0, r3, #4
 80019fc:	6030      	str	r0, [r6, #0]
 80019fe:	062e      	lsls	r6, r5, #24
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	d501      	bpl.n	8001a08 <_printf_i+0x1c0>
 8001a04:	6019      	str	r1, [r3, #0]
 8001a06:	e002      	b.n	8001a0e <_printf_i+0x1c6>
 8001a08:	0668      	lsls	r0, r5, #25
 8001a0a:	d5fb      	bpl.n	8001a04 <_printf_i+0x1bc>
 8001a0c:	8019      	strh	r1, [r3, #0]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	6123      	str	r3, [r4, #16]
 8001a12:	4616      	mov	r6, r2
 8001a14:	e7bc      	b.n	8001990 <_printf_i+0x148>
 8001a16:	6833      	ldr	r3, [r6, #0]
 8001a18:	1d1a      	adds	r2, r3, #4
 8001a1a:	6032      	str	r2, [r6, #0]
 8001a1c:	681e      	ldr	r6, [r3, #0]
 8001a1e:	6862      	ldr	r2, [r4, #4]
 8001a20:	2100      	movs	r1, #0
 8001a22:	4630      	mov	r0, r6
 8001a24:	f7fe fbf4 	bl	8000210 <memchr>
 8001a28:	b108      	cbz	r0, 8001a2e <_printf_i+0x1e6>
 8001a2a:	1b80      	subs	r0, r0, r6
 8001a2c:	6060      	str	r0, [r4, #4]
 8001a2e:	6863      	ldr	r3, [r4, #4]
 8001a30:	6123      	str	r3, [r4, #16]
 8001a32:	2300      	movs	r3, #0
 8001a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a38:	e7aa      	b.n	8001990 <_printf_i+0x148>
 8001a3a:	6923      	ldr	r3, [r4, #16]
 8001a3c:	4632      	mov	r2, r6
 8001a3e:	4649      	mov	r1, r9
 8001a40:	4640      	mov	r0, r8
 8001a42:	47d0      	blx	sl
 8001a44:	3001      	adds	r0, #1
 8001a46:	d0ad      	beq.n	80019a4 <_printf_i+0x15c>
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	079b      	lsls	r3, r3, #30
 8001a4c:	d413      	bmi.n	8001a76 <_printf_i+0x22e>
 8001a4e:	68e0      	ldr	r0, [r4, #12]
 8001a50:	9b03      	ldr	r3, [sp, #12]
 8001a52:	4298      	cmp	r0, r3
 8001a54:	bfb8      	it	lt
 8001a56:	4618      	movlt	r0, r3
 8001a58:	e7a6      	b.n	80019a8 <_printf_i+0x160>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	4632      	mov	r2, r6
 8001a5e:	4649      	mov	r1, r9
 8001a60:	4640      	mov	r0, r8
 8001a62:	47d0      	blx	sl
 8001a64:	3001      	adds	r0, #1
 8001a66:	d09d      	beq.n	80019a4 <_printf_i+0x15c>
 8001a68:	3501      	adds	r5, #1
 8001a6a:	68e3      	ldr	r3, [r4, #12]
 8001a6c:	9903      	ldr	r1, [sp, #12]
 8001a6e:	1a5b      	subs	r3, r3, r1
 8001a70:	42ab      	cmp	r3, r5
 8001a72:	dcf2      	bgt.n	8001a5a <_printf_i+0x212>
 8001a74:	e7eb      	b.n	8001a4e <_printf_i+0x206>
 8001a76:	2500      	movs	r5, #0
 8001a78:	f104 0619 	add.w	r6, r4, #25
 8001a7c:	e7f5      	b.n	8001a6a <_printf_i+0x222>
 8001a7e:	bf00      	nop
 8001a80:	08001fe2 	.word	0x08001fe2
 8001a84:	08001ff3 	.word	0x08001ff3

08001a88 <__swbuf_r>:
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	460e      	mov	r6, r1
 8001a8c:	4614      	mov	r4, r2
 8001a8e:	4605      	mov	r5, r0
 8001a90:	b118      	cbz	r0, 8001a9a <__swbuf_r+0x12>
 8001a92:	6a03      	ldr	r3, [r0, #32]
 8001a94:	b90b      	cbnz	r3, 8001a9a <__swbuf_r+0x12>
 8001a96:	f7ff f9d1 	bl	8000e3c <__sinit>
 8001a9a:	69a3      	ldr	r3, [r4, #24]
 8001a9c:	60a3      	str	r3, [r4, #8]
 8001a9e:	89a3      	ldrh	r3, [r4, #12]
 8001aa0:	071a      	lsls	r2, r3, #28
 8001aa2:	d501      	bpl.n	8001aa8 <__swbuf_r+0x20>
 8001aa4:	6923      	ldr	r3, [r4, #16]
 8001aa6:	b943      	cbnz	r3, 8001aba <__swbuf_r+0x32>
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	4628      	mov	r0, r5
 8001aac:	f000 f82a 	bl	8001b04 <__swsetup_r>
 8001ab0:	b118      	cbz	r0, 8001aba <__swbuf_r+0x32>
 8001ab2:	f04f 37ff 	mov.w	r7, #4294967295
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	6922      	ldr	r2, [r4, #16]
 8001abe:	1a98      	subs	r0, r3, r2
 8001ac0:	6963      	ldr	r3, [r4, #20]
 8001ac2:	b2f6      	uxtb	r6, r6
 8001ac4:	4283      	cmp	r3, r0
 8001ac6:	4637      	mov	r7, r6
 8001ac8:	dc05      	bgt.n	8001ad6 <__swbuf_r+0x4e>
 8001aca:	4621      	mov	r1, r4
 8001acc:	4628      	mov	r0, r5
 8001ace:	f7ff fcbb 	bl	8001448 <_fflush_r>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	d1ed      	bne.n	8001ab2 <__swbuf_r+0x2a>
 8001ad6:	68a3      	ldr	r3, [r4, #8]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	60a3      	str	r3, [r4, #8]
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	6022      	str	r2, [r4, #0]
 8001ae2:	701e      	strb	r6, [r3, #0]
 8001ae4:	6962      	ldr	r2, [r4, #20]
 8001ae6:	1c43      	adds	r3, r0, #1
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d004      	beq.n	8001af6 <__swbuf_r+0x6e>
 8001aec:	89a3      	ldrh	r3, [r4, #12]
 8001aee:	07db      	lsls	r3, r3, #31
 8001af0:	d5e1      	bpl.n	8001ab6 <__swbuf_r+0x2e>
 8001af2:	2e0a      	cmp	r6, #10
 8001af4:	d1df      	bne.n	8001ab6 <__swbuf_r+0x2e>
 8001af6:	4621      	mov	r1, r4
 8001af8:	4628      	mov	r0, r5
 8001afa:	f7ff fca5 	bl	8001448 <_fflush_r>
 8001afe:	2800      	cmp	r0, #0
 8001b00:	d0d9      	beq.n	8001ab6 <__swbuf_r+0x2e>
 8001b02:	e7d6      	b.n	8001ab2 <__swbuf_r+0x2a>

08001b04 <__swsetup_r>:
 8001b04:	b538      	push	{r3, r4, r5, lr}
 8001b06:	4b29      	ldr	r3, [pc, #164]	@ (8001bac <__swsetup_r+0xa8>)
 8001b08:	4605      	mov	r5, r0
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	460c      	mov	r4, r1
 8001b0e:	b118      	cbz	r0, 8001b18 <__swsetup_r+0x14>
 8001b10:	6a03      	ldr	r3, [r0, #32]
 8001b12:	b90b      	cbnz	r3, 8001b18 <__swsetup_r+0x14>
 8001b14:	f7ff f992 	bl	8000e3c <__sinit>
 8001b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b1c:	0719      	lsls	r1, r3, #28
 8001b1e:	d422      	bmi.n	8001b66 <__swsetup_r+0x62>
 8001b20:	06da      	lsls	r2, r3, #27
 8001b22:	d407      	bmi.n	8001b34 <__swsetup_r+0x30>
 8001b24:	2209      	movs	r2, #9
 8001b26:	602a      	str	r2, [r5, #0]
 8001b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b2c:	81a3      	strh	r3, [r4, #12]
 8001b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b32:	e033      	b.n	8001b9c <__swsetup_r+0x98>
 8001b34:	0758      	lsls	r0, r3, #29
 8001b36:	d512      	bpl.n	8001b5e <__swsetup_r+0x5a>
 8001b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b3a:	b141      	cbz	r1, 8001b4e <__swsetup_r+0x4a>
 8001b3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b40:	4299      	cmp	r1, r3
 8001b42:	d002      	beq.n	8001b4a <__swsetup_r+0x46>
 8001b44:	4628      	mov	r0, r5
 8001b46:	f7ff fafb 	bl	8001140 <_free_r>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001b54:	81a3      	strh	r3, [r4, #12]
 8001b56:	2300      	movs	r3, #0
 8001b58:	6063      	str	r3, [r4, #4]
 8001b5a:	6923      	ldr	r3, [r4, #16]
 8001b5c:	6023      	str	r3, [r4, #0]
 8001b5e:	89a3      	ldrh	r3, [r4, #12]
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	81a3      	strh	r3, [r4, #12]
 8001b66:	6923      	ldr	r3, [r4, #16]
 8001b68:	b94b      	cbnz	r3, 8001b7e <__swsetup_r+0x7a>
 8001b6a:	89a3      	ldrh	r3, [r4, #12]
 8001b6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b74:	d003      	beq.n	8001b7e <__swsetup_r+0x7a>
 8001b76:	4621      	mov	r1, r4
 8001b78:	4628      	mov	r0, r5
 8001b7a:	f000 f883 	bl	8001c84 <__smakebuf_r>
 8001b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b82:	f013 0201 	ands.w	r2, r3, #1
 8001b86:	d00a      	beq.n	8001b9e <__swsetup_r+0x9a>
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60a2      	str	r2, [r4, #8]
 8001b8c:	6962      	ldr	r2, [r4, #20]
 8001b8e:	4252      	negs	r2, r2
 8001b90:	61a2      	str	r2, [r4, #24]
 8001b92:	6922      	ldr	r2, [r4, #16]
 8001b94:	b942      	cbnz	r2, 8001ba8 <__swsetup_r+0xa4>
 8001b96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b9a:	d1c5      	bne.n	8001b28 <__swsetup_r+0x24>
 8001b9c:	bd38      	pop	{r3, r4, r5, pc}
 8001b9e:	0799      	lsls	r1, r3, #30
 8001ba0:	bf58      	it	pl
 8001ba2:	6962      	ldrpl	r2, [r4, #20]
 8001ba4:	60a2      	str	r2, [r4, #8]
 8001ba6:	e7f4      	b.n	8001b92 <__swsetup_r+0x8e>
 8001ba8:	2000      	movs	r0, #0
 8001baa:	e7f7      	b.n	8001b9c <__swsetup_r+0x98>
 8001bac:	2000013c 	.word	0x2000013c

08001bb0 <_raise_r>:
 8001bb0:	291f      	cmp	r1, #31
 8001bb2:	b538      	push	{r3, r4, r5, lr}
 8001bb4:	4605      	mov	r5, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	d904      	bls.n	8001bc4 <_raise_r+0x14>
 8001bba:	2316      	movs	r3, #22
 8001bbc:	6003      	str	r3, [r0, #0]
 8001bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc2:	bd38      	pop	{r3, r4, r5, pc}
 8001bc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001bc6:	b112      	cbz	r2, 8001bce <_raise_r+0x1e>
 8001bc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001bcc:	b94b      	cbnz	r3, 8001be2 <_raise_r+0x32>
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f000 f830 	bl	8001c34 <_getpid_r>
 8001bd4:	4622      	mov	r2, r4
 8001bd6:	4601      	mov	r1, r0
 8001bd8:	4628      	mov	r0, r5
 8001bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bde:	f000 b817 	b.w	8001c10 <_kill_r>
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d00a      	beq.n	8001bfc <_raise_r+0x4c>
 8001be6:	1c59      	adds	r1, r3, #1
 8001be8:	d103      	bne.n	8001bf2 <_raise_r+0x42>
 8001bea:	2316      	movs	r3, #22
 8001bec:	6003      	str	r3, [r0, #0]
 8001bee:	2001      	movs	r0, #1
 8001bf0:	e7e7      	b.n	8001bc2 <_raise_r+0x12>
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	4798      	blx	r3
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	e7e0      	b.n	8001bc2 <_raise_r+0x12>

08001c00 <raise>:
 8001c00:	4b02      	ldr	r3, [pc, #8]	@ (8001c0c <raise+0xc>)
 8001c02:	4601      	mov	r1, r0
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	f7ff bfd3 	b.w	8001bb0 <_raise_r>
 8001c0a:	bf00      	nop
 8001c0c:	2000013c 	.word	0x2000013c

08001c10 <_kill_r>:
 8001c10:	b538      	push	{r3, r4, r5, lr}
 8001c12:	4d07      	ldr	r5, [pc, #28]	@ (8001c30 <_kill_r+0x20>)
 8001c14:	2300      	movs	r3, #0
 8001c16:	4604      	mov	r4, r0
 8001c18:	4608      	mov	r0, r1
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	602b      	str	r3, [r5, #0]
 8001c1e:	f7fe ff15 	bl	8000a4c <_kill>
 8001c22:	1c43      	adds	r3, r0, #1
 8001c24:	d102      	bne.n	8001c2c <_kill_r+0x1c>
 8001c26:	682b      	ldr	r3, [r5, #0]
 8001c28:	b103      	cbz	r3, 8001c2c <_kill_r+0x1c>
 8001c2a:	6023      	str	r3, [r4, #0]
 8001c2c:	bd38      	pop	{r3, r4, r5, pc}
 8001c2e:	bf00      	nop
 8001c30:	200004f0 	.word	0x200004f0

08001c34 <_getpid_r>:
 8001c34:	f7fe bf02 	b.w	8000a3c <_getpid>

08001c38 <__swhatbuf_r>:
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c40:	2900      	cmp	r1, #0
 8001c42:	b096      	sub	sp, #88	@ 0x58
 8001c44:	4615      	mov	r5, r2
 8001c46:	461e      	mov	r6, r3
 8001c48:	da0d      	bge.n	8001c66 <__swhatbuf_r+0x2e>
 8001c4a:	89a3      	ldrh	r3, [r4, #12]
 8001c4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c50:	f04f 0100 	mov.w	r1, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2340      	movne	r3, #64	@ 0x40
 8001c58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	6031      	str	r1, [r6, #0]
 8001c60:	602b      	str	r3, [r5, #0]
 8001c62:	b016      	add	sp, #88	@ 0x58
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
 8001c66:	466a      	mov	r2, sp
 8001c68:	f000 f848 	bl	8001cfc <_fstat_r>
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	dbec      	blt.n	8001c4a <__swhatbuf_r+0x12>
 8001c70:	9901      	ldr	r1, [sp, #4]
 8001c72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c7a:	4259      	negs	r1, r3
 8001c7c:	4159      	adcs	r1, r3
 8001c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c82:	e7eb      	b.n	8001c5c <__swhatbuf_r+0x24>

08001c84 <__smakebuf_r>:
 8001c84:	898b      	ldrh	r3, [r1, #12]
 8001c86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c88:	079d      	lsls	r5, r3, #30
 8001c8a:	4606      	mov	r6, r0
 8001c8c:	460c      	mov	r4, r1
 8001c8e:	d507      	bpl.n	8001ca0 <__smakebuf_r+0x1c>
 8001c90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001c94:	6023      	str	r3, [r4, #0]
 8001c96:	6123      	str	r3, [r4, #16]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	6163      	str	r3, [r4, #20]
 8001c9c:	b003      	add	sp, #12
 8001c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca0:	ab01      	add	r3, sp, #4
 8001ca2:	466a      	mov	r2, sp
 8001ca4:	f7ff ffc8 	bl	8001c38 <__swhatbuf_r>
 8001ca8:	9f00      	ldr	r7, [sp, #0]
 8001caa:	4605      	mov	r5, r0
 8001cac:	4639      	mov	r1, r7
 8001cae:	4630      	mov	r0, r6
 8001cb0:	f7ff faba 	bl	8001228 <_malloc_r>
 8001cb4:	b948      	cbnz	r0, 8001cca <__smakebuf_r+0x46>
 8001cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cba:	059a      	lsls	r2, r3, #22
 8001cbc:	d4ee      	bmi.n	8001c9c <__smakebuf_r+0x18>
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	81a3      	strh	r3, [r4, #12]
 8001cc8:	e7e2      	b.n	8001c90 <__smakebuf_r+0xc>
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	6020      	str	r0, [r4, #0]
 8001cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd2:	81a3      	strh	r3, [r4, #12]
 8001cd4:	9b01      	ldr	r3, [sp, #4]
 8001cd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001cda:	b15b      	cbz	r3, 8001cf4 <__smakebuf_r+0x70>
 8001cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	f000 f81d 	bl	8001d20 <_isatty_r>
 8001ce6:	b128      	cbz	r0, 8001cf4 <__smakebuf_r+0x70>
 8001ce8:	89a3      	ldrh	r3, [r4, #12]
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	81a3      	strh	r3, [r4, #12]
 8001cf4:	89a3      	ldrh	r3, [r4, #12]
 8001cf6:	431d      	orrs	r5, r3
 8001cf8:	81a5      	strh	r5, [r4, #12]
 8001cfa:	e7cf      	b.n	8001c9c <__smakebuf_r+0x18>

08001cfc <_fstat_r>:
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	4d07      	ldr	r5, [pc, #28]	@ (8001d1c <_fstat_r+0x20>)
 8001d00:	2300      	movs	r3, #0
 8001d02:	4604      	mov	r4, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	602b      	str	r3, [r5, #0]
 8001d0a:	f7fe feff 	bl	8000b0c <_fstat>
 8001d0e:	1c43      	adds	r3, r0, #1
 8001d10:	d102      	bne.n	8001d18 <_fstat_r+0x1c>
 8001d12:	682b      	ldr	r3, [r5, #0]
 8001d14:	b103      	cbz	r3, 8001d18 <_fstat_r+0x1c>
 8001d16:	6023      	str	r3, [r4, #0]
 8001d18:	bd38      	pop	{r3, r4, r5, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200004f0 	.word	0x200004f0

08001d20 <_isatty_r>:
 8001d20:	b538      	push	{r3, r4, r5, lr}
 8001d22:	4d06      	ldr	r5, [pc, #24]	@ (8001d3c <_isatty_r+0x1c>)
 8001d24:	2300      	movs	r3, #0
 8001d26:	4604      	mov	r4, r0
 8001d28:	4608      	mov	r0, r1
 8001d2a:	602b      	str	r3, [r5, #0]
 8001d2c:	f7fe fefe 	bl	8000b2c <_isatty>
 8001d30:	1c43      	adds	r3, r0, #1
 8001d32:	d102      	bne.n	8001d3a <_isatty_r+0x1a>
 8001d34:	682b      	ldr	r3, [r5, #0]
 8001d36:	b103      	cbz	r3, 8001d3a <_isatty_r+0x1a>
 8001d38:	6023      	str	r3, [r4, #0]
 8001d3a:	bd38      	pop	{r3, r4, r5, pc}
 8001d3c:	200004f0 	.word	0x200004f0

08001d40 <_init>:
 8001d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d42:	bf00      	nop
 8001d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d46:	bc08      	pop	{r3}
 8001d48:	469e      	mov	lr, r3
 8001d4a:	4770      	bx	lr

08001d4c <_fini>:
 8001d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4e:	bf00      	nop
 8001d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d52:	bc08      	pop	{r3}
 8001d54:	469e      	mov	lr, r3
 8001d56:	4770      	bx	lr
