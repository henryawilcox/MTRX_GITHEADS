
SerialInterfaceIRQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080010f4  080010f4  000020f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011b0  080011b0  00003178  2**0
                  CONTENTS
  4 .ARM          00000008  080011b0  080011b0  000021b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080011b8  080011b8  00003178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011b8  080011b8  000021b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080011bc  080011bc  000021bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  080011c0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003178  2**0
                  CONTENTS
 10 .bss          0000036c  20000178  20000178  00003178  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004e4  200004e4  00003178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014a4  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006c2  00000000  00000000  0000464c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00004d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a7  00000000  00000000  00004df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015dfe  00000000  00000000  00004e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016ed  00000000  00000000  0001ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076821  00000000  00000000  0001c38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00092bab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000788  00000000  00000000  00092bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00093378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080010dc 	.word	0x080010dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	080010dc 	.word	0x080010dc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <completion_callback>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void completion_callback(uint8_t *string_buffer, uint8_t length) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
    // This will only be called when a complete string has been received

    // Echo back the received string
    SerialOutputString((uint8_t*)"You entered: ", &USART1_PORT);
 800028c:	4914      	ldr	r1, [pc, #80]	@ (80002e0 <completion_callback+0x60>)
 800028e:	4815      	ldr	r0, [pc, #84]	@ (80002e4 <completion_callback+0x64>)
 8000290:	f000 f8eb 	bl	800046a <SerialOutputString>
    SerialOutputString(string_buffer, &USART1_PORT);
 8000294:	4912      	ldr	r1, [pc, #72]	@ (80002e0 <completion_callback+0x60>)
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 f8e7 	bl	800046a <SerialOutputString>
    SerialOutputString((uint8_t*)"\r", &USART1_PORT);
 800029c:	4910      	ldr	r1, [pc, #64]	@ (80002e0 <completion_callback+0x60>)
 800029e:	4812      	ldr	r0, [pc, #72]	@ (80002e8 <completion_callback+0x68>)
 80002a0:	f000 f8e3 	bl	800046a <SerialOutputString>
    SerialOutputString((uint8_t*)"Characters received: ", &USART1_PORT);
 80002a4:	490e      	ldr	r1, [pc, #56]	@ (80002e0 <completion_callback+0x60>)
 80002a6:	4811      	ldr	r0, [pc, #68]	@ (80002ec <completion_callback+0x6c>)
 80002a8:	f000 f8df 	bl	800046a <SerialOutputString>

    // Convert chars_read to string and display
    char num_str[10];
    sprintf(num_str, "%d", length);
 80002ac:	78fa      	ldrb	r2, [r7, #3]
 80002ae:	f107 030c 	add.w	r3, r7, #12
 80002b2:	490f      	ldr	r1, [pc, #60]	@ (80002f0 <completion_callback+0x70>)
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fa71 	bl	800079c <siprintf>
    SerialOutputString((uint8_t*)num_str, &USART1_PORT);
 80002ba:	f107 030c 	add.w	r3, r7, #12
 80002be:	4908      	ldr	r1, [pc, #32]	@ (80002e0 <completion_callback+0x60>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 f8d2 	bl	800046a <SerialOutputString>
    SerialOutputString((uint8_t*)"\r\n\r\n", &USART1_PORT);
 80002c6:	4906      	ldr	r1, [pc, #24]	@ (80002e0 <completion_callback+0x60>)
 80002c8:	480a      	ldr	r0, [pc, #40]	@ (80002f4 <completion_callback+0x74>)
 80002ca:	f000 f8ce 	bl	800046a <SerialOutputString>

    // Prompt for next input
    SerialOutputString((uint8_t*)"Enter text (RETURN to terminate):\r\n", &USART1_PORT);
 80002ce:	4904      	ldr	r1, [pc, #16]	@ (80002e0 <completion_callback+0x60>)
 80002d0:	4809      	ldr	r0, [pc, #36]	@ (80002f8 <completion_callback+0x78>)
 80002d2:	f000 f8ca 	bl	800046a <SerialOutputString>
}
 80002d6:	bf00      	nop
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000000 	.word	0x20000000
 80002e4:	080010f4 	.word	0x080010f4
 80002e8:	08001104 	.word	0x08001104
 80002ec:	08001108 	.word	0x08001108
 80002f0:	08001120 	.word	0x08001120
 80002f4:	08001124 	.word	0x08001124
 80002f8:	0800112c 	.word	0x0800112c

080002fc <main>:

int main(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
    // Initialize the serial port with a baud rate of 115200
    SerialInitialise(BAUD_115200, &USART1_PORT, &completion_callback);
 8000300:	4a08      	ldr	r2, [pc, #32]	@ (8000324 <main+0x28>)
 8000302:	4909      	ldr	r1, [pc, #36]	@ (8000328 <main+0x2c>)
 8000304:	2004      	movs	r0, #4
 8000306:	f000 f815 	bl	8000334 <SerialInitialise>

    // Send initial welcome message
    SerialOutputString((uint8_t*)"UART ACTIVATED\r\n", &USART1_PORT);
 800030a:	4907      	ldr	r1, [pc, #28]	@ (8000328 <main+0x2c>)
 800030c:	4807      	ldr	r0, [pc, #28]	@ (800032c <main+0x30>)
 800030e:	f000 f8ac 	bl	800046a <SerialOutputString>
    SerialOutputString((uint8_t*)"Enter text (RETURN to terminate):\r\n", &USART1_PORT);
 8000312:	4905      	ldr	r1, [pc, #20]	@ (8000328 <main+0x2c>)
 8000314:	4806      	ldr	r0, [pc, #24]	@ (8000330 <main+0x34>)
 8000316:	f000 f8a8 	bl	800046a <SerialOutputString>

    EnableSerialInterrupts(&USART1_PORT);
 800031a:	4803      	ldr	r0, [pc, #12]	@ (8000328 <main+0x2c>)
 800031c:	f000 f90a 	bl	8000534 <EnableSerialInterrupts>

    /* Loop forever */
    for(;;) {
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <main+0x24>
 8000324:	08000281 	.word	0x08000281
 8000328:	20000000 	.word	0x20000000
 800032c:	08001150 	.word	0x08001150
 8000330:	0800112c 	.word	0x0800112c

08000334 <SerialInitialise>:



// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(BaudRate baudRate, SerialPort *serial_port, void (*callback)(uint8_t *data, uint8_t length)) {
 8000334:	b480      	push	{r7}
 8000336:	b087      	sub	sp, #28
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 8000340:	73fb      	strb	r3, [r7, #15]

	serial_port->completion_function = callback; //callback to function
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    // enable clock power, system configuration clock and GPIOC
    // common to all UARTs
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800034a:	4b3a      	ldr	r3, [pc, #232]	@ (8000434 <SerialInitialise+0x100>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	4a39      	ldr	r2, [pc, #228]	@ (8000434 <SerialInitialise+0x100>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000354:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000356:	4b37      	ldr	r3, [pc, #220]	@ (8000434 <SerialInitialise+0x100>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a36      	ldr	r2, [pc, #216]	@ (8000434 <SerialInitialise+0x100>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]

    // enable the GPIO which is on the AHB bus
    RCC->AHBENR |= serial_port->MaskAHBENR;
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	691a      	ldr	r2, [r3, #16]
 8000366:	4b33      	ldr	r3, [pc, #204]	@ (8000434 <SerialInitialise+0x100>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4932      	ldr	r1, [pc, #200]	@ (8000434 <SerialInitialise+0x100>)
 800036c:	4313      	orrs	r3, r2
 800036e:	614b      	str	r3, [r1, #20]

    // set pin mode to alternate function for the specific GPIO pins
    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	68ba      	ldr	r2, [r7, #8]
 8000376:	6952      	ldr	r2, [r2, #20]
 8000378:	601a      	str	r2, [r3, #0]

    // enable high speed clock for specific GPIO pins
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	6992      	ldr	r2, [r2, #24]
 8000382:	609a      	str	r2, [r3, #8]

    // set alternate function to enable USART to external pins
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	69d9      	ldr	r1, [r3, #28]
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	6a1a      	ldr	r2, [r3, #32]
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	430a      	orrs	r2, r1
 8000394:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	6a19      	ldr	r1, [r3, #32]
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	625a      	str	r2, [r3, #36]	@ 0x24

    // enable the device based on the bits defined in the serial port definition
    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	68da      	ldr	r2, [r3, #12]
 80003ac:	4b21      	ldr	r3, [pc, #132]	@ (8000434 <SerialInitialise+0x100>)
 80003ae:	69db      	ldr	r3, [r3, #28]
 80003b0:	4920      	ldr	r1, [pc, #128]	@ (8000434 <SerialInitialise+0x100>)
 80003b2:	4313      	orrs	r3, r2
 80003b4:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	689a      	ldr	r2, [r3, #8]
 80003ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <SerialInitialise+0x100>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	491d      	ldr	r1, [pc, #116]	@ (8000434 <SerialInitialise+0x100>)
 80003c0:	4313      	orrs	r3, r2
 80003c2:	618b      	str	r3, [r1, #24]

    // Get a pointer to the 16 bits of the BRR register that we want to change
    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	330c      	adds	r3, #12
 80003ca:	617b      	str	r3, [r7, #20]

    // Baud rate calculation from datasheet
    switch(baudRate){
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	2b04      	cmp	r3, #4
 80003d0:	d822      	bhi.n	8000418 <SerialInitialise+0xe4>
 80003d2:	a201      	add	r2, pc, #4	@ (adr r2, 80003d8 <SerialInitialise+0xa4>)
 80003d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d8:	080003ed 	.word	0x080003ed
 80003dc:	080003f7 	.word	0x080003f7
 80003e0:	08000401 	.word	0x08000401
 80003e4:	08000409 	.word	0x08000409
 80003e8:	08000411 	.word	0x08000411
    case BAUD_9600:
        *baud_rate_config = 0x341;  // 9600 at 8MHz
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	f240 3241 	movw	r2, #833	@ 0x341
 80003f2:	801a      	strh	r2, [r3, #0]
        break;
 80003f4:	e010      	b.n	8000418 <SerialInitialise+0xe4>
    case BAUD_19200:
        *baud_rate_config = 0x1A0;  // 19200 at 8MHz
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80003fc:	801a      	strh	r2, [r3, #0]
        break;
 80003fe:	e00b      	b.n	8000418 <SerialInitialise+0xe4>
    case BAUD_38400:
        *baud_rate_config = 0xD0;   // 38400 at 8MHz
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	22d0      	movs	r2, #208	@ 0xd0
 8000404:	801a      	strh	r2, [r3, #0]
        break;
 8000406:	e007      	b.n	8000418 <SerialInitialise+0xe4>
    case BAUD_57600:
        *baud_rate_config = 0x8B;   // 57600 at 8MHz
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	228b      	movs	r2, #139	@ 0x8b
 800040c:	801a      	strh	r2, [r3, #0]
        break;
 800040e:	e003      	b.n	8000418 <SerialInitialise+0xe4>
    case BAUD_115200:
        *baud_rate_config = 0x46;   // 115200 at 8MHz
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	2246      	movs	r2, #70	@ 0x46
 8000414:	801a      	strh	r2, [r3, #0]
        break;
 8000416:	bf00      	nop
    }

    // enable serial port for tx and rx
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f042 020d 	orr.w	r2, r2, #13
 8000426:	601a      	str	r2, [r3, #0]
}
 8000428:	bf00      	nop
 800042a:	371c      	adds	r7, #28
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000

08000438 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	6039      	str	r1, [r7, #0]
 8000442:	71fb      	strb	r3, [r7, #7]
    // Wait until the transmit data register is empty
    while((serial_port->UART->ISR & USART_ISR_TXE) == 0) {
 8000444:	bf00      	nop
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	69db      	ldr	r3, [r3, #28]
 800044c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f8      	beq.n	8000446 <SerialOutputChar+0xe>
        // Do nothing, just wait
    }

    // Send the data
    serial_port->UART->TDR = data;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	79fa      	ldrb	r2, [r7, #7]
 800045a:	b292      	uxth	r2, r2
 800045c:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800046a:	b580      	push	{r7, lr}
 800046c:	b084      	sub	sp, #16
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	6039      	str	r1, [r7, #0]
    uint32_t counter = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
    while(*pt) {
 8000478:	e00b      	b.n	8000492 <SerialOutputString+0x28>
        SerialOutputChar(*pt, serial_port);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	6839      	ldr	r1, [r7, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ffd9 	bl	8000438 <SerialOutputChar>
        counter++;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3301      	adds	r3, #1
 800048a:	60fb      	str	r3, [r7, #12]
        pt++;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3301      	adds	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
    while(*pt) {
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1ef      	bne.n	800047a <SerialOutputString+0x10>
    }
}
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	db0b      	blt.n	80004ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	f003 021f 	and.w	r2, r3, #31
 80004bc:	4907      	ldr	r1, [pc, #28]	@ (80004dc <__NVIC_EnableIRQ+0x38>)
 80004be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c2:	095b      	lsrs	r3, r3, #5
 80004c4:	2001      	movs	r0, #1
 80004c6:	fa00 f202 	lsl.w	r2, r0, r2
 80004ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000e100 	.word	0xe000e100

080004e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	6039      	str	r1, [r7, #0]
 80004ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	db0a      	blt.n	800050a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	490c      	ldr	r1, [pc, #48]	@ (800052c <__NVIC_SetPriority+0x4c>)
 80004fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fe:	0112      	lsls	r2, r2, #4
 8000500:	b2d2      	uxtb	r2, r2
 8000502:	440b      	add	r3, r1
 8000504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000508:	e00a      	b.n	8000520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4908      	ldr	r1, [pc, #32]	@ (8000530 <__NVIC_SetPriority+0x50>)
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	f003 030f 	and.w	r3, r3, #15
 8000516:	3b04      	subs	r3, #4
 8000518:	0112      	lsls	r2, r2, #4
 800051a:	b2d2      	uxtb	r2, r2
 800051c:	440b      	add	r3, r1
 800051e:	761a      	strb	r2, [r3, #24]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	e000e100 	.word	0xe000e100
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <EnableSerialInterrupts>:





void EnableSerialInterrupts(SerialPort *serial_port) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
    // Disable interrupts while setting up
    __disable_irq();

    rx_index = 0;
 8000540:	4b16      	ldr	r3, [pc, #88]	@ (800059c <EnableSerialInterrupts+0x68>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
    string_recieved = 0;
 8000546:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <EnableSerialInterrupts+0x6c>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]

    // Reset buffers
    for (int i = 0; i < BUFFER_SIZE; i++) {
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	e00c      	b.n	800056c <EnableSerialInterrupts+0x38>
        rx_buffer1[i] = 0;
 8000552:	4a14      	ldr	r2, [pc, #80]	@ (80005a4 <EnableSerialInterrupts+0x70>)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4413      	add	r3, r2
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
        rx_buffer2[i] = 0;
 800055c:	4a12      	ldr	r2, [pc, #72]	@ (80005a8 <EnableSerialInterrupts+0x74>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4413      	add	r3, r2
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2bff      	cmp	r3, #255	@ 0xff
 8000570:	ddef      	ble.n	8000552 <EnableSerialInterrupts+0x1e>
    }


    // Enable RXNE interrupt
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f042 0220 	orr.w	r2, r2, #32
 8000580:	601a      	str	r2, [r3, #0]

    // Enable the USART1 interrupt in NVIC (assuming USART1)
    NVIC_EnableIRQ(USART1_IRQn);
 8000582:	2025      	movs	r0, #37	@ 0x25
 8000584:	f7ff ff8e 	bl	80004a4 <__NVIC_EnableIRQ>
    NVIC_SetPriority(USART1_IRQn, 0);
 8000588:	2100      	movs	r1, #0
 800058a:	2025      	movs	r0, #37	@ 0x25
 800058c:	f7ff ffa8 	bl	80004e0 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000590:	b662      	cpsie	i
}
 8000592:	bf00      	nop

    // Re-enable interrupts
    __enable_irq();
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000195 	.word	0x20000195
 80005a0:	20000194 	.word	0x20000194
 80005a4:	20000198 	.word	0x20000198
 80005a8:	20000298 	.word	0x20000298

080005ac <USART1_EXTI25_IRQHandler>:

// USART1 interrupt handler
void USART1_EXTI25_IRQHandler(void) {
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	b0c3      	sub	sp, #268	@ 0x10c
 80005b0:	af00      	add	r7, sp, #0
    // Check if we received data
    if (USART1_PORT.UART->ISR & USART_ISR_RXNE) {
 80005b2:	4b44      	ldr	r3, [pc, #272]	@ (80006c4 <USART1_EXTI25_IRQHandler+0x118>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	69db      	ldr	r3, [r3, #28]
 80005b8:	f003 0320 	and.w	r3, r3, #32
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d07c      	beq.n	80006ba <USART1_EXTI25_IRQHandler+0x10e>
        // Read the received data
        uint8_t received_char = USART1_PORT.UART->RDR;
 80005c0:	4b40      	ldr	r3, [pc, #256]	@ (80006c4 <USART1_EXTI25_IRQHandler+0x118>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103

        // Echo the character back immediately to test
         SerialOutputChar(received_char, &USART1_PORT);
 80005cc:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80005d0:	493c      	ldr	r1, [pc, #240]	@ (80006c4 <USART1_EXTI25_IRQHandler+0x118>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ff30 	bl	8000438 <SerialOutputChar>

        // Store the character if there's space in the buffer
        if (rx_index < BUFFER_SIZE - 1) {
 80005d8:	4b3b      	ldr	r3, [pc, #236]	@ (80006c8 <USART1_EXTI25_IRQHandler+0x11c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2bff      	cmp	r3, #255	@ 0xff
 80005e0:	d045      	beq.n	800066e <USART1_EXTI25_IRQHandler+0xc2>
            // Store character in buffer1
            rx_buffer1[rx_index++] = received_char;
 80005e2:	4b39      	ldr	r3, [pc, #228]	@ (80006c8 <USART1_EXTI25_IRQHandler+0x11c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	b2d1      	uxtb	r1, r2
 80005ec:	4a36      	ldr	r2, [pc, #216]	@ (80006c8 <USART1_EXTI25_IRQHandler+0x11c>)
 80005ee:	7011      	strb	r1, [r2, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4a36      	ldr	r2, [pc, #216]	@ (80006cc <USART1_EXTI25_IRQHandler+0x120>)
 80005f4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80005f8:	5453      	strb	r3, [r2, r1]

            // Check if terminating character received
            if (received_char == '\r') {
 80005fa:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80005fe:	2b0d      	cmp	r3, #13
 8000600:	d15b      	bne.n	80006ba <USART1_EXTI25_IRQHandler+0x10e>
                // Null-terminate the string
                rx_buffer1[rx_index] = '\0';
 8000602:	4b31      	ldr	r3, [pc, #196]	@ (80006c8 <USART1_EXTI25_IRQHandler+0x11c>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	4b30      	ldr	r3, [pc, #192]	@ (80006cc <USART1_EXTI25_IRQHandler+0x120>)
 800060c:	2100      	movs	r1, #0
 800060e:	5499      	strb	r1, [r3, r2]
                string_recieved = 1;
 8000610:	4b2f      	ldr	r3, [pc, #188]	@ (80006d0 <USART1_EXTI25_IRQHandler+0x124>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]

                //transfer buffer1 to buffer2 and reset buffer1

                for (int i = 0; i < BUFFER_SIZE; i++) {
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800061c:	e016      	b.n	800064c <USART1_EXTI25_IRQHandler+0xa0>
                		rx_buffer2[i] = rx_buffer1[i];
 800061e:	4a2b      	ldr	r2, [pc, #172]	@ (80006cc <USART1_EXTI25_IRQHandler+0x120>)
 8000620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2d9      	uxtb	r1, r3
 800062a:	4a2a      	ldr	r2, [pc, #168]	@ (80006d4 <USART1_EXTI25_IRQHandler+0x128>)
 800062c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000630:	4413      	add	r3, r2
 8000632:	460a      	mov	r2, r1
 8000634:	701a      	strb	r2, [r3, #0]
                        rx_buffer1[i] = 0;
 8000636:	4a25      	ldr	r2, [pc, #148]	@ (80006cc <USART1_EXTI25_IRQHandler+0x120>)
 8000638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800063c:	4413      	add	r3, r2
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
                for (int i = 0; i < BUFFER_SIZE; i++) {
 8000642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000646:	3301      	adds	r3, #1
 8000648:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800064c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000650:	2bff      	cmp	r3, #255	@ 0xff
 8000652:	dde4      	ble.n	800061e <USART1_EXTI25_IRQHandler+0x72>
                }

                USART1_PORT.completion_function(rx_buffer2, rx_index);
 8000654:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <USART1_EXTI25_IRQHandler+0x118>)
 8000656:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800065a:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <USART1_EXTI25_IRQHandler+0x11c>)
 800065c:	7812      	ldrb	r2, [r2, #0]
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	4611      	mov	r1, r2
 8000662:	481c      	ldr	r0, [pc, #112]	@ (80006d4 <USART1_EXTI25_IRQHandler+0x128>)
 8000664:	4798      	blx	r3

                // Reset index after processing
                rx_index = 0;
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <USART1_EXTI25_IRQHandler+0x11c>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]

            USART1_PORT.completion_function(BUFFEROVERFLOW, rx_index);

        }
    }
}
 800066c:	e025      	b.n	80006ba <USART1_EXTI25_IRQHandler+0x10e>
            rx_index = 0;
 800066e:	4b16      	ldr	r3, [pc, #88]	@ (80006c8 <USART1_EXTI25_IRQHandler+0x11c>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
            uint8_t BUFFEROVERFLOW[BUFFER_SIZE] = "ERROR: BUFFER OVERFLOW";
 8000674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000678:	f5a3 7684 	sub.w	r6, r3, #264	@ 0x108
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <USART1_EXTI25_IRQHandler+0x12c>)
 800067e:	4634      	mov	r4, r6
 8000680:	461d      	mov	r5, r3
 8000682:	6828      	ldr	r0, [r5, #0]
 8000684:	6869      	ldr	r1, [r5, #4]
 8000686:	68aa      	ldr	r2, [r5, #8]
 8000688:	68eb      	ldr	r3, [r5, #12]
 800068a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068c:	6928      	ldr	r0, [r5, #16]
 800068e:	6020      	str	r0, [r4, #0]
 8000690:	8aab      	ldrh	r3, [r5, #20]
 8000692:	7daa      	ldrb	r2, [r5, #22]
 8000694:	80a3      	strh	r3, [r4, #4]
 8000696:	4613      	mov	r3, r2
 8000698:	71a3      	strb	r3, [r4, #6]
 800069a:	f106 0317 	add.w	r3, r6, #23
 800069e:	22e9      	movs	r2, #233	@ 0xe9
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f89a 	bl	80007dc <memset>
            USART1_PORT.completion_function(BUFFEROVERFLOW, rx_index);
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <USART1_EXTI25_IRQHandler+0x118>)
 80006aa:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80006ae:	4a06      	ldr	r2, [pc, #24]	@ (80006c8 <USART1_EXTI25_IRQHandler+0x11c>)
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	b2d1      	uxtb	r1, r2
 80006b4:	463a      	mov	r2, r7
 80006b6:	4610      	mov	r0, r2
 80006b8:	4798      	blx	r3
}
 80006ba:	bf00      	nop
 80006bc:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000195 	.word	0x20000195
 80006cc:	20000198 	.word	0x20000198
 80006d0:	20000194 	.word	0x20000194
 80006d4:	20000298 	.word	0x20000298
 80006d8:	08001164 	.word	0x08001164

080006dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e4:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <_sbrk+0x5c>)
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <_sbrk+0x60>)
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f0:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <_sbrk+0x64>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	@ (8000744 <_sbrk+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	429a      	cmp	r2, r3
 800070a:	d207      	bcs.n	800071c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800070c:	f000 f86e 	bl	80007ec <__errno>
 8000710:	4603      	mov	r3, r0
 8000712:	220c      	movs	r2, #12
 8000714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800071a:	e009      	b.n	8000730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000722:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <_sbrk+0x64>)
 800072c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000a000 	.word	0x2000a000
 800073c:	00000400 	.word	0x00000400
 8000740:	20000398 	.word	0x20000398
 8000744:	200004e8 	.word	0x200004e8

08000748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000748:	480d      	ldr	r0, [pc, #52]	@ (8000780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800074c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	@ (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	@ (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <LoopForever+0xe>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	@ (8000794 <LoopForever+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000776:	f000 f83f 	bl	80007f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077a:	f7ff fdbf 	bl	80002fc <main>

0800077e <LoopForever>:

LoopForever:
  b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   r0, =_estack
 8000780:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 800078c:	080011c0 	.word	0x080011c0
  ldr r2, =_sbss
 8000790:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8000794:	200004e4 	.word	0x200004e4

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <siprintf>:
 800079c:	b40e      	push	{r1, r2, r3}
 800079e:	b500      	push	{lr}
 80007a0:	b09c      	sub	sp, #112	@ 0x70
 80007a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80007a4:	9002      	str	r0, [sp, #8]
 80007a6:	9006      	str	r0, [sp, #24]
 80007a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80007ac:	4809      	ldr	r0, [pc, #36]	@ (80007d4 <siprintf+0x38>)
 80007ae:	9107      	str	r1, [sp, #28]
 80007b0:	9104      	str	r1, [sp, #16]
 80007b2:	4909      	ldr	r1, [pc, #36]	@ (80007d8 <siprintf+0x3c>)
 80007b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80007b8:	9105      	str	r1, [sp, #20]
 80007ba:	6800      	ldr	r0, [r0, #0]
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	a902      	add	r1, sp, #8
 80007c0:	f000 f89c 	bl	80008fc <_svfiprintf_r>
 80007c4:	9b02      	ldr	r3, [sp, #8]
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	b01c      	add	sp, #112	@ 0x70
 80007cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80007d0:	b003      	add	sp, #12
 80007d2:	4770      	bx	lr
 80007d4:	20000128 	.word	0x20000128
 80007d8:	ffff0208 	.word	0xffff0208

080007dc <memset>:
 80007dc:	4402      	add	r2, r0
 80007de:	4603      	mov	r3, r0
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d100      	bne.n	80007e6 <memset+0xa>
 80007e4:	4770      	bx	lr
 80007e6:	f803 1b01 	strb.w	r1, [r3], #1
 80007ea:	e7f9      	b.n	80007e0 <memset+0x4>

080007ec <__errno>:
 80007ec:	4b01      	ldr	r3, [pc, #4]	@ (80007f4 <__errno+0x8>)
 80007ee:	6818      	ldr	r0, [r3, #0]
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000128 	.word	0x20000128

080007f8 <__libc_init_array>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000830 <__libc_init_array+0x38>)
 80007fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000834 <__libc_init_array+0x3c>)
 80007fe:	1b64      	subs	r4, r4, r5
 8000800:	10a4      	asrs	r4, r4, #2
 8000802:	2600      	movs	r6, #0
 8000804:	42a6      	cmp	r6, r4
 8000806:	d109      	bne.n	800081c <__libc_init_array+0x24>
 8000808:	4d0b      	ldr	r5, [pc, #44]	@ (8000838 <__libc_init_array+0x40>)
 800080a:	4c0c      	ldr	r4, [pc, #48]	@ (800083c <__libc_init_array+0x44>)
 800080c:	f000 fc66 	bl	80010dc <_init>
 8000810:	1b64      	subs	r4, r4, r5
 8000812:	10a4      	asrs	r4, r4, #2
 8000814:	2600      	movs	r6, #0
 8000816:	42a6      	cmp	r6, r4
 8000818:	d105      	bne.n	8000826 <__libc_init_array+0x2e>
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000820:	4798      	blx	r3
 8000822:	3601      	adds	r6, #1
 8000824:	e7ee      	b.n	8000804 <__libc_init_array+0xc>
 8000826:	f855 3b04 	ldr.w	r3, [r5], #4
 800082a:	4798      	blx	r3
 800082c:	3601      	adds	r6, #1
 800082e:	e7f2      	b.n	8000816 <__libc_init_array+0x1e>
 8000830:	080011b8 	.word	0x080011b8
 8000834:	080011b8 	.word	0x080011b8
 8000838:	080011b8 	.word	0x080011b8
 800083c:	080011bc 	.word	0x080011bc

08000840 <__retarget_lock_acquire_recursive>:
 8000840:	4770      	bx	lr

08000842 <__retarget_lock_release_recursive>:
 8000842:	4770      	bx	lr

08000844 <__ssputs_r>:
 8000844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000848:	688e      	ldr	r6, [r1, #8]
 800084a:	461f      	mov	r7, r3
 800084c:	42be      	cmp	r6, r7
 800084e:	680b      	ldr	r3, [r1, #0]
 8000850:	4682      	mov	sl, r0
 8000852:	460c      	mov	r4, r1
 8000854:	4690      	mov	r8, r2
 8000856:	d82d      	bhi.n	80008b4 <__ssputs_r+0x70>
 8000858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800085c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000860:	d026      	beq.n	80008b0 <__ssputs_r+0x6c>
 8000862:	6965      	ldr	r5, [r4, #20]
 8000864:	6909      	ldr	r1, [r1, #16]
 8000866:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800086a:	eba3 0901 	sub.w	r9, r3, r1
 800086e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000872:	1c7b      	adds	r3, r7, #1
 8000874:	444b      	add	r3, r9
 8000876:	106d      	asrs	r5, r5, #1
 8000878:	429d      	cmp	r5, r3
 800087a:	bf38      	it	cc
 800087c:	461d      	movcc	r5, r3
 800087e:	0553      	lsls	r3, r2, #21
 8000880:	d527      	bpl.n	80008d2 <__ssputs_r+0x8e>
 8000882:	4629      	mov	r1, r5
 8000884:	f000 f958 	bl	8000b38 <_malloc_r>
 8000888:	4606      	mov	r6, r0
 800088a:	b360      	cbz	r0, 80008e6 <__ssputs_r+0xa2>
 800088c:	6921      	ldr	r1, [r4, #16]
 800088e:	464a      	mov	r2, r9
 8000890:	f000 fbc4 	bl	800101c <memcpy>
 8000894:	89a3      	ldrh	r3, [r4, #12]
 8000896:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800089a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089e:	81a3      	strh	r3, [r4, #12]
 80008a0:	6126      	str	r6, [r4, #16]
 80008a2:	6165      	str	r5, [r4, #20]
 80008a4:	444e      	add	r6, r9
 80008a6:	eba5 0509 	sub.w	r5, r5, r9
 80008aa:	6026      	str	r6, [r4, #0]
 80008ac:	60a5      	str	r5, [r4, #8]
 80008ae:	463e      	mov	r6, r7
 80008b0:	42be      	cmp	r6, r7
 80008b2:	d900      	bls.n	80008b6 <__ssputs_r+0x72>
 80008b4:	463e      	mov	r6, r7
 80008b6:	6820      	ldr	r0, [r4, #0]
 80008b8:	4632      	mov	r2, r6
 80008ba:	4641      	mov	r1, r8
 80008bc:	f000 fb84 	bl	8000fc8 <memmove>
 80008c0:	68a3      	ldr	r3, [r4, #8]
 80008c2:	1b9b      	subs	r3, r3, r6
 80008c4:	60a3      	str	r3, [r4, #8]
 80008c6:	6823      	ldr	r3, [r4, #0]
 80008c8:	4433      	add	r3, r6
 80008ca:	6023      	str	r3, [r4, #0]
 80008cc:	2000      	movs	r0, #0
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	462a      	mov	r2, r5
 80008d4:	f000 fb4a 	bl	8000f6c <_realloc_r>
 80008d8:	4606      	mov	r6, r0
 80008da:	2800      	cmp	r0, #0
 80008dc:	d1e0      	bne.n	80008a0 <__ssputs_r+0x5c>
 80008de:	6921      	ldr	r1, [r4, #16]
 80008e0:	4650      	mov	r0, sl
 80008e2:	f000 fba9 	bl	8001038 <_free_r>
 80008e6:	230c      	movs	r3, #12
 80008e8:	f8ca 3000 	str.w	r3, [sl]
 80008ec:	89a3      	ldrh	r3, [r4, #12]
 80008ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f2:	81a3      	strh	r3, [r4, #12]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008f8:	e7e9      	b.n	80008ce <__ssputs_r+0x8a>
	...

080008fc <_svfiprintf_r>:
 80008fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000900:	4698      	mov	r8, r3
 8000902:	898b      	ldrh	r3, [r1, #12]
 8000904:	061b      	lsls	r3, r3, #24
 8000906:	b09d      	sub	sp, #116	@ 0x74
 8000908:	4607      	mov	r7, r0
 800090a:	460d      	mov	r5, r1
 800090c:	4614      	mov	r4, r2
 800090e:	d510      	bpl.n	8000932 <_svfiprintf_r+0x36>
 8000910:	690b      	ldr	r3, [r1, #16]
 8000912:	b973      	cbnz	r3, 8000932 <_svfiprintf_r+0x36>
 8000914:	2140      	movs	r1, #64	@ 0x40
 8000916:	f000 f90f 	bl	8000b38 <_malloc_r>
 800091a:	6028      	str	r0, [r5, #0]
 800091c:	6128      	str	r0, [r5, #16]
 800091e:	b930      	cbnz	r0, 800092e <_svfiprintf_r+0x32>
 8000920:	230c      	movs	r3, #12
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000928:	b01d      	add	sp, #116	@ 0x74
 800092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800092e:	2340      	movs	r3, #64	@ 0x40
 8000930:	616b      	str	r3, [r5, #20]
 8000932:	2300      	movs	r3, #0
 8000934:	9309      	str	r3, [sp, #36]	@ 0x24
 8000936:	2320      	movs	r3, #32
 8000938:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800093c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000940:	2330      	movs	r3, #48	@ 0x30
 8000942:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000ae0 <_svfiprintf_r+0x1e4>
 8000946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800094a:	f04f 0901 	mov.w	r9, #1
 800094e:	4623      	mov	r3, r4
 8000950:	469a      	mov	sl, r3
 8000952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000956:	b10a      	cbz	r2, 800095c <_svfiprintf_r+0x60>
 8000958:	2a25      	cmp	r2, #37	@ 0x25
 800095a:	d1f9      	bne.n	8000950 <_svfiprintf_r+0x54>
 800095c:	ebba 0b04 	subs.w	fp, sl, r4
 8000960:	d00b      	beq.n	800097a <_svfiprintf_r+0x7e>
 8000962:	465b      	mov	r3, fp
 8000964:	4622      	mov	r2, r4
 8000966:	4629      	mov	r1, r5
 8000968:	4638      	mov	r0, r7
 800096a:	f7ff ff6b 	bl	8000844 <__ssputs_r>
 800096e:	3001      	adds	r0, #1
 8000970:	f000 80a7 	beq.w	8000ac2 <_svfiprintf_r+0x1c6>
 8000974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000976:	445a      	add	r2, fp
 8000978:	9209      	str	r2, [sp, #36]	@ 0x24
 800097a:	f89a 3000 	ldrb.w	r3, [sl]
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 809f 	beq.w	8000ac2 <_svfiprintf_r+0x1c6>
 8000984:	2300      	movs	r3, #0
 8000986:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800098a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800098e:	f10a 0a01 	add.w	sl, sl, #1
 8000992:	9304      	str	r3, [sp, #16]
 8000994:	9307      	str	r3, [sp, #28]
 8000996:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800099a:	931a      	str	r3, [sp, #104]	@ 0x68
 800099c:	4654      	mov	r4, sl
 800099e:	2205      	movs	r2, #5
 80009a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009a4:	484e      	ldr	r0, [pc, #312]	@ (8000ae0 <_svfiprintf_r+0x1e4>)
 80009a6:	f7ff fc1b 	bl	80001e0 <memchr>
 80009aa:	9a04      	ldr	r2, [sp, #16]
 80009ac:	b9d8      	cbnz	r0, 80009e6 <_svfiprintf_r+0xea>
 80009ae:	06d0      	lsls	r0, r2, #27
 80009b0:	bf44      	itt	mi
 80009b2:	2320      	movmi	r3, #32
 80009b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009b8:	0711      	lsls	r1, r2, #28
 80009ba:	bf44      	itt	mi
 80009bc:	232b      	movmi	r3, #43	@ 0x2b
 80009be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009c2:	f89a 3000 	ldrb.w	r3, [sl]
 80009c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80009c8:	d015      	beq.n	80009f6 <_svfiprintf_r+0xfa>
 80009ca:	9a07      	ldr	r2, [sp, #28]
 80009cc:	4654      	mov	r4, sl
 80009ce:	2000      	movs	r0, #0
 80009d0:	f04f 0c0a 	mov.w	ip, #10
 80009d4:	4621      	mov	r1, r4
 80009d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009da:	3b30      	subs	r3, #48	@ 0x30
 80009dc:	2b09      	cmp	r3, #9
 80009de:	d94b      	bls.n	8000a78 <_svfiprintf_r+0x17c>
 80009e0:	b1b0      	cbz	r0, 8000a10 <_svfiprintf_r+0x114>
 80009e2:	9207      	str	r2, [sp, #28]
 80009e4:	e014      	b.n	8000a10 <_svfiprintf_r+0x114>
 80009e6:	eba0 0308 	sub.w	r3, r0, r8
 80009ea:	fa09 f303 	lsl.w	r3, r9, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	9304      	str	r3, [sp, #16]
 80009f2:	46a2      	mov	sl, r4
 80009f4:	e7d2      	b.n	800099c <_svfiprintf_r+0xa0>
 80009f6:	9b03      	ldr	r3, [sp, #12]
 80009f8:	1d19      	adds	r1, r3, #4
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	9103      	str	r1, [sp, #12]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bfbb      	ittet	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	f042 0202 	orrlt.w	r2, r2, #2
 8000a08:	9307      	strge	r3, [sp, #28]
 8000a0a:	9307      	strlt	r3, [sp, #28]
 8000a0c:	bfb8      	it	lt
 8000a0e:	9204      	strlt	r2, [sp, #16]
 8000a10:	7823      	ldrb	r3, [r4, #0]
 8000a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a14:	d10a      	bne.n	8000a2c <_svfiprintf_r+0x130>
 8000a16:	7863      	ldrb	r3, [r4, #1]
 8000a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a1a:	d132      	bne.n	8000a82 <_svfiprintf_r+0x186>
 8000a1c:	9b03      	ldr	r3, [sp, #12]
 8000a1e:	1d1a      	adds	r2, r3, #4
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	9203      	str	r2, [sp, #12]
 8000a24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a28:	3402      	adds	r4, #2
 8000a2a:	9305      	str	r3, [sp, #20]
 8000a2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000af0 <_svfiprintf_r+0x1f4>
 8000a30:	7821      	ldrb	r1, [r4, #0]
 8000a32:	2203      	movs	r2, #3
 8000a34:	4650      	mov	r0, sl
 8000a36:	f7ff fbd3 	bl	80001e0 <memchr>
 8000a3a:	b138      	cbz	r0, 8000a4c <_svfiprintf_r+0x150>
 8000a3c:	9b04      	ldr	r3, [sp, #16]
 8000a3e:	eba0 000a 	sub.w	r0, r0, sl
 8000a42:	2240      	movs	r2, #64	@ 0x40
 8000a44:	4082      	lsls	r2, r0
 8000a46:	4313      	orrs	r3, r2
 8000a48:	3401      	adds	r4, #1
 8000a4a:	9304      	str	r3, [sp, #16]
 8000a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a50:	4824      	ldr	r0, [pc, #144]	@ (8000ae4 <_svfiprintf_r+0x1e8>)
 8000a52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a56:	2206      	movs	r2, #6
 8000a58:	f7ff fbc2 	bl	80001e0 <memchr>
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	d036      	beq.n	8000ace <_svfiprintf_r+0x1d2>
 8000a60:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <_svfiprintf_r+0x1ec>)
 8000a62:	bb1b      	cbnz	r3, 8000aac <_svfiprintf_r+0x1b0>
 8000a64:	9b03      	ldr	r3, [sp, #12]
 8000a66:	3307      	adds	r3, #7
 8000a68:	f023 0307 	bic.w	r3, r3, #7
 8000a6c:	3308      	adds	r3, #8
 8000a6e:	9303      	str	r3, [sp, #12]
 8000a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a72:	4433      	add	r3, r6
 8000a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a76:	e76a      	b.n	800094e <_svfiprintf_r+0x52>
 8000a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a7c:	460c      	mov	r4, r1
 8000a7e:	2001      	movs	r0, #1
 8000a80:	e7a8      	b.n	80009d4 <_svfiprintf_r+0xd8>
 8000a82:	2300      	movs	r3, #0
 8000a84:	3401      	adds	r4, #1
 8000a86:	9305      	str	r3, [sp, #20]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 0c0a 	mov.w	ip, #10
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a94:	3a30      	subs	r2, #48	@ 0x30
 8000a96:	2a09      	cmp	r2, #9
 8000a98:	d903      	bls.n	8000aa2 <_svfiprintf_r+0x1a6>
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0c6      	beq.n	8000a2c <_svfiprintf_r+0x130>
 8000a9e:	9105      	str	r1, [sp, #20]
 8000aa0:	e7c4      	b.n	8000a2c <_svfiprintf_r+0x130>
 8000aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e7f0      	b.n	8000a8e <_svfiprintf_r+0x192>
 8000aac:	ab03      	add	r3, sp, #12
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	462a      	mov	r2, r5
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <_svfiprintf_r+0x1f0>)
 8000ab4:	a904      	add	r1, sp, #16
 8000ab6:	4638      	mov	r0, r7
 8000ab8:	f3af 8000 	nop.w
 8000abc:	1c42      	adds	r2, r0, #1
 8000abe:	4606      	mov	r6, r0
 8000ac0:	d1d6      	bne.n	8000a70 <_svfiprintf_r+0x174>
 8000ac2:	89ab      	ldrh	r3, [r5, #12]
 8000ac4:	065b      	lsls	r3, r3, #25
 8000ac6:	f53f af2d 	bmi.w	8000924 <_svfiprintf_r+0x28>
 8000aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000acc:	e72c      	b.n	8000928 <_svfiprintf_r+0x2c>
 8000ace:	ab03      	add	r3, sp, #12
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	462a      	mov	r2, r5
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <_svfiprintf_r+0x1f0>)
 8000ad6:	a904      	add	r1, sp, #16
 8000ad8:	4638      	mov	r0, r7
 8000ada:	f000 f91b 	bl	8000d14 <_printf_i>
 8000ade:	e7ed      	b.n	8000abc <_svfiprintf_r+0x1c0>
 8000ae0:	0800117b 	.word	0x0800117b
 8000ae4:	08001185 	.word	0x08001185
 8000ae8:	00000000 	.word	0x00000000
 8000aec:	08000845 	.word	0x08000845
 8000af0:	08001181 	.word	0x08001181

08000af4 <sbrk_aligned>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	4e0f      	ldr	r6, [pc, #60]	@ (8000b34 <sbrk_aligned+0x40>)
 8000af8:	460c      	mov	r4, r1
 8000afa:	6831      	ldr	r1, [r6, #0]
 8000afc:	4605      	mov	r5, r0
 8000afe:	b911      	cbnz	r1, 8000b06 <sbrk_aligned+0x12>
 8000b00:	f000 fa7c 	bl	8000ffc <_sbrk_r>
 8000b04:	6030      	str	r0, [r6, #0]
 8000b06:	4621      	mov	r1, r4
 8000b08:	4628      	mov	r0, r5
 8000b0a:	f000 fa77 	bl	8000ffc <_sbrk_r>
 8000b0e:	1c43      	adds	r3, r0, #1
 8000b10:	d103      	bne.n	8000b1a <sbrk_aligned+0x26>
 8000b12:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b16:	4620      	mov	r0, r4
 8000b18:	bd70      	pop	{r4, r5, r6, pc}
 8000b1a:	1cc4      	adds	r4, r0, #3
 8000b1c:	f024 0403 	bic.w	r4, r4, #3
 8000b20:	42a0      	cmp	r0, r4
 8000b22:	d0f8      	beq.n	8000b16 <sbrk_aligned+0x22>
 8000b24:	1a21      	subs	r1, r4, r0
 8000b26:	4628      	mov	r0, r5
 8000b28:	f000 fa68 	bl	8000ffc <_sbrk_r>
 8000b2c:	3001      	adds	r0, #1
 8000b2e:	d1f2      	bne.n	8000b16 <sbrk_aligned+0x22>
 8000b30:	e7ef      	b.n	8000b12 <sbrk_aligned+0x1e>
 8000b32:	bf00      	nop
 8000b34:	200004d8 	.word	0x200004d8

08000b38 <_malloc_r>:
 8000b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b3c:	1ccd      	adds	r5, r1, #3
 8000b3e:	f025 0503 	bic.w	r5, r5, #3
 8000b42:	3508      	adds	r5, #8
 8000b44:	2d0c      	cmp	r5, #12
 8000b46:	bf38      	it	cc
 8000b48:	250c      	movcc	r5, #12
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	4606      	mov	r6, r0
 8000b4e:	db01      	blt.n	8000b54 <_malloc_r+0x1c>
 8000b50:	42a9      	cmp	r1, r5
 8000b52:	d904      	bls.n	8000b5e <_malloc_r+0x26>
 8000b54:	230c      	movs	r3, #12
 8000b56:	6033      	str	r3, [r6, #0]
 8000b58:	2000      	movs	r0, #0
 8000b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c34 <_malloc_r+0xfc>
 8000b62:	f000 f9f7 	bl	8000f54 <__malloc_lock>
 8000b66:	f8d8 3000 	ldr.w	r3, [r8]
 8000b6a:	461c      	mov	r4, r3
 8000b6c:	bb44      	cbnz	r4, 8000bc0 <_malloc_r+0x88>
 8000b6e:	4629      	mov	r1, r5
 8000b70:	4630      	mov	r0, r6
 8000b72:	f7ff ffbf 	bl	8000af4 <sbrk_aligned>
 8000b76:	1c43      	adds	r3, r0, #1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	d158      	bne.n	8000c2e <_malloc_r+0xf6>
 8000b7c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b80:	4627      	mov	r7, r4
 8000b82:	2f00      	cmp	r7, #0
 8000b84:	d143      	bne.n	8000c0e <_malloc_r+0xd6>
 8000b86:	2c00      	cmp	r4, #0
 8000b88:	d04b      	beq.n	8000c22 <_malloc_r+0xea>
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	4630      	mov	r0, r6
 8000b90:	eb04 0903 	add.w	r9, r4, r3
 8000b94:	f000 fa32 	bl	8000ffc <_sbrk_r>
 8000b98:	4581      	cmp	r9, r0
 8000b9a:	d142      	bne.n	8000c22 <_malloc_r+0xea>
 8000b9c:	6821      	ldr	r1, [r4, #0]
 8000b9e:	1a6d      	subs	r5, r5, r1
 8000ba0:	4629      	mov	r1, r5
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	f7ff ffa6 	bl	8000af4 <sbrk_aligned>
 8000ba8:	3001      	adds	r0, #1
 8000baa:	d03a      	beq.n	8000c22 <_malloc_r+0xea>
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	442b      	add	r3, r5
 8000bb0:	6023      	str	r3, [r4, #0]
 8000bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	bb62      	cbnz	r2, 8000c14 <_malloc_r+0xdc>
 8000bba:	f8c8 7000 	str.w	r7, [r8]
 8000bbe:	e00f      	b.n	8000be0 <_malloc_r+0xa8>
 8000bc0:	6822      	ldr	r2, [r4, #0]
 8000bc2:	1b52      	subs	r2, r2, r5
 8000bc4:	d420      	bmi.n	8000c08 <_malloc_r+0xd0>
 8000bc6:	2a0b      	cmp	r2, #11
 8000bc8:	d917      	bls.n	8000bfa <_malloc_r+0xc2>
 8000bca:	1961      	adds	r1, r4, r5
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	6025      	str	r5, [r4, #0]
 8000bd0:	bf18      	it	ne
 8000bd2:	6059      	strne	r1, [r3, #4]
 8000bd4:	6863      	ldr	r3, [r4, #4]
 8000bd6:	bf08      	it	eq
 8000bd8:	f8c8 1000 	streq.w	r1, [r8]
 8000bdc:	5162      	str	r2, [r4, r5]
 8000bde:	604b      	str	r3, [r1, #4]
 8000be0:	4630      	mov	r0, r6
 8000be2:	f000 f9bd 	bl	8000f60 <__malloc_unlock>
 8000be6:	f104 000b 	add.w	r0, r4, #11
 8000bea:	1d23      	adds	r3, r4, #4
 8000bec:	f020 0007 	bic.w	r0, r0, #7
 8000bf0:	1ac2      	subs	r2, r0, r3
 8000bf2:	bf1c      	itt	ne
 8000bf4:	1a1b      	subne	r3, r3, r0
 8000bf6:	50a3      	strne	r3, [r4, r2]
 8000bf8:	e7af      	b.n	8000b5a <_malloc_r+0x22>
 8000bfa:	6862      	ldr	r2, [r4, #4]
 8000bfc:	42a3      	cmp	r3, r4
 8000bfe:	bf0c      	ite	eq
 8000c00:	f8c8 2000 	streq.w	r2, [r8]
 8000c04:	605a      	strne	r2, [r3, #4]
 8000c06:	e7eb      	b.n	8000be0 <_malloc_r+0xa8>
 8000c08:	4623      	mov	r3, r4
 8000c0a:	6864      	ldr	r4, [r4, #4]
 8000c0c:	e7ae      	b.n	8000b6c <_malloc_r+0x34>
 8000c0e:	463c      	mov	r4, r7
 8000c10:	687f      	ldr	r7, [r7, #4]
 8000c12:	e7b6      	b.n	8000b82 <_malloc_r+0x4a>
 8000c14:	461a      	mov	r2, r3
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	42a3      	cmp	r3, r4
 8000c1a:	d1fb      	bne.n	8000c14 <_malloc_r+0xdc>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	6053      	str	r3, [r2, #4]
 8000c20:	e7de      	b.n	8000be0 <_malloc_r+0xa8>
 8000c22:	230c      	movs	r3, #12
 8000c24:	6033      	str	r3, [r6, #0]
 8000c26:	4630      	mov	r0, r6
 8000c28:	f000 f99a 	bl	8000f60 <__malloc_unlock>
 8000c2c:	e794      	b.n	8000b58 <_malloc_r+0x20>
 8000c2e:	6005      	str	r5, [r0, #0]
 8000c30:	e7d6      	b.n	8000be0 <_malloc_r+0xa8>
 8000c32:	bf00      	nop
 8000c34:	200004dc 	.word	0x200004dc

08000c38 <_printf_common>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	4616      	mov	r6, r2
 8000c3e:	4698      	mov	r8, r3
 8000c40:	688a      	ldr	r2, [r1, #8]
 8000c42:	690b      	ldr	r3, [r1, #16]
 8000c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	bfb8      	it	lt
 8000c4c:	4613      	movlt	r3, r2
 8000c4e:	6033      	str	r3, [r6, #0]
 8000c50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c54:	4607      	mov	r7, r0
 8000c56:	460c      	mov	r4, r1
 8000c58:	b10a      	cbz	r2, 8000c5e <_printf_common+0x26>
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	6033      	str	r3, [r6, #0]
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	0699      	lsls	r1, r3, #26
 8000c62:	bf42      	ittt	mi
 8000c64:	6833      	ldrmi	r3, [r6, #0]
 8000c66:	3302      	addmi	r3, #2
 8000c68:	6033      	strmi	r3, [r6, #0]
 8000c6a:	6825      	ldr	r5, [r4, #0]
 8000c6c:	f015 0506 	ands.w	r5, r5, #6
 8000c70:	d106      	bne.n	8000c80 <_printf_common+0x48>
 8000c72:	f104 0a19 	add.w	sl, r4, #25
 8000c76:	68e3      	ldr	r3, [r4, #12]
 8000c78:	6832      	ldr	r2, [r6, #0]
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	42ab      	cmp	r3, r5
 8000c7e:	dc26      	bgt.n	8000cce <_printf_common+0x96>
 8000c80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c84:	6822      	ldr	r2, [r4, #0]
 8000c86:	3b00      	subs	r3, #0
 8000c88:	bf18      	it	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	0692      	lsls	r2, r2, #26
 8000c8e:	d42b      	bmi.n	8000ce8 <_printf_common+0xb0>
 8000c90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c94:	4641      	mov	r1, r8
 8000c96:	4638      	mov	r0, r7
 8000c98:	47c8      	blx	r9
 8000c9a:	3001      	adds	r0, #1
 8000c9c:	d01e      	beq.n	8000cdc <_printf_common+0xa4>
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	6922      	ldr	r2, [r4, #16]
 8000ca2:	f003 0306 	and.w	r3, r3, #6
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf02      	ittt	eq
 8000caa:	68e5      	ldreq	r5, [r4, #12]
 8000cac:	6833      	ldreq	r3, [r6, #0]
 8000cae:	1aed      	subeq	r5, r5, r3
 8000cb0:	68a3      	ldr	r3, [r4, #8]
 8000cb2:	bf0c      	ite	eq
 8000cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cb8:	2500      	movne	r5, #0
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	bfc4      	itt	gt
 8000cbe:	1a9b      	subgt	r3, r3, r2
 8000cc0:	18ed      	addgt	r5, r5, r3
 8000cc2:	2600      	movs	r6, #0
 8000cc4:	341a      	adds	r4, #26
 8000cc6:	42b5      	cmp	r5, r6
 8000cc8:	d11a      	bne.n	8000d00 <_printf_common+0xc8>
 8000cca:	2000      	movs	r0, #0
 8000ccc:	e008      	b.n	8000ce0 <_printf_common+0xa8>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	4641      	mov	r1, r8
 8000cd4:	4638      	mov	r0, r7
 8000cd6:	47c8      	blx	r9
 8000cd8:	3001      	adds	r0, #1
 8000cda:	d103      	bne.n	8000ce4 <_printf_common+0xac>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	3501      	adds	r5, #1
 8000ce6:	e7c6      	b.n	8000c76 <_printf_common+0x3e>
 8000ce8:	18e1      	adds	r1, r4, r3
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	2030      	movs	r0, #48	@ 0x30
 8000cee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000cf2:	4422      	add	r2, r4
 8000cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000cf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	e7c7      	b.n	8000c90 <_printf_common+0x58>
 8000d00:	2301      	movs	r3, #1
 8000d02:	4622      	mov	r2, r4
 8000d04:	4641      	mov	r1, r8
 8000d06:	4638      	mov	r0, r7
 8000d08:	47c8      	blx	r9
 8000d0a:	3001      	adds	r0, #1
 8000d0c:	d0e6      	beq.n	8000cdc <_printf_common+0xa4>
 8000d0e:	3601      	adds	r6, #1
 8000d10:	e7d9      	b.n	8000cc6 <_printf_common+0x8e>
	...

08000d14 <_printf_i>:
 8000d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	7e0f      	ldrb	r7, [r1, #24]
 8000d1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d1c:	2f78      	cmp	r7, #120	@ 0x78
 8000d1e:	4691      	mov	r9, r2
 8000d20:	4680      	mov	r8, r0
 8000d22:	460c      	mov	r4, r1
 8000d24:	469a      	mov	sl, r3
 8000d26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d2a:	d807      	bhi.n	8000d3c <_printf_i+0x28>
 8000d2c:	2f62      	cmp	r7, #98	@ 0x62
 8000d2e:	d80a      	bhi.n	8000d46 <_printf_i+0x32>
 8000d30:	2f00      	cmp	r7, #0
 8000d32:	f000 80d2 	beq.w	8000eda <_printf_i+0x1c6>
 8000d36:	2f58      	cmp	r7, #88	@ 0x58
 8000d38:	f000 80b9 	beq.w	8000eae <_printf_i+0x19a>
 8000d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d44:	e03a      	b.n	8000dbc <_printf_i+0xa8>
 8000d46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d4a:	2b15      	cmp	r3, #21
 8000d4c:	d8f6      	bhi.n	8000d3c <_printf_i+0x28>
 8000d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8000d54 <_printf_i+0x40>)
 8000d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d54:	08000dad 	.word	0x08000dad
 8000d58:	08000dc1 	.word	0x08000dc1
 8000d5c:	08000d3d 	.word	0x08000d3d
 8000d60:	08000d3d 	.word	0x08000d3d
 8000d64:	08000d3d 	.word	0x08000d3d
 8000d68:	08000d3d 	.word	0x08000d3d
 8000d6c:	08000dc1 	.word	0x08000dc1
 8000d70:	08000d3d 	.word	0x08000d3d
 8000d74:	08000d3d 	.word	0x08000d3d
 8000d78:	08000d3d 	.word	0x08000d3d
 8000d7c:	08000d3d 	.word	0x08000d3d
 8000d80:	08000ec1 	.word	0x08000ec1
 8000d84:	08000deb 	.word	0x08000deb
 8000d88:	08000e7b 	.word	0x08000e7b
 8000d8c:	08000d3d 	.word	0x08000d3d
 8000d90:	08000d3d 	.word	0x08000d3d
 8000d94:	08000ee3 	.word	0x08000ee3
 8000d98:	08000d3d 	.word	0x08000d3d
 8000d9c:	08000deb 	.word	0x08000deb
 8000da0:	08000d3d 	.word	0x08000d3d
 8000da4:	08000d3d 	.word	0x08000d3d
 8000da8:	08000e83 	.word	0x08000e83
 8000dac:	6833      	ldr	r3, [r6, #0]
 8000dae:	1d1a      	adds	r2, r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6032      	str	r2, [r6, #0]
 8000db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000db8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e09d      	b.n	8000efc <_printf_i+0x1e8>
 8000dc0:	6833      	ldr	r3, [r6, #0]
 8000dc2:	6820      	ldr	r0, [r4, #0]
 8000dc4:	1d19      	adds	r1, r3, #4
 8000dc6:	6031      	str	r1, [r6, #0]
 8000dc8:	0606      	lsls	r6, r0, #24
 8000dca:	d501      	bpl.n	8000dd0 <_printf_i+0xbc>
 8000dcc:	681d      	ldr	r5, [r3, #0]
 8000dce:	e003      	b.n	8000dd8 <_printf_i+0xc4>
 8000dd0:	0645      	lsls	r5, r0, #25
 8000dd2:	d5fb      	bpl.n	8000dcc <_printf_i+0xb8>
 8000dd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000dd8:	2d00      	cmp	r5, #0
 8000dda:	da03      	bge.n	8000de4 <_printf_i+0xd0>
 8000ddc:	232d      	movs	r3, #45	@ 0x2d
 8000dde:	426d      	negs	r5, r5
 8000de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000de4:	4859      	ldr	r0, [pc, #356]	@ (8000f4c <_printf_i+0x238>)
 8000de6:	230a      	movs	r3, #10
 8000de8:	e011      	b.n	8000e0e <_printf_i+0xfa>
 8000dea:	6821      	ldr	r1, [r4, #0]
 8000dec:	6833      	ldr	r3, [r6, #0]
 8000dee:	0608      	lsls	r0, r1, #24
 8000df0:	f853 5b04 	ldr.w	r5, [r3], #4
 8000df4:	d402      	bmi.n	8000dfc <_printf_i+0xe8>
 8000df6:	0649      	lsls	r1, r1, #25
 8000df8:	bf48      	it	mi
 8000dfa:	b2ad      	uxthmi	r5, r5
 8000dfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8000dfe:	4853      	ldr	r0, [pc, #332]	@ (8000f4c <_printf_i+0x238>)
 8000e00:	6033      	str	r3, [r6, #0]
 8000e02:	bf14      	ite	ne
 8000e04:	230a      	movne	r3, #10
 8000e06:	2308      	moveq	r3, #8
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e0e:	6866      	ldr	r6, [r4, #4]
 8000e10:	60a6      	str	r6, [r4, #8]
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	bfa2      	ittt	ge
 8000e16:	6821      	ldrge	r1, [r4, #0]
 8000e18:	f021 0104 	bicge.w	r1, r1, #4
 8000e1c:	6021      	strge	r1, [r4, #0]
 8000e1e:	b90d      	cbnz	r5, 8000e24 <_printf_i+0x110>
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d04b      	beq.n	8000ebc <_printf_i+0x1a8>
 8000e24:	4616      	mov	r6, r2
 8000e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8000e2e:	5dc7      	ldrb	r7, [r0, r7]
 8000e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e34:	462f      	mov	r7, r5
 8000e36:	42bb      	cmp	r3, r7
 8000e38:	460d      	mov	r5, r1
 8000e3a:	d9f4      	bls.n	8000e26 <_printf_i+0x112>
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d10b      	bne.n	8000e58 <_printf_i+0x144>
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	07df      	lsls	r7, r3, #31
 8000e44:	d508      	bpl.n	8000e58 <_printf_i+0x144>
 8000e46:	6923      	ldr	r3, [r4, #16]
 8000e48:	6861      	ldr	r1, [r4, #4]
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	bfde      	ittt	le
 8000e4e:	2330      	movle	r3, #48	@ 0x30
 8000e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e54:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e58:	1b92      	subs	r2, r2, r6
 8000e5a:	6122      	str	r2, [r4, #16]
 8000e5c:	f8cd a000 	str.w	sl, [sp]
 8000e60:	464b      	mov	r3, r9
 8000e62:	aa03      	add	r2, sp, #12
 8000e64:	4621      	mov	r1, r4
 8000e66:	4640      	mov	r0, r8
 8000e68:	f7ff fee6 	bl	8000c38 <_printf_common>
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	d14a      	bne.n	8000f06 <_printf_i+0x1f2>
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e74:	b004      	add	sp, #16
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	f043 0320 	orr.w	r3, r3, #32
 8000e80:	6023      	str	r3, [r4, #0]
 8000e82:	4833      	ldr	r0, [pc, #204]	@ (8000f50 <_printf_i+0x23c>)
 8000e84:	2778      	movs	r7, #120	@ 0x78
 8000e86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	6831      	ldr	r1, [r6, #0]
 8000e8e:	061f      	lsls	r7, r3, #24
 8000e90:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e94:	d402      	bmi.n	8000e9c <_printf_i+0x188>
 8000e96:	065f      	lsls	r7, r3, #25
 8000e98:	bf48      	it	mi
 8000e9a:	b2ad      	uxthmi	r5, r5
 8000e9c:	6031      	str	r1, [r6, #0]
 8000e9e:	07d9      	lsls	r1, r3, #31
 8000ea0:	bf44      	itt	mi
 8000ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8000ea6:	6023      	strmi	r3, [r4, #0]
 8000ea8:	b11d      	cbz	r5, 8000eb2 <_printf_i+0x19e>
 8000eaa:	2310      	movs	r3, #16
 8000eac:	e7ac      	b.n	8000e08 <_printf_i+0xf4>
 8000eae:	4827      	ldr	r0, [pc, #156]	@ (8000f4c <_printf_i+0x238>)
 8000eb0:	e7e9      	b.n	8000e86 <_printf_i+0x172>
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	f023 0320 	bic.w	r3, r3, #32
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	e7f6      	b.n	8000eaa <_printf_i+0x196>
 8000ebc:	4616      	mov	r6, r2
 8000ebe:	e7bd      	b.n	8000e3c <_printf_i+0x128>
 8000ec0:	6833      	ldr	r3, [r6, #0]
 8000ec2:	6825      	ldr	r5, [r4, #0]
 8000ec4:	6961      	ldr	r1, [r4, #20]
 8000ec6:	1d18      	adds	r0, r3, #4
 8000ec8:	6030      	str	r0, [r6, #0]
 8000eca:	062e      	lsls	r6, r5, #24
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	d501      	bpl.n	8000ed4 <_printf_i+0x1c0>
 8000ed0:	6019      	str	r1, [r3, #0]
 8000ed2:	e002      	b.n	8000eda <_printf_i+0x1c6>
 8000ed4:	0668      	lsls	r0, r5, #25
 8000ed6:	d5fb      	bpl.n	8000ed0 <_printf_i+0x1bc>
 8000ed8:	8019      	strh	r1, [r3, #0]
 8000eda:	2300      	movs	r3, #0
 8000edc:	6123      	str	r3, [r4, #16]
 8000ede:	4616      	mov	r6, r2
 8000ee0:	e7bc      	b.n	8000e5c <_printf_i+0x148>
 8000ee2:	6833      	ldr	r3, [r6, #0]
 8000ee4:	1d1a      	adds	r2, r3, #4
 8000ee6:	6032      	str	r2, [r6, #0]
 8000ee8:	681e      	ldr	r6, [r3, #0]
 8000eea:	6862      	ldr	r2, [r4, #4]
 8000eec:	2100      	movs	r1, #0
 8000eee:	4630      	mov	r0, r6
 8000ef0:	f7ff f976 	bl	80001e0 <memchr>
 8000ef4:	b108      	cbz	r0, 8000efa <_printf_i+0x1e6>
 8000ef6:	1b80      	subs	r0, r0, r6
 8000ef8:	6060      	str	r0, [r4, #4]
 8000efa:	6863      	ldr	r3, [r4, #4]
 8000efc:	6123      	str	r3, [r4, #16]
 8000efe:	2300      	movs	r3, #0
 8000f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f04:	e7aa      	b.n	8000e5c <_printf_i+0x148>
 8000f06:	6923      	ldr	r3, [r4, #16]
 8000f08:	4632      	mov	r2, r6
 8000f0a:	4649      	mov	r1, r9
 8000f0c:	4640      	mov	r0, r8
 8000f0e:	47d0      	blx	sl
 8000f10:	3001      	adds	r0, #1
 8000f12:	d0ad      	beq.n	8000e70 <_printf_i+0x15c>
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	079b      	lsls	r3, r3, #30
 8000f18:	d413      	bmi.n	8000f42 <_printf_i+0x22e>
 8000f1a:	68e0      	ldr	r0, [r4, #12]
 8000f1c:	9b03      	ldr	r3, [sp, #12]
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	bfb8      	it	lt
 8000f22:	4618      	movlt	r0, r3
 8000f24:	e7a6      	b.n	8000e74 <_printf_i+0x160>
 8000f26:	2301      	movs	r3, #1
 8000f28:	4632      	mov	r2, r6
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	47d0      	blx	sl
 8000f30:	3001      	adds	r0, #1
 8000f32:	d09d      	beq.n	8000e70 <_printf_i+0x15c>
 8000f34:	3501      	adds	r5, #1
 8000f36:	68e3      	ldr	r3, [r4, #12]
 8000f38:	9903      	ldr	r1, [sp, #12]
 8000f3a:	1a5b      	subs	r3, r3, r1
 8000f3c:	42ab      	cmp	r3, r5
 8000f3e:	dcf2      	bgt.n	8000f26 <_printf_i+0x212>
 8000f40:	e7eb      	b.n	8000f1a <_printf_i+0x206>
 8000f42:	2500      	movs	r5, #0
 8000f44:	f104 0619 	add.w	r6, r4, #25
 8000f48:	e7f5      	b.n	8000f36 <_printf_i+0x222>
 8000f4a:	bf00      	nop
 8000f4c:	0800118c 	.word	0x0800118c
 8000f50:	0800119d 	.word	0x0800119d

08000f54 <__malloc_lock>:
 8000f54:	4801      	ldr	r0, [pc, #4]	@ (8000f5c <__malloc_lock+0x8>)
 8000f56:	f7ff bc73 	b.w	8000840 <__retarget_lock_acquire_recursive>
 8000f5a:	bf00      	nop
 8000f5c:	200004d4 	.word	0x200004d4

08000f60 <__malloc_unlock>:
 8000f60:	4801      	ldr	r0, [pc, #4]	@ (8000f68 <__malloc_unlock+0x8>)
 8000f62:	f7ff bc6e 	b.w	8000842 <__retarget_lock_release_recursive>
 8000f66:	bf00      	nop
 8000f68:	200004d4 	.word	0x200004d4

08000f6c <_realloc_r>:
 8000f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f70:	4680      	mov	r8, r0
 8000f72:	4615      	mov	r5, r2
 8000f74:	460c      	mov	r4, r1
 8000f76:	b921      	cbnz	r1, 8000f82 <_realloc_r+0x16>
 8000f78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	f7ff bddb 	b.w	8000b38 <_malloc_r>
 8000f82:	b92a      	cbnz	r2, 8000f90 <_realloc_r+0x24>
 8000f84:	f000 f858 	bl	8001038 <_free_r>
 8000f88:	2400      	movs	r4, #0
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f90:	f000 f89c 	bl	80010cc <_malloc_usable_size_r>
 8000f94:	4285      	cmp	r5, r0
 8000f96:	4606      	mov	r6, r0
 8000f98:	d802      	bhi.n	8000fa0 <_realloc_r+0x34>
 8000f9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000f9e:	d8f4      	bhi.n	8000f8a <_realloc_r+0x1e>
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	f7ff fdc8 	bl	8000b38 <_malloc_r>
 8000fa8:	4607      	mov	r7, r0
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d0ec      	beq.n	8000f88 <_realloc_r+0x1c>
 8000fae:	42b5      	cmp	r5, r6
 8000fb0:	462a      	mov	r2, r5
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	bf28      	it	cs
 8000fb6:	4632      	movcs	r2, r6
 8000fb8:	f000 f830 	bl	800101c <memcpy>
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	4640      	mov	r0, r8
 8000fc0:	f000 f83a 	bl	8001038 <_free_r>
 8000fc4:	463c      	mov	r4, r7
 8000fc6:	e7e0      	b.n	8000f8a <_realloc_r+0x1e>

08000fc8 <memmove>:
 8000fc8:	4288      	cmp	r0, r1
 8000fca:	b510      	push	{r4, lr}
 8000fcc:	eb01 0402 	add.w	r4, r1, r2
 8000fd0:	d902      	bls.n	8000fd8 <memmove+0x10>
 8000fd2:	4284      	cmp	r4, r0
 8000fd4:	4623      	mov	r3, r4
 8000fd6:	d807      	bhi.n	8000fe8 <memmove+0x20>
 8000fd8:	1e43      	subs	r3, r0, #1
 8000fda:	42a1      	cmp	r1, r4
 8000fdc:	d008      	beq.n	8000ff0 <memmove+0x28>
 8000fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000fe6:	e7f8      	b.n	8000fda <memmove+0x12>
 8000fe8:	4402      	add	r2, r0
 8000fea:	4601      	mov	r1, r0
 8000fec:	428a      	cmp	r2, r1
 8000fee:	d100      	bne.n	8000ff2 <memmove+0x2a>
 8000ff0:	bd10      	pop	{r4, pc}
 8000ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000ffa:	e7f7      	b.n	8000fec <memmove+0x24>

08000ffc <_sbrk_r>:
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4d06      	ldr	r5, [pc, #24]	@ (8001018 <_sbrk_r+0x1c>)
 8001000:	2300      	movs	r3, #0
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	f7ff fb68 	bl	80006dc <_sbrk>
 800100c:	1c43      	adds	r3, r0, #1
 800100e:	d102      	bne.n	8001016 <_sbrk_r+0x1a>
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	b103      	cbz	r3, 8001016 <_sbrk_r+0x1a>
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	bd38      	pop	{r3, r4, r5, pc}
 8001018:	200004e0 	.word	0x200004e0

0800101c <memcpy>:
 800101c:	440a      	add	r2, r1
 800101e:	4291      	cmp	r1, r2
 8001020:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001024:	d100      	bne.n	8001028 <memcpy+0xc>
 8001026:	4770      	bx	lr
 8001028:	b510      	push	{r4, lr}
 800102a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800102e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001032:	4291      	cmp	r1, r2
 8001034:	d1f9      	bne.n	800102a <memcpy+0xe>
 8001036:	bd10      	pop	{r4, pc}

08001038 <_free_r>:
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	4605      	mov	r5, r0
 800103c:	2900      	cmp	r1, #0
 800103e:	d041      	beq.n	80010c4 <_free_r+0x8c>
 8001040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001044:	1f0c      	subs	r4, r1, #4
 8001046:	2b00      	cmp	r3, #0
 8001048:	bfb8      	it	lt
 800104a:	18e4      	addlt	r4, r4, r3
 800104c:	f7ff ff82 	bl	8000f54 <__malloc_lock>
 8001050:	4a1d      	ldr	r2, [pc, #116]	@ (80010c8 <_free_r+0x90>)
 8001052:	6813      	ldr	r3, [r2, #0]
 8001054:	b933      	cbnz	r3, 8001064 <_free_r+0x2c>
 8001056:	6063      	str	r3, [r4, #4]
 8001058:	6014      	str	r4, [r2, #0]
 800105a:	4628      	mov	r0, r5
 800105c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001060:	f7ff bf7e 	b.w	8000f60 <__malloc_unlock>
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <_free_r+0x42>
 8001068:	6820      	ldr	r0, [r4, #0]
 800106a:	1821      	adds	r1, r4, r0
 800106c:	428b      	cmp	r3, r1
 800106e:	bf01      	itttt	eq
 8001070:	6819      	ldreq	r1, [r3, #0]
 8001072:	685b      	ldreq	r3, [r3, #4]
 8001074:	1809      	addeq	r1, r1, r0
 8001076:	6021      	streq	r1, [r4, #0]
 8001078:	e7ed      	b.n	8001056 <_free_r+0x1e>
 800107a:	461a      	mov	r2, r3
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	b10b      	cbz	r3, 8001084 <_free_r+0x4c>
 8001080:	42a3      	cmp	r3, r4
 8001082:	d9fa      	bls.n	800107a <_free_r+0x42>
 8001084:	6811      	ldr	r1, [r2, #0]
 8001086:	1850      	adds	r0, r2, r1
 8001088:	42a0      	cmp	r0, r4
 800108a:	d10b      	bne.n	80010a4 <_free_r+0x6c>
 800108c:	6820      	ldr	r0, [r4, #0]
 800108e:	4401      	add	r1, r0
 8001090:	1850      	adds	r0, r2, r1
 8001092:	4283      	cmp	r3, r0
 8001094:	6011      	str	r1, [r2, #0]
 8001096:	d1e0      	bne.n	800105a <_free_r+0x22>
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	6053      	str	r3, [r2, #4]
 800109e:	4408      	add	r0, r1
 80010a0:	6010      	str	r0, [r2, #0]
 80010a2:	e7da      	b.n	800105a <_free_r+0x22>
 80010a4:	d902      	bls.n	80010ac <_free_r+0x74>
 80010a6:	230c      	movs	r3, #12
 80010a8:	602b      	str	r3, [r5, #0]
 80010aa:	e7d6      	b.n	800105a <_free_r+0x22>
 80010ac:	6820      	ldr	r0, [r4, #0]
 80010ae:	1821      	adds	r1, r4, r0
 80010b0:	428b      	cmp	r3, r1
 80010b2:	bf04      	itt	eq
 80010b4:	6819      	ldreq	r1, [r3, #0]
 80010b6:	685b      	ldreq	r3, [r3, #4]
 80010b8:	6063      	str	r3, [r4, #4]
 80010ba:	bf04      	itt	eq
 80010bc:	1809      	addeq	r1, r1, r0
 80010be:	6021      	streq	r1, [r4, #0]
 80010c0:	6054      	str	r4, [r2, #4]
 80010c2:	e7ca      	b.n	800105a <_free_r+0x22>
 80010c4:	bd38      	pop	{r3, r4, r5, pc}
 80010c6:	bf00      	nop
 80010c8:	200004dc 	.word	0x200004dc

080010cc <_malloc_usable_size_r>:
 80010cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010d0:	1f18      	subs	r0, r3, #4
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bfbc      	itt	lt
 80010d6:	580b      	ldrlt	r3, [r1, r0]
 80010d8:	18c0      	addlt	r0, r0, r3
 80010da:	4770      	bx	lr

080010dc <_init>:
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	bf00      	nop
 80010e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010e2:	bc08      	pop	{r3}
 80010e4:	469e      	mov	lr, r3
 80010e6:	4770      	bx	lr

080010e8 <_fini>:
 80010e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ea:	bf00      	nop
 80010ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ee:	bc08      	pop	{r3}
 80010f0:	469e      	mov	lr, r3
 80010f2:	4770      	bx	lr
