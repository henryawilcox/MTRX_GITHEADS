
SerialInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08000fb0  08000fb0  00001fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001050  08001050  00003178  2**0
                  CONTENTS
  4 .ARM          00000008  08001050  08001050  00002050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001058  08001058  00003178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001058  08001058  00002058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800105c  0800105c  0000205c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  08001060  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003178  2**0
                  CONTENTS
 10 .bss          00000168  20000178  20000178  00003178  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e0  200002e0  00003178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b21  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000047a  00000000  00000000  00003cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00004148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000072  00000000  00000000  000041f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d17  00000000  00000000  0000426a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000114c  00000000  00000000  00019f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000763c8  00000000  00000000  0001b0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00091495  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006b8  00000000  00000000  000914d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00091b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000f98 	.word	0x08000f98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	08000f98 	.word	0x08000f98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <completion_callback>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void completion_callback(uint8_t *string_buffer, uint8_t length) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
    // This will only be called when a complete string has been received

    // Echo back the received string
    SerialOutputString((uint8_t*)"You entered: ", &USART1_PORT);
 800028c:	4914      	ldr	r1, [pc, #80]	@ (80002e0 <completion_callback+0x60>)
 800028e:	4815      	ldr	r0, [pc, #84]	@ (80002e4 <completion_callback+0x64>)
 8000290:	f000 f8eb 	bl	800046a <SerialOutputString>
    SerialOutputString(string_buffer, &USART1_PORT);
 8000294:	4912      	ldr	r1, [pc, #72]	@ (80002e0 <completion_callback+0x60>)
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 f8e7 	bl	800046a <SerialOutputString>
    SerialOutputString((uint8_t*)"\r", &USART1_PORT);
 800029c:	4910      	ldr	r1, [pc, #64]	@ (80002e0 <completion_callback+0x60>)
 800029e:	4812      	ldr	r0, [pc, #72]	@ (80002e8 <completion_callback+0x68>)
 80002a0:	f000 f8e3 	bl	800046a <SerialOutputString>
    SerialOutputString((uint8_t*)"Characters received: ", &USART1_PORT);
 80002a4:	490e      	ldr	r1, [pc, #56]	@ (80002e0 <completion_callback+0x60>)
 80002a6:	4811      	ldr	r0, [pc, #68]	@ (80002ec <completion_callback+0x6c>)
 80002a8:	f000 f8df 	bl	800046a <SerialOutputString>

    // Convert chars_read to string and display
    char num_str[10];
    sprintf(num_str, "%d", length);
 80002ac:	78fa      	ldrb	r2, [r7, #3]
 80002ae:	f107 030c 	add.w	r3, r7, #12
 80002b2:	490f      	ldr	r1, [pc, #60]	@ (80002f0 <completion_callback+0x70>)
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f9d7 	bl	8000668 <siprintf>
    SerialOutputString((uint8_t*)num_str, &USART1_PORT);
 80002ba:	f107 030c 	add.w	r3, r7, #12
 80002be:	4908      	ldr	r1, [pc, #32]	@ (80002e0 <completion_callback+0x60>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 f8d2 	bl	800046a <SerialOutputString>
    SerialOutputString((uint8_t*)"\r\n\r\n", &USART1_PORT);
 80002c6:	4906      	ldr	r1, [pc, #24]	@ (80002e0 <completion_callback+0x60>)
 80002c8:	480a      	ldr	r0, [pc, #40]	@ (80002f4 <completion_callback+0x74>)
 80002ca:	f000 f8ce 	bl	800046a <SerialOutputString>

    // Prompt for next input
    SerialOutputString((uint8_t*)"Enter text ('\\r' to terminate):\r\n", &USART1_PORT);
 80002ce:	4904      	ldr	r1, [pc, #16]	@ (80002e0 <completion_callback+0x60>)
 80002d0:	4809      	ldr	r0, [pc, #36]	@ (80002f8 <completion_callback+0x78>)
 80002d2:	f000 f8ca 	bl	800046a <SerialOutputString>
}
 80002d6:	bf00      	nop
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000000 	.word	0x20000000
 80002e4:	08000fb0 	.word	0x08000fb0
 80002e8:	08000fc0 	.word	0x08000fc0
 80002ec:	08000fc4 	.word	0x08000fc4
 80002f0:	08000fdc 	.word	0x08000fdc
 80002f4:	08000fe0 	.word	0x08000fe0
 80002f8:	08000fe8 	.word	0x08000fe8

080002fc <main>:

int main(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
    // Initialize the serial port with a baud rate of 115200
    SerialInitialise(BAUD_115200, &USART1_PORT, &completion_callback);
 8000300:	4a08      	ldr	r2, [pc, #32]	@ (8000324 <main+0x28>)
 8000302:	4909      	ldr	r1, [pc, #36]	@ (8000328 <main+0x2c>)
 8000304:	2004      	movs	r0, #4
 8000306:	f000 f815 	bl	8000334 <SerialInitialise>

    // Send initial welcome message
    SerialOutputString((uint8_t*)"UART ACTIVATED\r\n", &USART1_PORT);
 800030a:	4907      	ldr	r1, [pc, #28]	@ (8000328 <main+0x2c>)
 800030c:	4807      	ldr	r0, [pc, #28]	@ (800032c <main+0x30>)
 800030e:	f000 f8ac 	bl	800046a <SerialOutputString>
    SerialOutputString((uint8_t*)"Enter text ('\\r' to terminate):\r\n", &USART1_PORT);
 8000312:	4905      	ldr	r1, [pc, #20]	@ (8000328 <main+0x2c>)
 8000314:	4806      	ldr	r0, [pc, #24]	@ (8000330 <main+0x34>)
 8000316:	f000 f8a8 	bl	800046a <SerialOutputString>

    /* Loop forever */
    for(;;) {

        SerialInputString(&USART1_PORT);
 800031a:	4803      	ldr	r0, [pc, #12]	@ (8000328 <main+0x2c>)
 800031c:	f000 f8ff 	bl	800051e <SerialInputString>
 8000320:	e7fb      	b.n	800031a <main+0x1e>
 8000322:	bf00      	nop
 8000324:	08000281 	.word	0x08000281
 8000328:	20000000 	.word	0x20000000
 800032c:	0800100c 	.word	0x0800100c
 8000330:	08000fe8 	.word	0x08000fe8

08000334 <SerialInitialise>:



// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(BaudRate baudRate, SerialPort *serial_port, void (*callback)(uint8_t *data, uint8_t length)) {
 8000334:	b480      	push	{r7}
 8000336:	b087      	sub	sp, #28
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 8000340:	73fb      	strb	r3, [r7, #15]

	serial_port->completion_function = callback; //callback to function
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    // enable clock power, system configuration clock and GPIOC
    // common to all UARTs
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800034a:	4b3a      	ldr	r3, [pc, #232]	@ (8000434 <SerialInitialise+0x100>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	4a39      	ldr	r2, [pc, #228]	@ (8000434 <SerialInitialise+0x100>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000354:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000356:	4b37      	ldr	r3, [pc, #220]	@ (8000434 <SerialInitialise+0x100>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a36      	ldr	r2, [pc, #216]	@ (8000434 <SerialInitialise+0x100>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]

    // enable the GPIO which is on the AHB bus
    RCC->AHBENR |= serial_port->MaskAHBENR;
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	691a      	ldr	r2, [r3, #16]
 8000366:	4b33      	ldr	r3, [pc, #204]	@ (8000434 <SerialInitialise+0x100>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4932      	ldr	r1, [pc, #200]	@ (8000434 <SerialInitialise+0x100>)
 800036c:	4313      	orrs	r3, r2
 800036e:	614b      	str	r3, [r1, #20]

    // set pin mode to alternate function for the specific GPIO pins
    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	68ba      	ldr	r2, [r7, #8]
 8000376:	6952      	ldr	r2, [r2, #20]
 8000378:	601a      	str	r2, [r3, #0]

    // enable high speed clock for specific GPIO pins
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	6992      	ldr	r2, [r2, #24]
 8000382:	609a      	str	r2, [r3, #8]

    // set alternate function to enable USART to external pins
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	69d9      	ldr	r1, [r3, #28]
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	6a1a      	ldr	r2, [r3, #32]
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	430a      	orrs	r2, r1
 8000394:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	6a19      	ldr	r1, [r3, #32]
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	430a      	orrs	r2, r1
 80003a6:	625a      	str	r2, [r3, #36]	@ 0x24

    // enable the device based on the bits defined in the serial port definition
    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	68da      	ldr	r2, [r3, #12]
 80003ac:	4b21      	ldr	r3, [pc, #132]	@ (8000434 <SerialInitialise+0x100>)
 80003ae:	69db      	ldr	r3, [r3, #28]
 80003b0:	4920      	ldr	r1, [pc, #128]	@ (8000434 <SerialInitialise+0x100>)
 80003b2:	4313      	orrs	r3, r2
 80003b4:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	689a      	ldr	r2, [r3, #8]
 80003ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <SerialInitialise+0x100>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	491d      	ldr	r1, [pc, #116]	@ (8000434 <SerialInitialise+0x100>)
 80003c0:	4313      	orrs	r3, r2
 80003c2:	618b      	str	r3, [r1, #24]

    // Get a pointer to the 16 bits of the BRR register that we want to change
    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	330c      	adds	r3, #12
 80003ca:	617b      	str	r3, [r7, #20]

    // Baud rate calculation from datasheet
    switch(baudRate){
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	2b04      	cmp	r3, #4
 80003d0:	d822      	bhi.n	8000418 <SerialInitialise+0xe4>
 80003d2:	a201      	add	r2, pc, #4	@ (adr r2, 80003d8 <SerialInitialise+0xa4>)
 80003d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d8:	080003ed 	.word	0x080003ed
 80003dc:	080003f7 	.word	0x080003f7
 80003e0:	08000401 	.word	0x08000401
 80003e4:	08000409 	.word	0x08000409
 80003e8:	08000411 	.word	0x08000411
    case BAUD_9600:
        *baud_rate_config = 0x341;  // 9600 at 8MHz
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	f240 3241 	movw	r2, #833	@ 0x341
 80003f2:	801a      	strh	r2, [r3, #0]
        break;
 80003f4:	e010      	b.n	8000418 <SerialInitialise+0xe4>
    case BAUD_19200:
        *baud_rate_config = 0x1A0;  // 19200 at 8MHz
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80003fc:	801a      	strh	r2, [r3, #0]
        break;
 80003fe:	e00b      	b.n	8000418 <SerialInitialise+0xe4>
    case BAUD_38400:
        *baud_rate_config = 0xD0;   // 38400 at 8MHz
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	22d0      	movs	r2, #208	@ 0xd0
 8000404:	801a      	strh	r2, [r3, #0]
        break;
 8000406:	e007      	b.n	8000418 <SerialInitialise+0xe4>
    case BAUD_57600:
        *baud_rate_config = 0x8B;   // 57600 at 8MHz
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	228b      	movs	r2, #139	@ 0x8b
 800040c:	801a      	strh	r2, [r3, #0]
        break;
 800040e:	e003      	b.n	8000418 <SerialInitialise+0xe4>
    case BAUD_115200:
        *baud_rate_config = 0x46;   // 115200 at 8MHz
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	2246      	movs	r2, #70	@ 0x46
 8000414:	801a      	strh	r2, [r3, #0]
        break;
 8000416:	bf00      	nop
    }

    // enable serial port for tx and rx
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f042 020d 	orr.w	r2, r2, #13
 8000426:	601a      	str	r2, [r3, #0]
}
 8000428:	bf00      	nop
 800042a:	371c      	adds	r7, #28
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000

08000438 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	6039      	str	r1, [r7, #0]
 8000442:	71fb      	strb	r3, [r7, #7]
    // Wait until the transmit data register is empty
    while((serial_port->UART->ISR & USART_ISR_TXE) == 0) {
 8000444:	bf00      	nop
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	69db      	ldr	r3, [r3, #28]
 800044c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f8      	beq.n	8000446 <SerialOutputChar+0xe>
        // Do nothing, just wait
    }

    // Send the data
    serial_port->UART->TDR = data;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	79fa      	ldrb	r2, [r7, #7]
 800045a:	b292      	uxth	r2, r2
 800045c:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800046a:	b580      	push	{r7, lr}
 800046c:	b084      	sub	sp, #16
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	6039      	str	r1, [r7, #0]
    uint32_t counter = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
    while(*pt) {
 8000478:	e00b      	b.n	8000492 <SerialOutputString+0x28>
        SerialOutputChar(*pt, serial_port);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	6839      	ldr	r1, [r7, #0]
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ffd9 	bl	8000438 <SerialOutputChar>
        counter++;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	3301      	adds	r3, #1
 800048a:	60fb      	str	r3, [r7, #12]
        pt++;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3301      	adds	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
    while(*pt) {
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1ef      	bne.n	800047a <SerialOutputString+0x10>
    }
}
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <SerialReceiveChar>:


// returns 1 if valid char, 0 if timeout
uint8_t SerialReceiveChar(SerialPort *serial_port, uint8_t *received_char) {
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
    uint16_t timeout = 0xffff;
 80004ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004b2:	81fb      	strh	r3, [r7, #14]

    while (1) {
        timeout--;
 80004b4:	89fb      	ldrh	r3, [r7, #14]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	81fb      	strh	r3, [r7, #14]
        if (timeout == 0)
 80004ba:	89fb      	ldrh	r3, [r7, #14]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d101      	bne.n	80004c4 <SerialReceiveChar+0x20>
            return 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	e026      	b.n	8000512 <SerialReceiveChar+0x6e>

        // Check for overrun or framing error
        if (serial_port->UART->ISR & USART_ISR_ORE || serial_port->UART->ISR & USART_ISR_FE) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 0308 	and.w	r3, r3, #8
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d106      	bne.n	80004e0 <SerialReceiveChar+0x3c>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	f003 0302 	and.w	r3, r3, #2
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d007      	beq.n	80004f0 <SerialReceiveChar+0x4c>
            serial_port->UART->ICR |= USART_ICR_ORECF | USART_ICR_FECF;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	6a1a      	ldr	r2, [r3, #32]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f042 020a 	orr.w	r2, r2, #10
 80004ee:	621a      	str	r2, [r3, #32]
        }

        // Check if data is available to read
        if (serial_port->UART->ISR & USART_ISR_RXNE) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	f003 0320 	and.w	r3, r3, #32
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d100      	bne.n	8000500 <SerialReceiveChar+0x5c>
        timeout--;
 80004fe:	e7d9      	b.n	80004b4 <SerialReceiveChar+0x10>
            break;
 8000500:	bf00      	nop
        }
    }

    // Read the received data
    *received_char = serial_port->UART->RDR;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000508:	b29b      	uxth	r3, r3
 800050a:	b2da      	uxtb	r2, r3
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	701a      	strb	r2, [r3, #0]
    return 1;
 8000510:	2301      	movs	r3, #1
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <SerialInputString>:

// Read a string from serial port into buffer until terminating character (CR or LF)
uint16_t SerialInputString(SerialPort *serial_port) {
 800051e:	b580      	push	{r7, lr}
 8000520:	b086      	sub	sp, #24
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
    uint8_t receivedChar;
    uint16_t index = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	82fb      	strh	r3, [r7, #22]

    // Clear buffer first
    for (int i = 0; i < BUFFER_SIZE; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	e008      	b.n	8000542 <SerialInputString+0x24>
        serial_port->rx_buffer[i] = 0;
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	4413      	add	r3, r2
 8000536:	3324      	adds	r3, #36	@ 0x24
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	3301      	adds	r3, #1
 8000540:	613b      	str	r3, [r7, #16]
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	2bff      	cmp	r3, #255	@ 0xff
 8000546:	ddf3      	ble.n	8000530 <SerialInputString+0x12>
    }

    // Read characters until enter key or buffer full
    while (index < BUFFER_SIZE - 1) {
 8000548:	e017      	b.n	800057a <SerialInputString+0x5c>
        if (SerialReceiveChar(serial_port, &receivedChar)) {
 800054a:	f107 030f 	add.w	r3, r7, #15
 800054e:	4619      	mov	r1, r3
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ffa7 	bl	80004a4 <SerialReceiveChar>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d00e      	beq.n	800057a <SerialInputString+0x5c>


            // Store character in buffer
            serial_port->rx_buffer[index++] = receivedChar;
 800055c:	8afb      	ldrh	r3, [r7, #22]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	82fa      	strh	r2, [r7, #22]
 8000562:	4619      	mov	r1, r3
 8000564:	7bfa      	ldrb	r2, [r7, #15]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	440b      	add	r3, r1
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            // Break if CR or LF (terminating characters)
            if (receivedChar == '\r' || receivedChar == '\n') {
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	2b0d      	cmp	r3, #13
 8000572:	d005      	beq.n	8000580 <SerialInputString+0x62>
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b0a      	cmp	r3, #10
 8000578:	d002      	beq.n	8000580 <SerialInputString+0x62>
    while (index < BUFFER_SIZE - 1) {
 800057a:	8afb      	ldrh	r3, [r7, #22]
 800057c:	2bfe      	cmp	r3, #254	@ 0xfe
 800057e:	d9e4      	bls.n	800054a <SerialInputString+0x2c>
            }
        }
    }

    // Null-terminate the string
    serial_port->rx_buffer[index] = '\0';
 8000580:	8afb      	ldrh	r3, [r7, #22]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    // Call the completion function if it exists
    serial_port->completion_function(serial_port->rx_buffer, (uint8_t)index);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	3224      	adds	r2, #36	@ 0x24
 8000596:	8af9      	ldrh	r1, [r7, #22]
 8000598:	b2c9      	uxtb	r1, r1
 800059a:	4610      	mov	r0, r2
 800059c:	4798      	blx	r3


    return index;
 800059e:	8afb      	ldrh	r3, [r7, #22]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b0:	4a14      	ldr	r2, [pc, #80]	@ (8000604 <_sbrk+0x5c>)
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <_sbrk+0x60>)
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005bc:	4b13      	ldr	r3, [pc, #76]	@ (800060c <_sbrk+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d102      	bne.n	80005ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <_sbrk+0x64>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	@ (8000610 <_sbrk+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ca:	4b10      	ldr	r3, [pc, #64]	@ (800060c <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d207      	bcs.n	80005e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d8:	f000 f866 	bl	80006a8 <__errno>
 80005dc:	4603      	mov	r3, r0
 80005de:	220c      	movs	r2, #12
 80005e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e6:	e009      	b.n	80005fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ee:	4b07      	ldr	r3, [pc, #28]	@ (800060c <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	4a05      	ldr	r2, [pc, #20]	@ (800060c <_sbrk+0x64>)
 80005f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fa:	68fb      	ldr	r3, [r7, #12]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000a000 	.word	0x2000a000
 8000608:	00000400 	.word	0x00000400
 800060c:	20000194 	.word	0x20000194
 8000610:	200002e0 	.word	0x200002e0

08000614 <Reset_Handler>:
 8000614:	480d      	ldr	r0, [pc, #52]	@ (800064c <LoopForever+0x2>)
 8000616:	4685      	mov	sp, r0
 8000618:	f3af 8000 	nop.w
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <LoopForever+0x6>)
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <LoopForever+0xa>)
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <LoopForever+0xe>)
 8000622:	2300      	movs	r3, #0
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:
 8000626:	58d4      	ldr	r4, [r2, r3]
 8000628:	50c4      	str	r4, [r0, r3]
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:
 800062c:	18c4      	adds	r4, r0, r3
 800062e:	428c      	cmp	r4, r1
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <LoopForever+0x12>)
 8000634:	4c0a      	ldr	r4, [pc, #40]	@ (8000660 <LoopForever+0x16>)
 8000636:	2300      	movs	r3, #0
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:
 800063e:	42a2      	cmp	r2, r4
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>
 8000642:	f000 f837 	bl	80006b4 <__libc_init_array>
 8000646:	f7ff fe59 	bl	80002fc <main>

0800064a <LoopForever>:
 800064a:	e7fe      	b.n	800064a <LoopForever>
 800064c:	2000a000 	.word	0x2000a000
 8000650:	20000000 	.word	0x20000000
 8000654:	20000178 	.word	0x20000178
 8000658:	08001060 	.word	0x08001060
 800065c:	20000178 	.word	0x20000178
 8000660:	200002e0 	.word	0x200002e0

08000664 <ADC1_2_IRQHandler>:
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <siprintf>:
 8000668:	b40e      	push	{r1, r2, r3}
 800066a:	b500      	push	{lr}
 800066c:	b09c      	sub	sp, #112	@ 0x70
 800066e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000670:	9002      	str	r0, [sp, #8]
 8000672:	9006      	str	r0, [sp, #24]
 8000674:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000678:	4809      	ldr	r0, [pc, #36]	@ (80006a0 <siprintf+0x38>)
 800067a:	9107      	str	r1, [sp, #28]
 800067c:	9104      	str	r1, [sp, #16]
 800067e:	4909      	ldr	r1, [pc, #36]	@ (80006a4 <siprintf+0x3c>)
 8000680:	f853 2b04 	ldr.w	r2, [r3], #4
 8000684:	9105      	str	r1, [sp, #20]
 8000686:	6800      	ldr	r0, [r0, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	a902      	add	r1, sp, #8
 800068c:	f000 f894 	bl	80007b8 <_svfiprintf_r>
 8000690:	9b02      	ldr	r3, [sp, #8]
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	b01c      	add	sp, #112	@ 0x70
 8000698:	f85d eb04 	ldr.w	lr, [sp], #4
 800069c:	b003      	add	sp, #12
 800069e:	4770      	bx	lr
 80006a0:	20000128 	.word	0x20000128
 80006a4:	ffff0208 	.word	0xffff0208

080006a8 <__errno>:
 80006a8:	4b01      	ldr	r3, [pc, #4]	@ (80006b0 <__errno+0x8>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000128 	.word	0x20000128

080006b4 <__libc_init_array>:
 80006b4:	b570      	push	{r4, r5, r6, lr}
 80006b6:	4d0d      	ldr	r5, [pc, #52]	@ (80006ec <__libc_init_array+0x38>)
 80006b8:	4c0d      	ldr	r4, [pc, #52]	@ (80006f0 <__libc_init_array+0x3c>)
 80006ba:	1b64      	subs	r4, r4, r5
 80006bc:	10a4      	asrs	r4, r4, #2
 80006be:	2600      	movs	r6, #0
 80006c0:	42a6      	cmp	r6, r4
 80006c2:	d109      	bne.n	80006d8 <__libc_init_array+0x24>
 80006c4:	4d0b      	ldr	r5, [pc, #44]	@ (80006f4 <__libc_init_array+0x40>)
 80006c6:	4c0c      	ldr	r4, [pc, #48]	@ (80006f8 <__libc_init_array+0x44>)
 80006c8:	f000 fc66 	bl	8000f98 <_init>
 80006cc:	1b64      	subs	r4, r4, r5
 80006ce:	10a4      	asrs	r4, r4, #2
 80006d0:	2600      	movs	r6, #0
 80006d2:	42a6      	cmp	r6, r4
 80006d4:	d105      	bne.n	80006e2 <__libc_init_array+0x2e>
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006dc:	4798      	blx	r3
 80006de:	3601      	adds	r6, #1
 80006e0:	e7ee      	b.n	80006c0 <__libc_init_array+0xc>
 80006e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e6:	4798      	blx	r3
 80006e8:	3601      	adds	r6, #1
 80006ea:	e7f2      	b.n	80006d2 <__libc_init_array+0x1e>
 80006ec:	08001058 	.word	0x08001058
 80006f0:	08001058 	.word	0x08001058
 80006f4:	08001058 	.word	0x08001058
 80006f8:	0800105c 	.word	0x0800105c

080006fc <__retarget_lock_acquire_recursive>:
 80006fc:	4770      	bx	lr

080006fe <__retarget_lock_release_recursive>:
 80006fe:	4770      	bx	lr

08000700 <__ssputs_r>:
 8000700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000704:	688e      	ldr	r6, [r1, #8]
 8000706:	461f      	mov	r7, r3
 8000708:	42be      	cmp	r6, r7
 800070a:	680b      	ldr	r3, [r1, #0]
 800070c:	4682      	mov	sl, r0
 800070e:	460c      	mov	r4, r1
 8000710:	4690      	mov	r8, r2
 8000712:	d82d      	bhi.n	8000770 <__ssputs_r+0x70>
 8000714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000718:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800071c:	d026      	beq.n	800076c <__ssputs_r+0x6c>
 800071e:	6965      	ldr	r5, [r4, #20]
 8000720:	6909      	ldr	r1, [r1, #16]
 8000722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000726:	eba3 0901 	sub.w	r9, r3, r1
 800072a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800072e:	1c7b      	adds	r3, r7, #1
 8000730:	444b      	add	r3, r9
 8000732:	106d      	asrs	r5, r5, #1
 8000734:	429d      	cmp	r5, r3
 8000736:	bf38      	it	cc
 8000738:	461d      	movcc	r5, r3
 800073a:	0553      	lsls	r3, r2, #21
 800073c:	d527      	bpl.n	800078e <__ssputs_r+0x8e>
 800073e:	4629      	mov	r1, r5
 8000740:	f000 f958 	bl	80009f4 <_malloc_r>
 8000744:	4606      	mov	r6, r0
 8000746:	b360      	cbz	r0, 80007a2 <__ssputs_r+0xa2>
 8000748:	6921      	ldr	r1, [r4, #16]
 800074a:	464a      	mov	r2, r9
 800074c:	f000 fbc4 	bl	8000ed8 <memcpy>
 8000750:	89a3      	ldrh	r3, [r4, #12]
 8000752:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075a:	81a3      	strh	r3, [r4, #12]
 800075c:	6126      	str	r6, [r4, #16]
 800075e:	6165      	str	r5, [r4, #20]
 8000760:	444e      	add	r6, r9
 8000762:	eba5 0509 	sub.w	r5, r5, r9
 8000766:	6026      	str	r6, [r4, #0]
 8000768:	60a5      	str	r5, [r4, #8]
 800076a:	463e      	mov	r6, r7
 800076c:	42be      	cmp	r6, r7
 800076e:	d900      	bls.n	8000772 <__ssputs_r+0x72>
 8000770:	463e      	mov	r6, r7
 8000772:	6820      	ldr	r0, [r4, #0]
 8000774:	4632      	mov	r2, r6
 8000776:	4641      	mov	r1, r8
 8000778:	f000 fb84 	bl	8000e84 <memmove>
 800077c:	68a3      	ldr	r3, [r4, #8]
 800077e:	1b9b      	subs	r3, r3, r6
 8000780:	60a3      	str	r3, [r4, #8]
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	4433      	add	r3, r6
 8000786:	6023      	str	r3, [r4, #0]
 8000788:	2000      	movs	r0, #0
 800078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078e:	462a      	mov	r2, r5
 8000790:	f000 fb4a 	bl	8000e28 <_realloc_r>
 8000794:	4606      	mov	r6, r0
 8000796:	2800      	cmp	r0, #0
 8000798:	d1e0      	bne.n	800075c <__ssputs_r+0x5c>
 800079a:	6921      	ldr	r1, [r4, #16]
 800079c:	4650      	mov	r0, sl
 800079e:	f000 fba9 	bl	8000ef4 <_free_r>
 80007a2:	230c      	movs	r3, #12
 80007a4:	f8ca 3000 	str.w	r3, [sl]
 80007a8:	89a3      	ldrh	r3, [r4, #12]
 80007aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ae:	81a3      	strh	r3, [r4, #12]
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007b4:	e7e9      	b.n	800078a <__ssputs_r+0x8a>
	...

080007b8 <_svfiprintf_r>:
 80007b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007bc:	4698      	mov	r8, r3
 80007be:	898b      	ldrh	r3, [r1, #12]
 80007c0:	061b      	lsls	r3, r3, #24
 80007c2:	b09d      	sub	sp, #116	@ 0x74
 80007c4:	4607      	mov	r7, r0
 80007c6:	460d      	mov	r5, r1
 80007c8:	4614      	mov	r4, r2
 80007ca:	d510      	bpl.n	80007ee <_svfiprintf_r+0x36>
 80007cc:	690b      	ldr	r3, [r1, #16]
 80007ce:	b973      	cbnz	r3, 80007ee <_svfiprintf_r+0x36>
 80007d0:	2140      	movs	r1, #64	@ 0x40
 80007d2:	f000 f90f 	bl	80009f4 <_malloc_r>
 80007d6:	6028      	str	r0, [r5, #0]
 80007d8:	6128      	str	r0, [r5, #16]
 80007da:	b930      	cbnz	r0, 80007ea <_svfiprintf_r+0x32>
 80007dc:	230c      	movs	r3, #12
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007e4:	b01d      	add	sp, #116	@ 0x74
 80007e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007ea:	2340      	movs	r3, #64	@ 0x40
 80007ec:	616b      	str	r3, [r5, #20]
 80007ee:	2300      	movs	r3, #0
 80007f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80007f2:	2320      	movs	r3, #32
 80007f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80007f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80007fc:	2330      	movs	r3, #48	@ 0x30
 80007fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800099c <_svfiprintf_r+0x1e4>
 8000802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000806:	f04f 0901 	mov.w	r9, #1
 800080a:	4623      	mov	r3, r4
 800080c:	469a      	mov	sl, r3
 800080e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000812:	b10a      	cbz	r2, 8000818 <_svfiprintf_r+0x60>
 8000814:	2a25      	cmp	r2, #37	@ 0x25
 8000816:	d1f9      	bne.n	800080c <_svfiprintf_r+0x54>
 8000818:	ebba 0b04 	subs.w	fp, sl, r4
 800081c:	d00b      	beq.n	8000836 <_svfiprintf_r+0x7e>
 800081e:	465b      	mov	r3, fp
 8000820:	4622      	mov	r2, r4
 8000822:	4629      	mov	r1, r5
 8000824:	4638      	mov	r0, r7
 8000826:	f7ff ff6b 	bl	8000700 <__ssputs_r>
 800082a:	3001      	adds	r0, #1
 800082c:	f000 80a7 	beq.w	800097e <_svfiprintf_r+0x1c6>
 8000830:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000832:	445a      	add	r2, fp
 8000834:	9209      	str	r2, [sp, #36]	@ 0x24
 8000836:	f89a 3000 	ldrb.w	r3, [sl]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f000 809f 	beq.w	800097e <_svfiprintf_r+0x1c6>
 8000840:	2300      	movs	r3, #0
 8000842:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800084a:	f10a 0a01 	add.w	sl, sl, #1
 800084e:	9304      	str	r3, [sp, #16]
 8000850:	9307      	str	r3, [sp, #28]
 8000852:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000856:	931a      	str	r3, [sp, #104]	@ 0x68
 8000858:	4654      	mov	r4, sl
 800085a:	2205      	movs	r2, #5
 800085c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000860:	484e      	ldr	r0, [pc, #312]	@ (800099c <_svfiprintf_r+0x1e4>)
 8000862:	f7ff fcbd 	bl	80001e0 <memchr>
 8000866:	9a04      	ldr	r2, [sp, #16]
 8000868:	b9d8      	cbnz	r0, 80008a2 <_svfiprintf_r+0xea>
 800086a:	06d0      	lsls	r0, r2, #27
 800086c:	bf44      	itt	mi
 800086e:	2320      	movmi	r3, #32
 8000870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000874:	0711      	lsls	r1, r2, #28
 8000876:	bf44      	itt	mi
 8000878:	232b      	movmi	r3, #43	@ 0x2b
 800087a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800087e:	f89a 3000 	ldrb.w	r3, [sl]
 8000882:	2b2a      	cmp	r3, #42	@ 0x2a
 8000884:	d015      	beq.n	80008b2 <_svfiprintf_r+0xfa>
 8000886:	9a07      	ldr	r2, [sp, #28]
 8000888:	4654      	mov	r4, sl
 800088a:	2000      	movs	r0, #0
 800088c:	f04f 0c0a 	mov.w	ip, #10
 8000890:	4621      	mov	r1, r4
 8000892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000896:	3b30      	subs	r3, #48	@ 0x30
 8000898:	2b09      	cmp	r3, #9
 800089a:	d94b      	bls.n	8000934 <_svfiprintf_r+0x17c>
 800089c:	b1b0      	cbz	r0, 80008cc <_svfiprintf_r+0x114>
 800089e:	9207      	str	r2, [sp, #28]
 80008a0:	e014      	b.n	80008cc <_svfiprintf_r+0x114>
 80008a2:	eba0 0308 	sub.w	r3, r0, r8
 80008a6:	fa09 f303 	lsl.w	r3, r9, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	9304      	str	r3, [sp, #16]
 80008ae:	46a2      	mov	sl, r4
 80008b0:	e7d2      	b.n	8000858 <_svfiprintf_r+0xa0>
 80008b2:	9b03      	ldr	r3, [sp, #12]
 80008b4:	1d19      	adds	r1, r3, #4
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	9103      	str	r1, [sp, #12]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bfbb      	ittet	lt
 80008be:	425b      	neglt	r3, r3
 80008c0:	f042 0202 	orrlt.w	r2, r2, #2
 80008c4:	9307      	strge	r3, [sp, #28]
 80008c6:	9307      	strlt	r3, [sp, #28]
 80008c8:	bfb8      	it	lt
 80008ca:	9204      	strlt	r2, [sp, #16]
 80008cc:	7823      	ldrb	r3, [r4, #0]
 80008ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80008d0:	d10a      	bne.n	80008e8 <_svfiprintf_r+0x130>
 80008d2:	7863      	ldrb	r3, [r4, #1]
 80008d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80008d6:	d132      	bne.n	800093e <_svfiprintf_r+0x186>
 80008d8:	9b03      	ldr	r3, [sp, #12]
 80008da:	1d1a      	adds	r2, r3, #4
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	9203      	str	r2, [sp, #12]
 80008e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80008e4:	3402      	adds	r4, #2
 80008e6:	9305      	str	r3, [sp, #20]
 80008e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80009ac <_svfiprintf_r+0x1f4>
 80008ec:	7821      	ldrb	r1, [r4, #0]
 80008ee:	2203      	movs	r2, #3
 80008f0:	4650      	mov	r0, sl
 80008f2:	f7ff fc75 	bl	80001e0 <memchr>
 80008f6:	b138      	cbz	r0, 8000908 <_svfiprintf_r+0x150>
 80008f8:	9b04      	ldr	r3, [sp, #16]
 80008fa:	eba0 000a 	sub.w	r0, r0, sl
 80008fe:	2240      	movs	r2, #64	@ 0x40
 8000900:	4082      	lsls	r2, r0
 8000902:	4313      	orrs	r3, r2
 8000904:	3401      	adds	r4, #1
 8000906:	9304      	str	r3, [sp, #16]
 8000908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800090c:	4824      	ldr	r0, [pc, #144]	@ (80009a0 <_svfiprintf_r+0x1e8>)
 800090e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000912:	2206      	movs	r2, #6
 8000914:	f7ff fc64 	bl	80001e0 <memchr>
 8000918:	2800      	cmp	r0, #0
 800091a:	d036      	beq.n	800098a <_svfiprintf_r+0x1d2>
 800091c:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <_svfiprintf_r+0x1ec>)
 800091e:	bb1b      	cbnz	r3, 8000968 <_svfiprintf_r+0x1b0>
 8000920:	9b03      	ldr	r3, [sp, #12]
 8000922:	3307      	adds	r3, #7
 8000924:	f023 0307 	bic.w	r3, r3, #7
 8000928:	3308      	adds	r3, #8
 800092a:	9303      	str	r3, [sp, #12]
 800092c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800092e:	4433      	add	r3, r6
 8000930:	9309      	str	r3, [sp, #36]	@ 0x24
 8000932:	e76a      	b.n	800080a <_svfiprintf_r+0x52>
 8000934:	fb0c 3202 	mla	r2, ip, r2, r3
 8000938:	460c      	mov	r4, r1
 800093a:	2001      	movs	r0, #1
 800093c:	e7a8      	b.n	8000890 <_svfiprintf_r+0xd8>
 800093e:	2300      	movs	r3, #0
 8000940:	3401      	adds	r4, #1
 8000942:	9305      	str	r3, [sp, #20]
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 0c0a 	mov.w	ip, #10
 800094a:	4620      	mov	r0, r4
 800094c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000950:	3a30      	subs	r2, #48	@ 0x30
 8000952:	2a09      	cmp	r2, #9
 8000954:	d903      	bls.n	800095e <_svfiprintf_r+0x1a6>
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0c6      	beq.n	80008e8 <_svfiprintf_r+0x130>
 800095a:	9105      	str	r1, [sp, #20]
 800095c:	e7c4      	b.n	80008e8 <_svfiprintf_r+0x130>
 800095e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000962:	4604      	mov	r4, r0
 8000964:	2301      	movs	r3, #1
 8000966:	e7f0      	b.n	800094a <_svfiprintf_r+0x192>
 8000968:	ab03      	add	r3, sp, #12
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	462a      	mov	r2, r5
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <_svfiprintf_r+0x1f0>)
 8000970:	a904      	add	r1, sp, #16
 8000972:	4638      	mov	r0, r7
 8000974:	f3af 8000 	nop.w
 8000978:	1c42      	adds	r2, r0, #1
 800097a:	4606      	mov	r6, r0
 800097c:	d1d6      	bne.n	800092c <_svfiprintf_r+0x174>
 800097e:	89ab      	ldrh	r3, [r5, #12]
 8000980:	065b      	lsls	r3, r3, #25
 8000982:	f53f af2d 	bmi.w	80007e0 <_svfiprintf_r+0x28>
 8000986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000988:	e72c      	b.n	80007e4 <_svfiprintf_r+0x2c>
 800098a:	ab03      	add	r3, sp, #12
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	462a      	mov	r2, r5
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <_svfiprintf_r+0x1f0>)
 8000992:	a904      	add	r1, sp, #16
 8000994:	4638      	mov	r0, r7
 8000996:	f000 f91b 	bl	8000bd0 <_printf_i>
 800099a:	e7ed      	b.n	8000978 <_svfiprintf_r+0x1c0>
 800099c:	0800101d 	.word	0x0800101d
 80009a0:	08001027 	.word	0x08001027
 80009a4:	00000000 	.word	0x00000000
 80009a8:	08000701 	.word	0x08000701
 80009ac:	08001023 	.word	0x08001023

080009b0 <sbrk_aligned>:
 80009b0:	b570      	push	{r4, r5, r6, lr}
 80009b2:	4e0f      	ldr	r6, [pc, #60]	@ (80009f0 <sbrk_aligned+0x40>)
 80009b4:	460c      	mov	r4, r1
 80009b6:	6831      	ldr	r1, [r6, #0]
 80009b8:	4605      	mov	r5, r0
 80009ba:	b911      	cbnz	r1, 80009c2 <sbrk_aligned+0x12>
 80009bc:	f000 fa7c 	bl	8000eb8 <_sbrk_r>
 80009c0:	6030      	str	r0, [r6, #0]
 80009c2:	4621      	mov	r1, r4
 80009c4:	4628      	mov	r0, r5
 80009c6:	f000 fa77 	bl	8000eb8 <_sbrk_r>
 80009ca:	1c43      	adds	r3, r0, #1
 80009cc:	d103      	bne.n	80009d6 <sbrk_aligned+0x26>
 80009ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80009d2:	4620      	mov	r0, r4
 80009d4:	bd70      	pop	{r4, r5, r6, pc}
 80009d6:	1cc4      	adds	r4, r0, #3
 80009d8:	f024 0403 	bic.w	r4, r4, #3
 80009dc:	42a0      	cmp	r0, r4
 80009de:	d0f8      	beq.n	80009d2 <sbrk_aligned+0x22>
 80009e0:	1a21      	subs	r1, r4, r0
 80009e2:	4628      	mov	r0, r5
 80009e4:	f000 fa68 	bl	8000eb8 <_sbrk_r>
 80009e8:	3001      	adds	r0, #1
 80009ea:	d1f2      	bne.n	80009d2 <sbrk_aligned+0x22>
 80009ec:	e7ef      	b.n	80009ce <sbrk_aligned+0x1e>
 80009ee:	bf00      	nop
 80009f0:	200002d4 	.word	0x200002d4

080009f4 <_malloc_r>:
 80009f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009f8:	1ccd      	adds	r5, r1, #3
 80009fa:	f025 0503 	bic.w	r5, r5, #3
 80009fe:	3508      	adds	r5, #8
 8000a00:	2d0c      	cmp	r5, #12
 8000a02:	bf38      	it	cc
 8000a04:	250c      	movcc	r5, #12
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	4606      	mov	r6, r0
 8000a0a:	db01      	blt.n	8000a10 <_malloc_r+0x1c>
 8000a0c:	42a9      	cmp	r1, r5
 8000a0e:	d904      	bls.n	8000a1a <_malloc_r+0x26>
 8000a10:	230c      	movs	r3, #12
 8000a12:	6033      	str	r3, [r6, #0]
 8000a14:	2000      	movs	r0, #0
 8000a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000af0 <_malloc_r+0xfc>
 8000a1e:	f000 f9f7 	bl	8000e10 <__malloc_lock>
 8000a22:	f8d8 3000 	ldr.w	r3, [r8]
 8000a26:	461c      	mov	r4, r3
 8000a28:	bb44      	cbnz	r4, 8000a7c <_malloc_r+0x88>
 8000a2a:	4629      	mov	r1, r5
 8000a2c:	4630      	mov	r0, r6
 8000a2e:	f7ff ffbf 	bl	80009b0 <sbrk_aligned>
 8000a32:	1c43      	adds	r3, r0, #1
 8000a34:	4604      	mov	r4, r0
 8000a36:	d158      	bne.n	8000aea <_malloc_r+0xf6>
 8000a38:	f8d8 4000 	ldr.w	r4, [r8]
 8000a3c:	4627      	mov	r7, r4
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d143      	bne.n	8000aca <_malloc_r+0xd6>
 8000a42:	2c00      	cmp	r4, #0
 8000a44:	d04b      	beq.n	8000ade <_malloc_r+0xea>
 8000a46:	6823      	ldr	r3, [r4, #0]
 8000a48:	4639      	mov	r1, r7
 8000a4a:	4630      	mov	r0, r6
 8000a4c:	eb04 0903 	add.w	r9, r4, r3
 8000a50:	f000 fa32 	bl	8000eb8 <_sbrk_r>
 8000a54:	4581      	cmp	r9, r0
 8000a56:	d142      	bne.n	8000ade <_malloc_r+0xea>
 8000a58:	6821      	ldr	r1, [r4, #0]
 8000a5a:	1a6d      	subs	r5, r5, r1
 8000a5c:	4629      	mov	r1, r5
 8000a5e:	4630      	mov	r0, r6
 8000a60:	f7ff ffa6 	bl	80009b0 <sbrk_aligned>
 8000a64:	3001      	adds	r0, #1
 8000a66:	d03a      	beq.n	8000ade <_malloc_r+0xea>
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	442b      	add	r3, r5
 8000a6c:	6023      	str	r3, [r4, #0]
 8000a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	bb62      	cbnz	r2, 8000ad0 <_malloc_r+0xdc>
 8000a76:	f8c8 7000 	str.w	r7, [r8]
 8000a7a:	e00f      	b.n	8000a9c <_malloc_r+0xa8>
 8000a7c:	6822      	ldr	r2, [r4, #0]
 8000a7e:	1b52      	subs	r2, r2, r5
 8000a80:	d420      	bmi.n	8000ac4 <_malloc_r+0xd0>
 8000a82:	2a0b      	cmp	r2, #11
 8000a84:	d917      	bls.n	8000ab6 <_malloc_r+0xc2>
 8000a86:	1961      	adds	r1, r4, r5
 8000a88:	42a3      	cmp	r3, r4
 8000a8a:	6025      	str	r5, [r4, #0]
 8000a8c:	bf18      	it	ne
 8000a8e:	6059      	strne	r1, [r3, #4]
 8000a90:	6863      	ldr	r3, [r4, #4]
 8000a92:	bf08      	it	eq
 8000a94:	f8c8 1000 	streq.w	r1, [r8]
 8000a98:	5162      	str	r2, [r4, r5]
 8000a9a:	604b      	str	r3, [r1, #4]
 8000a9c:	4630      	mov	r0, r6
 8000a9e:	f000 f9bd 	bl	8000e1c <__malloc_unlock>
 8000aa2:	f104 000b 	add.w	r0, r4, #11
 8000aa6:	1d23      	adds	r3, r4, #4
 8000aa8:	f020 0007 	bic.w	r0, r0, #7
 8000aac:	1ac2      	subs	r2, r0, r3
 8000aae:	bf1c      	itt	ne
 8000ab0:	1a1b      	subne	r3, r3, r0
 8000ab2:	50a3      	strne	r3, [r4, r2]
 8000ab4:	e7af      	b.n	8000a16 <_malloc_r+0x22>
 8000ab6:	6862      	ldr	r2, [r4, #4]
 8000ab8:	42a3      	cmp	r3, r4
 8000aba:	bf0c      	ite	eq
 8000abc:	f8c8 2000 	streq.w	r2, [r8]
 8000ac0:	605a      	strne	r2, [r3, #4]
 8000ac2:	e7eb      	b.n	8000a9c <_malloc_r+0xa8>
 8000ac4:	4623      	mov	r3, r4
 8000ac6:	6864      	ldr	r4, [r4, #4]
 8000ac8:	e7ae      	b.n	8000a28 <_malloc_r+0x34>
 8000aca:	463c      	mov	r4, r7
 8000acc:	687f      	ldr	r7, [r7, #4]
 8000ace:	e7b6      	b.n	8000a3e <_malloc_r+0x4a>
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	42a3      	cmp	r3, r4
 8000ad6:	d1fb      	bne.n	8000ad0 <_malloc_r+0xdc>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	6053      	str	r3, [r2, #4]
 8000adc:	e7de      	b.n	8000a9c <_malloc_r+0xa8>
 8000ade:	230c      	movs	r3, #12
 8000ae0:	6033      	str	r3, [r6, #0]
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	f000 f99a 	bl	8000e1c <__malloc_unlock>
 8000ae8:	e794      	b.n	8000a14 <_malloc_r+0x20>
 8000aea:	6005      	str	r5, [r0, #0]
 8000aec:	e7d6      	b.n	8000a9c <_malloc_r+0xa8>
 8000aee:	bf00      	nop
 8000af0:	200002d8 	.word	0x200002d8

08000af4 <_printf_common>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	4616      	mov	r6, r2
 8000afa:	4698      	mov	r8, r3
 8000afc:	688a      	ldr	r2, [r1, #8]
 8000afe:	690b      	ldr	r3, [r1, #16]
 8000b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	bfb8      	it	lt
 8000b08:	4613      	movlt	r3, r2
 8000b0a:	6033      	str	r3, [r6, #0]
 8000b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b10:	4607      	mov	r7, r0
 8000b12:	460c      	mov	r4, r1
 8000b14:	b10a      	cbz	r2, 8000b1a <_printf_common+0x26>
 8000b16:	3301      	adds	r3, #1
 8000b18:	6033      	str	r3, [r6, #0]
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	0699      	lsls	r1, r3, #26
 8000b1e:	bf42      	ittt	mi
 8000b20:	6833      	ldrmi	r3, [r6, #0]
 8000b22:	3302      	addmi	r3, #2
 8000b24:	6033      	strmi	r3, [r6, #0]
 8000b26:	6825      	ldr	r5, [r4, #0]
 8000b28:	f015 0506 	ands.w	r5, r5, #6
 8000b2c:	d106      	bne.n	8000b3c <_printf_common+0x48>
 8000b2e:	f104 0a19 	add.w	sl, r4, #25
 8000b32:	68e3      	ldr	r3, [r4, #12]
 8000b34:	6832      	ldr	r2, [r6, #0]
 8000b36:	1a9b      	subs	r3, r3, r2
 8000b38:	42ab      	cmp	r3, r5
 8000b3a:	dc26      	bgt.n	8000b8a <_printf_common+0x96>
 8000b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000b40:	6822      	ldr	r2, [r4, #0]
 8000b42:	3b00      	subs	r3, #0
 8000b44:	bf18      	it	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	0692      	lsls	r2, r2, #26
 8000b4a:	d42b      	bmi.n	8000ba4 <_printf_common+0xb0>
 8000b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000b50:	4641      	mov	r1, r8
 8000b52:	4638      	mov	r0, r7
 8000b54:	47c8      	blx	r9
 8000b56:	3001      	adds	r0, #1
 8000b58:	d01e      	beq.n	8000b98 <_printf_common+0xa4>
 8000b5a:	6823      	ldr	r3, [r4, #0]
 8000b5c:	6922      	ldr	r2, [r4, #16]
 8000b5e:	f003 0306 	and.w	r3, r3, #6
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf02      	ittt	eq
 8000b66:	68e5      	ldreq	r5, [r4, #12]
 8000b68:	6833      	ldreq	r3, [r6, #0]
 8000b6a:	1aed      	subeq	r5, r5, r3
 8000b6c:	68a3      	ldr	r3, [r4, #8]
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000b74:	2500      	movne	r5, #0
 8000b76:	4293      	cmp	r3, r2
 8000b78:	bfc4      	itt	gt
 8000b7a:	1a9b      	subgt	r3, r3, r2
 8000b7c:	18ed      	addgt	r5, r5, r3
 8000b7e:	2600      	movs	r6, #0
 8000b80:	341a      	adds	r4, #26
 8000b82:	42b5      	cmp	r5, r6
 8000b84:	d11a      	bne.n	8000bbc <_printf_common+0xc8>
 8000b86:	2000      	movs	r0, #0
 8000b88:	e008      	b.n	8000b9c <_printf_common+0xa8>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	4652      	mov	r2, sl
 8000b8e:	4641      	mov	r1, r8
 8000b90:	4638      	mov	r0, r7
 8000b92:	47c8      	blx	r9
 8000b94:	3001      	adds	r0, #1
 8000b96:	d103      	bne.n	8000ba0 <_printf_common+0xac>
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba0:	3501      	adds	r5, #1
 8000ba2:	e7c6      	b.n	8000b32 <_printf_common+0x3e>
 8000ba4:	18e1      	adds	r1, r4, r3
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	2030      	movs	r0, #48	@ 0x30
 8000baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000bae:	4422      	add	r2, r4
 8000bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000bb8:	3302      	adds	r3, #2
 8000bba:	e7c7      	b.n	8000b4c <_printf_common+0x58>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	4622      	mov	r2, r4
 8000bc0:	4641      	mov	r1, r8
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	47c8      	blx	r9
 8000bc6:	3001      	adds	r0, #1
 8000bc8:	d0e6      	beq.n	8000b98 <_printf_common+0xa4>
 8000bca:	3601      	adds	r6, #1
 8000bcc:	e7d9      	b.n	8000b82 <_printf_common+0x8e>
	...

08000bd0 <_printf_i>:
 8000bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	7e0f      	ldrb	r7, [r1, #24]
 8000bd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000bd8:	2f78      	cmp	r7, #120	@ 0x78
 8000bda:	4691      	mov	r9, r2
 8000bdc:	4680      	mov	r8, r0
 8000bde:	460c      	mov	r4, r1
 8000be0:	469a      	mov	sl, r3
 8000be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000be6:	d807      	bhi.n	8000bf8 <_printf_i+0x28>
 8000be8:	2f62      	cmp	r7, #98	@ 0x62
 8000bea:	d80a      	bhi.n	8000c02 <_printf_i+0x32>
 8000bec:	2f00      	cmp	r7, #0
 8000bee:	f000 80d2 	beq.w	8000d96 <_printf_i+0x1c6>
 8000bf2:	2f58      	cmp	r7, #88	@ 0x58
 8000bf4:	f000 80b9 	beq.w	8000d6a <_printf_i+0x19a>
 8000bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000c00:	e03a      	b.n	8000c78 <_printf_i+0xa8>
 8000c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c06:	2b15      	cmp	r3, #21
 8000c08:	d8f6      	bhi.n	8000bf8 <_printf_i+0x28>
 8000c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8000c10 <_printf_i+0x40>)
 8000c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c10:	08000c69 	.word	0x08000c69
 8000c14:	08000c7d 	.word	0x08000c7d
 8000c18:	08000bf9 	.word	0x08000bf9
 8000c1c:	08000bf9 	.word	0x08000bf9
 8000c20:	08000bf9 	.word	0x08000bf9
 8000c24:	08000bf9 	.word	0x08000bf9
 8000c28:	08000c7d 	.word	0x08000c7d
 8000c2c:	08000bf9 	.word	0x08000bf9
 8000c30:	08000bf9 	.word	0x08000bf9
 8000c34:	08000bf9 	.word	0x08000bf9
 8000c38:	08000bf9 	.word	0x08000bf9
 8000c3c:	08000d7d 	.word	0x08000d7d
 8000c40:	08000ca7 	.word	0x08000ca7
 8000c44:	08000d37 	.word	0x08000d37
 8000c48:	08000bf9 	.word	0x08000bf9
 8000c4c:	08000bf9 	.word	0x08000bf9
 8000c50:	08000d9f 	.word	0x08000d9f
 8000c54:	08000bf9 	.word	0x08000bf9
 8000c58:	08000ca7 	.word	0x08000ca7
 8000c5c:	08000bf9 	.word	0x08000bf9
 8000c60:	08000bf9 	.word	0x08000bf9
 8000c64:	08000d3f 	.word	0x08000d3f
 8000c68:	6833      	ldr	r3, [r6, #0]
 8000c6a:	1d1a      	adds	r2, r3, #4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6032      	str	r2, [r6, #0]
 8000c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e09d      	b.n	8000db8 <_printf_i+0x1e8>
 8000c7c:	6833      	ldr	r3, [r6, #0]
 8000c7e:	6820      	ldr	r0, [r4, #0]
 8000c80:	1d19      	adds	r1, r3, #4
 8000c82:	6031      	str	r1, [r6, #0]
 8000c84:	0606      	lsls	r6, r0, #24
 8000c86:	d501      	bpl.n	8000c8c <_printf_i+0xbc>
 8000c88:	681d      	ldr	r5, [r3, #0]
 8000c8a:	e003      	b.n	8000c94 <_printf_i+0xc4>
 8000c8c:	0645      	lsls	r5, r0, #25
 8000c8e:	d5fb      	bpl.n	8000c88 <_printf_i+0xb8>
 8000c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	da03      	bge.n	8000ca0 <_printf_i+0xd0>
 8000c98:	232d      	movs	r3, #45	@ 0x2d
 8000c9a:	426d      	negs	r5, r5
 8000c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ca0:	4859      	ldr	r0, [pc, #356]	@ (8000e08 <_printf_i+0x238>)
 8000ca2:	230a      	movs	r3, #10
 8000ca4:	e011      	b.n	8000cca <_printf_i+0xfa>
 8000ca6:	6821      	ldr	r1, [r4, #0]
 8000ca8:	6833      	ldr	r3, [r6, #0]
 8000caa:	0608      	lsls	r0, r1, #24
 8000cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8000cb0:	d402      	bmi.n	8000cb8 <_printf_i+0xe8>
 8000cb2:	0649      	lsls	r1, r1, #25
 8000cb4:	bf48      	it	mi
 8000cb6:	b2ad      	uxthmi	r5, r5
 8000cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8000cba:	4853      	ldr	r0, [pc, #332]	@ (8000e08 <_printf_i+0x238>)
 8000cbc:	6033      	str	r3, [r6, #0]
 8000cbe:	bf14      	ite	ne
 8000cc0:	230a      	movne	r3, #10
 8000cc2:	2308      	moveq	r3, #8
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000cca:	6866      	ldr	r6, [r4, #4]
 8000ccc:	60a6      	str	r6, [r4, #8]
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	bfa2      	ittt	ge
 8000cd2:	6821      	ldrge	r1, [r4, #0]
 8000cd4:	f021 0104 	bicge.w	r1, r1, #4
 8000cd8:	6021      	strge	r1, [r4, #0]
 8000cda:	b90d      	cbnz	r5, 8000ce0 <_printf_i+0x110>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d04b      	beq.n	8000d78 <_printf_i+0x1a8>
 8000ce0:	4616      	mov	r6, r2
 8000ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8000cea:	5dc7      	ldrb	r7, [r0, r7]
 8000cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000cf0:	462f      	mov	r7, r5
 8000cf2:	42bb      	cmp	r3, r7
 8000cf4:	460d      	mov	r5, r1
 8000cf6:	d9f4      	bls.n	8000ce2 <_printf_i+0x112>
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d10b      	bne.n	8000d14 <_printf_i+0x144>
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	07df      	lsls	r7, r3, #31
 8000d00:	d508      	bpl.n	8000d14 <_printf_i+0x144>
 8000d02:	6923      	ldr	r3, [r4, #16]
 8000d04:	6861      	ldr	r1, [r4, #4]
 8000d06:	4299      	cmp	r1, r3
 8000d08:	bfde      	ittt	le
 8000d0a:	2330      	movle	r3, #48	@ 0x30
 8000d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d10:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000d14:	1b92      	subs	r2, r2, r6
 8000d16:	6122      	str	r2, [r4, #16]
 8000d18:	f8cd a000 	str.w	sl, [sp]
 8000d1c:	464b      	mov	r3, r9
 8000d1e:	aa03      	add	r2, sp, #12
 8000d20:	4621      	mov	r1, r4
 8000d22:	4640      	mov	r0, r8
 8000d24:	f7ff fee6 	bl	8000af4 <_printf_common>
 8000d28:	3001      	adds	r0, #1
 8000d2a:	d14a      	bne.n	8000dc2 <_printf_i+0x1f2>
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d30:	b004      	add	sp, #16
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	f043 0320 	orr.w	r3, r3, #32
 8000d3c:	6023      	str	r3, [r4, #0]
 8000d3e:	4833      	ldr	r0, [pc, #204]	@ (8000e0c <_printf_i+0x23c>)
 8000d40:	2778      	movs	r7, #120	@ 0x78
 8000d42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	6831      	ldr	r1, [r6, #0]
 8000d4a:	061f      	lsls	r7, r3, #24
 8000d4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d50:	d402      	bmi.n	8000d58 <_printf_i+0x188>
 8000d52:	065f      	lsls	r7, r3, #25
 8000d54:	bf48      	it	mi
 8000d56:	b2ad      	uxthmi	r5, r5
 8000d58:	6031      	str	r1, [r6, #0]
 8000d5a:	07d9      	lsls	r1, r3, #31
 8000d5c:	bf44      	itt	mi
 8000d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8000d62:	6023      	strmi	r3, [r4, #0]
 8000d64:	b11d      	cbz	r5, 8000d6e <_printf_i+0x19e>
 8000d66:	2310      	movs	r3, #16
 8000d68:	e7ac      	b.n	8000cc4 <_printf_i+0xf4>
 8000d6a:	4827      	ldr	r0, [pc, #156]	@ (8000e08 <_printf_i+0x238>)
 8000d6c:	e7e9      	b.n	8000d42 <_printf_i+0x172>
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	f023 0320 	bic.w	r3, r3, #32
 8000d74:	6023      	str	r3, [r4, #0]
 8000d76:	e7f6      	b.n	8000d66 <_printf_i+0x196>
 8000d78:	4616      	mov	r6, r2
 8000d7a:	e7bd      	b.n	8000cf8 <_printf_i+0x128>
 8000d7c:	6833      	ldr	r3, [r6, #0]
 8000d7e:	6825      	ldr	r5, [r4, #0]
 8000d80:	6961      	ldr	r1, [r4, #20]
 8000d82:	1d18      	adds	r0, r3, #4
 8000d84:	6030      	str	r0, [r6, #0]
 8000d86:	062e      	lsls	r6, r5, #24
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	d501      	bpl.n	8000d90 <_printf_i+0x1c0>
 8000d8c:	6019      	str	r1, [r3, #0]
 8000d8e:	e002      	b.n	8000d96 <_printf_i+0x1c6>
 8000d90:	0668      	lsls	r0, r5, #25
 8000d92:	d5fb      	bpl.n	8000d8c <_printf_i+0x1bc>
 8000d94:	8019      	strh	r1, [r3, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	6123      	str	r3, [r4, #16]
 8000d9a:	4616      	mov	r6, r2
 8000d9c:	e7bc      	b.n	8000d18 <_printf_i+0x148>
 8000d9e:	6833      	ldr	r3, [r6, #0]
 8000da0:	1d1a      	adds	r2, r3, #4
 8000da2:	6032      	str	r2, [r6, #0]
 8000da4:	681e      	ldr	r6, [r3, #0]
 8000da6:	6862      	ldr	r2, [r4, #4]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4630      	mov	r0, r6
 8000dac:	f7ff fa18 	bl	80001e0 <memchr>
 8000db0:	b108      	cbz	r0, 8000db6 <_printf_i+0x1e6>
 8000db2:	1b80      	subs	r0, r0, r6
 8000db4:	6060      	str	r0, [r4, #4]
 8000db6:	6863      	ldr	r3, [r4, #4]
 8000db8:	6123      	str	r3, [r4, #16]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000dc0:	e7aa      	b.n	8000d18 <_printf_i+0x148>
 8000dc2:	6923      	ldr	r3, [r4, #16]
 8000dc4:	4632      	mov	r2, r6
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	4640      	mov	r0, r8
 8000dca:	47d0      	blx	sl
 8000dcc:	3001      	adds	r0, #1
 8000dce:	d0ad      	beq.n	8000d2c <_printf_i+0x15c>
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	079b      	lsls	r3, r3, #30
 8000dd4:	d413      	bmi.n	8000dfe <_printf_i+0x22e>
 8000dd6:	68e0      	ldr	r0, [r4, #12]
 8000dd8:	9b03      	ldr	r3, [sp, #12]
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	bfb8      	it	lt
 8000dde:	4618      	movlt	r0, r3
 8000de0:	e7a6      	b.n	8000d30 <_printf_i+0x160>
 8000de2:	2301      	movs	r3, #1
 8000de4:	4632      	mov	r2, r6
 8000de6:	4649      	mov	r1, r9
 8000de8:	4640      	mov	r0, r8
 8000dea:	47d0      	blx	sl
 8000dec:	3001      	adds	r0, #1
 8000dee:	d09d      	beq.n	8000d2c <_printf_i+0x15c>
 8000df0:	3501      	adds	r5, #1
 8000df2:	68e3      	ldr	r3, [r4, #12]
 8000df4:	9903      	ldr	r1, [sp, #12]
 8000df6:	1a5b      	subs	r3, r3, r1
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	dcf2      	bgt.n	8000de2 <_printf_i+0x212>
 8000dfc:	e7eb      	b.n	8000dd6 <_printf_i+0x206>
 8000dfe:	2500      	movs	r5, #0
 8000e00:	f104 0619 	add.w	r6, r4, #25
 8000e04:	e7f5      	b.n	8000df2 <_printf_i+0x222>
 8000e06:	bf00      	nop
 8000e08:	0800102e 	.word	0x0800102e
 8000e0c:	0800103f 	.word	0x0800103f

08000e10 <__malloc_lock>:
 8000e10:	4801      	ldr	r0, [pc, #4]	@ (8000e18 <__malloc_lock+0x8>)
 8000e12:	f7ff bc73 	b.w	80006fc <__retarget_lock_acquire_recursive>
 8000e16:	bf00      	nop
 8000e18:	200002d0 	.word	0x200002d0

08000e1c <__malloc_unlock>:
 8000e1c:	4801      	ldr	r0, [pc, #4]	@ (8000e24 <__malloc_unlock+0x8>)
 8000e1e:	f7ff bc6e 	b.w	80006fe <__retarget_lock_release_recursive>
 8000e22:	bf00      	nop
 8000e24:	200002d0 	.word	0x200002d0

08000e28 <_realloc_r>:
 8000e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e2c:	4680      	mov	r8, r0
 8000e2e:	4615      	mov	r5, r2
 8000e30:	460c      	mov	r4, r1
 8000e32:	b921      	cbnz	r1, 8000e3e <_realloc_r+0x16>
 8000e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e38:	4611      	mov	r1, r2
 8000e3a:	f7ff bddb 	b.w	80009f4 <_malloc_r>
 8000e3e:	b92a      	cbnz	r2, 8000e4c <_realloc_r+0x24>
 8000e40:	f000 f858 	bl	8000ef4 <_free_r>
 8000e44:	2400      	movs	r4, #0
 8000e46:	4620      	mov	r0, r4
 8000e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e4c:	f000 f89c 	bl	8000f88 <_malloc_usable_size_r>
 8000e50:	4285      	cmp	r5, r0
 8000e52:	4606      	mov	r6, r0
 8000e54:	d802      	bhi.n	8000e5c <_realloc_r+0x34>
 8000e56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000e5a:	d8f4      	bhi.n	8000e46 <_realloc_r+0x1e>
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	4640      	mov	r0, r8
 8000e60:	f7ff fdc8 	bl	80009f4 <_malloc_r>
 8000e64:	4607      	mov	r7, r0
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d0ec      	beq.n	8000e44 <_realloc_r+0x1c>
 8000e6a:	42b5      	cmp	r5, r6
 8000e6c:	462a      	mov	r2, r5
 8000e6e:	4621      	mov	r1, r4
 8000e70:	bf28      	it	cs
 8000e72:	4632      	movcs	r2, r6
 8000e74:	f000 f830 	bl	8000ed8 <memcpy>
 8000e78:	4621      	mov	r1, r4
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	f000 f83a 	bl	8000ef4 <_free_r>
 8000e80:	463c      	mov	r4, r7
 8000e82:	e7e0      	b.n	8000e46 <_realloc_r+0x1e>

08000e84 <memmove>:
 8000e84:	4288      	cmp	r0, r1
 8000e86:	b510      	push	{r4, lr}
 8000e88:	eb01 0402 	add.w	r4, r1, r2
 8000e8c:	d902      	bls.n	8000e94 <memmove+0x10>
 8000e8e:	4284      	cmp	r4, r0
 8000e90:	4623      	mov	r3, r4
 8000e92:	d807      	bhi.n	8000ea4 <memmove+0x20>
 8000e94:	1e43      	subs	r3, r0, #1
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	d008      	beq.n	8000eac <memmove+0x28>
 8000e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000ea2:	e7f8      	b.n	8000e96 <memmove+0x12>
 8000ea4:	4402      	add	r2, r0
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d100      	bne.n	8000eae <memmove+0x2a>
 8000eac:	bd10      	pop	{r4, pc}
 8000eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000eb6:	e7f7      	b.n	8000ea8 <memmove+0x24>

08000eb8 <_sbrk_r>:
 8000eb8:	b538      	push	{r3, r4, r5, lr}
 8000eba:	4d06      	ldr	r5, [pc, #24]	@ (8000ed4 <_sbrk_r+0x1c>)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	602b      	str	r3, [r5, #0]
 8000ec4:	f7ff fb70 	bl	80005a8 <_sbrk>
 8000ec8:	1c43      	adds	r3, r0, #1
 8000eca:	d102      	bne.n	8000ed2 <_sbrk_r+0x1a>
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	b103      	cbz	r3, 8000ed2 <_sbrk_r+0x1a>
 8000ed0:	6023      	str	r3, [r4, #0]
 8000ed2:	bd38      	pop	{r3, r4, r5, pc}
 8000ed4:	200002dc 	.word	0x200002dc

08000ed8 <memcpy>:
 8000ed8:	440a      	add	r2, r1
 8000eda:	4291      	cmp	r1, r2
 8000edc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000ee0:	d100      	bne.n	8000ee4 <memcpy+0xc>
 8000ee2:	4770      	bx	lr
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000eee:	4291      	cmp	r1, r2
 8000ef0:	d1f9      	bne.n	8000ee6 <memcpy+0xe>
 8000ef2:	bd10      	pop	{r4, pc}

08000ef4 <_free_r>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4605      	mov	r5, r0
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	d041      	beq.n	8000f80 <_free_r+0x8c>
 8000efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f00:	1f0c      	subs	r4, r1, #4
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	bfb8      	it	lt
 8000f06:	18e4      	addlt	r4, r4, r3
 8000f08:	f7ff ff82 	bl	8000e10 <__malloc_lock>
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f84 <_free_r+0x90>)
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	b933      	cbnz	r3, 8000f20 <_free_r+0x2c>
 8000f12:	6063      	str	r3, [r4, #4]
 8000f14:	6014      	str	r4, [r2, #0]
 8000f16:	4628      	mov	r0, r5
 8000f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f1c:	f7ff bf7e 	b.w	8000e1c <__malloc_unlock>
 8000f20:	42a3      	cmp	r3, r4
 8000f22:	d908      	bls.n	8000f36 <_free_r+0x42>
 8000f24:	6820      	ldr	r0, [r4, #0]
 8000f26:	1821      	adds	r1, r4, r0
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	bf01      	itttt	eq
 8000f2c:	6819      	ldreq	r1, [r3, #0]
 8000f2e:	685b      	ldreq	r3, [r3, #4]
 8000f30:	1809      	addeq	r1, r1, r0
 8000f32:	6021      	streq	r1, [r4, #0]
 8000f34:	e7ed      	b.n	8000f12 <_free_r+0x1e>
 8000f36:	461a      	mov	r2, r3
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	b10b      	cbz	r3, 8000f40 <_free_r+0x4c>
 8000f3c:	42a3      	cmp	r3, r4
 8000f3e:	d9fa      	bls.n	8000f36 <_free_r+0x42>
 8000f40:	6811      	ldr	r1, [r2, #0]
 8000f42:	1850      	adds	r0, r2, r1
 8000f44:	42a0      	cmp	r0, r4
 8000f46:	d10b      	bne.n	8000f60 <_free_r+0x6c>
 8000f48:	6820      	ldr	r0, [r4, #0]
 8000f4a:	4401      	add	r1, r0
 8000f4c:	1850      	adds	r0, r2, r1
 8000f4e:	4283      	cmp	r3, r0
 8000f50:	6011      	str	r1, [r2, #0]
 8000f52:	d1e0      	bne.n	8000f16 <_free_r+0x22>
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	6053      	str	r3, [r2, #4]
 8000f5a:	4408      	add	r0, r1
 8000f5c:	6010      	str	r0, [r2, #0]
 8000f5e:	e7da      	b.n	8000f16 <_free_r+0x22>
 8000f60:	d902      	bls.n	8000f68 <_free_r+0x74>
 8000f62:	230c      	movs	r3, #12
 8000f64:	602b      	str	r3, [r5, #0]
 8000f66:	e7d6      	b.n	8000f16 <_free_r+0x22>
 8000f68:	6820      	ldr	r0, [r4, #0]
 8000f6a:	1821      	adds	r1, r4, r0
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	bf04      	itt	eq
 8000f70:	6819      	ldreq	r1, [r3, #0]
 8000f72:	685b      	ldreq	r3, [r3, #4]
 8000f74:	6063      	str	r3, [r4, #4]
 8000f76:	bf04      	itt	eq
 8000f78:	1809      	addeq	r1, r1, r0
 8000f7a:	6021      	streq	r1, [r4, #0]
 8000f7c:	6054      	str	r4, [r2, #4]
 8000f7e:	e7ca      	b.n	8000f16 <_free_r+0x22>
 8000f80:	bd38      	pop	{r3, r4, r5, pc}
 8000f82:	bf00      	nop
 8000f84:	200002d8 	.word	0x200002d8

08000f88 <_malloc_usable_size_r>:
 8000f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f8c:	1f18      	subs	r0, r3, #4
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bfbc      	itt	lt
 8000f92:	580b      	ldrlt	r3, [r1, r0]
 8000f94:	18c0      	addlt	r0, r0, r3
 8000f96:	4770      	bx	lr

08000f98 <_init>:
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9a:	bf00      	nop
 8000f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9e:	bc08      	pop	{r3}
 8000fa0:	469e      	mov	lr, r3
 8000fa2:	4770      	bx	lr

08000fa4 <_fini>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	bf00      	nop
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr
