
SerialInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e58  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08000ff8  08000ff8  00001ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001090  08001090  00003178  2**0
                  CONTENTS
  4 .ARM          00000008  08001090  08001090  00002090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001098  08001098  00003178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001098  08001098  00002098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800109c  0800109c  0000209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  080010a0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003178  2**0
                  CONTENTS
 10 .bss          00000168  20000178  20000178  00003178  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e0  200002e0  00003178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b36  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000047a  00000000  00000000  00003cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00004158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000072  00000000  00000000  00004208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ea9  00000000  00000000  0000427a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000012d8  00000000  00000000  0001a123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076397  00000000  00000000  0001b3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00091792  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006b8  00000000  00000000  000917d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00091e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000178 	.word	0x20000178
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000fe0 	.word	0x08000fe0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000017c 	.word	0x2000017c
 80001dc:	08000fe0 	.word	0x08000fe0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <completion_callback>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void completion_callback(uint8_t *string_buffer, uint8_t length) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]

	// Echo back the received string
	SerialOutputString((uint8_t*)"\r\nYou entered: ", &USART1_PORT);
 800028c:	4912      	ldr	r1, [pc, #72]	@ (80002d8 <completion_callback+0x58>)
 800028e:	4813      	ldr	r0, [pc, #76]	@ (80002dc <completion_callback+0x5c>)
 8000290:	f000 f8e5 	bl	800045e <SerialOutputString>
    SerialOutputString(string_buffer, &USART1_PORT);
 8000294:	4910      	ldr	r1, [pc, #64]	@ (80002d8 <completion_callback+0x58>)
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 f8e1 	bl	800045e <SerialOutputString>
    SerialOutputString((uint8_t*)"\r\nCharacters received: ", &USART1_PORT);
 800029c:	490e      	ldr	r1, [pc, #56]	@ (80002d8 <completion_callback+0x58>)
 800029e:	4810      	ldr	r0, [pc, #64]	@ (80002e0 <completion_callback+0x60>)
 80002a0:	f000 f8dd 	bl	800045e <SerialOutputString>

    // Convert chars_read to string and display
    char num_str[10];
    sprintf(num_str, "%d", length);
 80002a4:	78fa      	ldrb	r2, [r7, #3]
 80002a6:	f107 030c 	add.w	r3, r7, #12
 80002aa:	490e      	ldr	r1, [pc, #56]	@ (80002e4 <completion_callback+0x64>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f9ff 	bl	80006b0 <siprintf>
    SerialOutputString((uint8_t*)num_str, &USART1_PORT);
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	4908      	ldr	r1, [pc, #32]	@ (80002d8 <completion_callback+0x58>)
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f8d0 	bl	800045e <SerialOutputString>
    SerialOutputString((uint8_t*)"\r\n", &USART1_PORT);
 80002be:	4906      	ldr	r1, [pc, #24]	@ (80002d8 <completion_callback+0x58>)
 80002c0:	4809      	ldr	r0, [pc, #36]	@ (80002e8 <completion_callback+0x68>)
 80002c2:	f000 f8cc 	bl	800045e <SerialOutputString>

    // Prompt for next input
       SerialOutputString((uint8_t*)"Enter text ('\\r' to terminate):\r\n", &USART1_PORT);
 80002c6:	4904      	ldr	r1, [pc, #16]	@ (80002d8 <completion_callback+0x58>)
 80002c8:	4808      	ldr	r0, [pc, #32]	@ (80002ec <completion_callback+0x6c>)
 80002ca:	f000 f8c8 	bl	800045e <SerialOutputString>
   }
 80002ce:	bf00      	nop
 80002d0:	3718      	adds	r7, #24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000000 	.word	0x20000000
 80002dc:	08000ff8 	.word	0x08000ff8
 80002e0:	08001008 	.word	0x08001008
 80002e4:	08001020 	.word	0x08001020
 80002e8:	08001024 	.word	0x08001024
 80002ec:	08001028 	.word	0x08001028

080002f0 <main>:



int main(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
    // Initialize the serial port with a baud rate of 115200
    SerialInitialise(BAUD_115200, &USART1_PORT, &completion_callback);
 80002f4:	4a08      	ldr	r2, [pc, #32]	@ (8000318 <main+0x28>)
 80002f6:	4909      	ldr	r1, [pc, #36]	@ (800031c <main+0x2c>)
 80002f8:	2004      	movs	r0, #4
 80002fa:	f000 f815 	bl	8000328 <SerialInitialise>

    // Send initial welcome message
    SerialOutputString((uint8_t*)"UART ACTIVATED\r\n", &USART1_PORT);
 80002fe:	4907      	ldr	r1, [pc, #28]	@ (800031c <main+0x2c>)
 8000300:	4807      	ldr	r0, [pc, #28]	@ (8000320 <main+0x30>)
 8000302:	f000 f8ac 	bl	800045e <SerialOutputString>
    SerialOutputString((uint8_t*)"Enter text ('\\r' to terminate):\r\n", &USART1_PORT);
 8000306:	4905      	ldr	r1, [pc, #20]	@ (800031c <main+0x2c>)
 8000308:	4806      	ldr	r0, [pc, #24]	@ (8000324 <main+0x34>)
 800030a:	f000 f8a8 	bl	800045e <SerialOutputString>

    /* Loop forever */
    for(;;) {
        // Call SerialInputString to handle input
        // The completion_callback will be triggered when a full string is received
        SerialInputString(&USART1_PORT);
 800030e:	4803      	ldr	r0, [pc, #12]	@ (800031c <main+0x2c>)
 8000310:	f000 f8ff 	bl	8000512 <SerialInputString>
 8000314:	e7fb      	b.n	800030e <main+0x1e>
 8000316:	bf00      	nop
 8000318:	08000281 	.word	0x08000281
 800031c:	20000000 	.word	0x20000000
 8000320:	0800104c 	.word	0x0800104c
 8000324:	08001028 	.word	0x08001028

08000328 <SerialInitialise>:



// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(BaudRate baudRate, SerialPort *serial_port, void (*callback)(uint8_t *data, uint8_t length)) {
 8000328:	b480      	push	{r7}
 800032a:	b087      	sub	sp, #28
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
 8000334:	73fb      	strb	r3, [r7, #15]

	serial_port->completion_function = callback; //callback to function
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    // enable clock power, system configuration clock and GPIOC
    // common to all UARTs
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800033e:	4b3a      	ldr	r3, [pc, #232]	@ (8000428 <SerialInitialise+0x100>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	4a39      	ldr	r2, [pc, #228]	@ (8000428 <SerialInitialise+0x100>)
 8000344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000348:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800034a:	4b37      	ldr	r3, [pc, #220]	@ (8000428 <SerialInitialise+0x100>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a36      	ldr	r2, [pc, #216]	@ (8000428 <SerialInitialise+0x100>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6193      	str	r3, [r2, #24]

    // enable the GPIO which is on the AHB bus
    RCC->AHBENR |= serial_port->MaskAHBENR;
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	691a      	ldr	r2, [r3, #16]
 800035a:	4b33      	ldr	r3, [pc, #204]	@ (8000428 <SerialInitialise+0x100>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4932      	ldr	r1, [pc, #200]	@ (8000428 <SerialInitialise+0x100>)
 8000360:	4313      	orrs	r3, r2
 8000362:	614b      	str	r3, [r1, #20]

    // set pin mode to alternate function for the specific GPIO pins
    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	6952      	ldr	r2, [r2, #20]
 800036c:	601a      	str	r2, [r3, #0]

    // enable high speed clock for specific GPIO pins
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	68ba      	ldr	r2, [r7, #8]
 8000374:	6992      	ldr	r2, [r2, #24]
 8000376:	609a      	str	r2, [r3, #8]

    // set alternate function to enable USART to external pins
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	69d9      	ldr	r1, [r3, #28]
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	6a1a      	ldr	r2, [r3, #32]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	430a      	orrs	r2, r1
 8000388:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	6a19      	ldr	r1, [r3, #32]
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	430a      	orrs	r2, r1
 800039a:	625a      	str	r2, [r3, #36]	@ 0x24

    // enable the device based on the bits defined in the serial port definition
    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	68da      	ldr	r2, [r3, #12]
 80003a0:	4b21      	ldr	r3, [pc, #132]	@ (8000428 <SerialInitialise+0x100>)
 80003a2:	69db      	ldr	r3, [r3, #28]
 80003a4:	4920      	ldr	r1, [pc, #128]	@ (8000428 <SerialInitialise+0x100>)
 80003a6:	4313      	orrs	r3, r2
 80003a8:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	689a      	ldr	r2, [r3, #8]
 80003ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000428 <SerialInitialise+0x100>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	491d      	ldr	r1, [pc, #116]	@ (8000428 <SerialInitialise+0x100>)
 80003b4:	4313      	orrs	r3, r2
 80003b6:	618b      	str	r3, [r1, #24]

    // Get a pointer to the 16 bits of the BRR register that we want to change
    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	330c      	adds	r3, #12
 80003be:	617b      	str	r3, [r7, #20]

    // Baud rate calculation from datasheet
    switch(baudRate){
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	d822      	bhi.n	800040c <SerialInitialise+0xe4>
 80003c6:	a201      	add	r2, pc, #4	@ (adr r2, 80003cc <SerialInitialise+0xa4>)
 80003c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003cc:	080003e1 	.word	0x080003e1
 80003d0:	080003eb 	.word	0x080003eb
 80003d4:	080003f5 	.word	0x080003f5
 80003d8:	080003fd 	.word	0x080003fd
 80003dc:	08000405 	.word	0x08000405
    case BAUD_9600:
        *baud_rate_config = 0x341;  // 9600 at 8MHz
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	f240 3241 	movw	r2, #833	@ 0x341
 80003e6:	801a      	strh	r2, [r3, #0]
        break;
 80003e8:	e010      	b.n	800040c <SerialInitialise+0xe4>
    case BAUD_19200:
        *baud_rate_config = 0x1A0;  // 19200 at 8MHz
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 80003f0:	801a      	strh	r2, [r3, #0]
        break;
 80003f2:	e00b      	b.n	800040c <SerialInitialise+0xe4>
    case BAUD_38400:
        *baud_rate_config = 0xD0;   // 38400 at 8MHz
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	22d0      	movs	r2, #208	@ 0xd0
 80003f8:	801a      	strh	r2, [r3, #0]
        break;
 80003fa:	e007      	b.n	800040c <SerialInitialise+0xe4>
    case BAUD_57600:
        *baud_rate_config = 0x8B;   // 57600 at 8MHz
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	228b      	movs	r2, #139	@ 0x8b
 8000400:	801a      	strh	r2, [r3, #0]
        break;
 8000402:	e003      	b.n	800040c <SerialInitialise+0xe4>
    case BAUD_115200:
        *baud_rate_config = 0x46;   // 115200 at 8MHz
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	2246      	movs	r2, #70	@ 0x46
 8000408:	801a      	strh	r2, [r3, #0]
        break;
 800040a:	bf00      	nop
    }

    // enable serial port for tx and rx
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f042 020d 	orr.w	r2, r2, #13
 800041a:	601a      	str	r2, [r3, #0]
}
 800041c:	bf00      	nop
 800041e:	371c      	adds	r7, #28
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000

0800042c <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	6039      	str	r1, [r7, #0]
 8000436:	71fb      	strb	r3, [r7, #7]
    // Wait until the transmit data register is empty
    while((serial_port->UART->ISR & USART_ISR_TXE) == 0) {
 8000438:	bf00      	nop
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0f8      	beq.n	800043a <SerialOutputChar+0xe>
        // Do nothing, just wait
    }

    // Send the data
    serial_port->UART->TDR = data;
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	79fa      	ldrb	r2, [r7, #7]
 800044e:	b292      	uxth	r2, r2
 8000450:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800045e:	b580      	push	{r7, lr}
 8000460:	b084      	sub	sp, #16
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	6039      	str	r1, [r7, #0]
    uint32_t counter = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
    while(*pt) {
 800046c:	e00b      	b.n	8000486 <SerialOutputString+0x28>
        SerialOutputChar(*pt, serial_port);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	6839      	ldr	r1, [r7, #0]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ffd9 	bl	800042c <SerialOutputChar>
        counter++;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	3301      	adds	r3, #1
 800047e:	60fb      	str	r3, [r7, #12]
        pt++;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3301      	adds	r3, #1
 8000484:	607b      	str	r3, [r7, #4]
    while(*pt) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d1ef      	bne.n	800046e <SerialOutputString+0x10>
    }
}
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <SerialReceiveChar>:


// returns 1 if valid char, 0 if timeout
uint8_t SerialReceiveChar(SerialPort *serial_port, uint8_t *received_char) {
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
    uint16_t timeout = 0xffff;
 80004a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004a6:	81fb      	strh	r3, [r7, #14]

    while (1) {
        timeout--;
 80004a8:	89fb      	ldrh	r3, [r7, #14]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	81fb      	strh	r3, [r7, #14]
        if (timeout == 0)
 80004ae:	89fb      	ldrh	r3, [r7, #14]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d101      	bne.n	80004b8 <SerialReceiveChar+0x20>
            return 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	e026      	b.n	8000506 <SerialReceiveChar+0x6e>

        // Check for overrun or framing error
        if (serial_port->UART->ISR & USART_ISR_ORE || serial_port->UART->ISR & USART_ISR_FE) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 0308 	and.w	r3, r3, #8
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d106      	bne.n	80004d4 <SerialReceiveChar+0x3c>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	f003 0302 	and.w	r3, r3, #2
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d007      	beq.n	80004e4 <SerialReceiveChar+0x4c>
            serial_port->UART->ICR |= USART_ICR_ORECF | USART_ICR_FECF;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6a1a      	ldr	r2, [r3, #32]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f042 020a 	orr.w	r2, r2, #10
 80004e2:	621a      	str	r2, [r3, #32]
        }

        // Check if data is available to read
        if (serial_port->UART->ISR & USART_ISR_RXNE) {
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 0320 	and.w	r3, r3, #32
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d100      	bne.n	80004f4 <SerialReceiveChar+0x5c>
        timeout--;
 80004f2:	e7d9      	b.n	80004a8 <SerialReceiveChar+0x10>
            break;
 80004f4:	bf00      	nop
        }
    }

    // Read the received data
    *received_char = serial_port->UART->RDR;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	701a      	strb	r2, [r3, #0]
    return 1;
 8000504:	2301      	movs	r3, #1
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <SerialInputString>:

// Read a string from serial port into buffer until terminating character (CR or LF)
uint16_t SerialInputString(SerialPort *serial_port) {
 8000512:	b580      	push	{r7, lr}
 8000514:	b086      	sub	sp, #24
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
    uint8_t receivedChar;
    uint16_t index = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	82fb      	strh	r3, [r7, #22]

    // Clear buffer first
    for (int i = 0; i < BUFFER_SIZE; i++) {
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	e008      	b.n	8000536 <SerialInputString+0x24>
        serial_port->rx_buffer[i] = 0;
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	693b      	ldr	r3, [r7, #16]
 8000528:	4413      	add	r3, r2
 800052a:	3324      	adds	r3, #36	@ 0x24
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE; i++) {
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	2bff      	cmp	r3, #255	@ 0xff
 800053a:	ddf3      	ble.n	8000524 <SerialInputString+0x12>
    }

    // Read characters until enter key or buffer full
    while (index < BUFFER_SIZE - 1) {
 800053c:	e017      	b.n	800056e <SerialInputString+0x5c>
        if (SerialReceiveChar(serial_port, &receivedChar)) {
 800053e:	f107 030e 	add.w	r3, r7, #14
 8000542:	4619      	mov	r1, r3
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ffa7 	bl	8000498 <SerialReceiveChar>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00e      	beq.n	800056e <SerialInputString+0x5c>


            // Store character in buffer
            serial_port->rx_buffer[index++] = receivedChar;
 8000550:	8afb      	ldrh	r3, [r7, #22]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	82fa      	strh	r2, [r7, #22]
 8000556:	4619      	mov	r1, r3
 8000558:	7bba      	ldrb	r2, [r7, #14]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	440b      	add	r3, r1
 800055e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            // Break if CR or LF (terminating characters)
            if (receivedChar == '\r' || receivedChar == '\n') {
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	2b0d      	cmp	r3, #13
 8000566:	d005      	beq.n	8000574 <SerialInputString+0x62>
 8000568:	7bbb      	ldrb	r3, [r7, #14]
 800056a:	2b0a      	cmp	r3, #10
 800056c:	d002      	beq.n	8000574 <SerialInputString+0x62>
    while (index < BUFFER_SIZE - 1) {
 800056e:	8afb      	ldrh	r3, [r7, #22]
 8000570:	2bfe      	cmp	r3, #254	@ 0xfe
 8000572:	d9e4      	bls.n	800053e <SerialInputString+0x2c>
            }
        }
    }

    // Null-terminate the string
    serial_port->rx_buffer[index] = '\0';
 8000574:	8afb      	ldrh	r3, [r7, #22]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	2200      	movs	r2, #0
 800057c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    // Null-terminate string and strip '\r' if needed
    uint8_t clean_length = index;
 8000580:	8afb      	ldrh	r3, [r7, #22]
 8000582:	73fb      	strb	r3, [r7, #15]
    if (index > 0 && (serial_port->rx_buffer[index - 1] == '\r' || serial_port->rx_buffer[index - 1] == '\n')) {
 8000584:	8afb      	ldrh	r3, [r7, #22]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d019      	beq.n	80005be <SerialInputString+0xac>
 800058a:	8afb      	ldrh	r3, [r7, #22]
 800058c:	3b01      	subs	r3, #1
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000596:	2b0d      	cmp	r3, #13
 8000598:	d007      	beq.n	80005aa <SerialInputString+0x98>
 800059a:	8afb      	ldrh	r3, [r7, #22]
 800059c:	3b01      	subs	r3, #1
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80005a6:	2b0a      	cmp	r3, #10
 80005a8:	d109      	bne.n	80005be <SerialInputString+0xac>
        clean_length--;
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
        serial_port->rx_buffer[clean_length] = '\0';  // Replace terminator with '\0'
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80005bc:	e005      	b.n	80005ca <SerialInputString+0xb8>
    } else {
        serial_port->rx_buffer[clean_length] = '\0';  // Add null at end
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }

    // Call the completion function if it exists
    if (serial_port->completion_function != NULL) {
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d007      	beq.n	80005e4 <SerialInputString+0xd2>
        serial_port->completion_function(serial_port->rx_buffer, clean_length);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	3224      	adds	r2, #36	@ 0x24
 80005de:	7bf9      	ldrb	r1, [r7, #15]
 80005e0:	4610      	mov	r0, r2
 80005e2:	4798      	blx	r3
    }

    return index;
 80005e4:	8afb      	ldrh	r3, [r7, #22]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	@ (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f000 f866 	bl	80006f0 <__errno>
 8000624:	4603      	mov	r3, r0
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <_sbrk+0x64>)
 8000640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000a000 	.word	0x2000a000
 8000650:	00000400 	.word	0x00000400
 8000654:	20000194 	.word	0x20000194
 8000658:	200002e0 	.word	0x200002e0

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <LoopForever+0x6>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	@ (800069c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LoopForever+0xe>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	@ (80006a8 <LoopForever+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068a:	f000 f837 	bl	80006fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fe2f 	bl	80002f0 <main>

08000692 <LoopForever>:

LoopForever:
  b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80006a0:	080010a0 	.word	0x080010a0
  ldr r2, =_sbss
 80006a4:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80006a8:	200002e0 	.word	0x200002e0

080006ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC1_2_IRQHandler>
	...

080006b0 <siprintf>:
 80006b0:	b40e      	push	{r1, r2, r3}
 80006b2:	b500      	push	{lr}
 80006b4:	b09c      	sub	sp, #112	@ 0x70
 80006b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80006b8:	9002      	str	r0, [sp, #8]
 80006ba:	9006      	str	r0, [sp, #24]
 80006bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80006c0:	4809      	ldr	r0, [pc, #36]	@ (80006e8 <siprintf+0x38>)
 80006c2:	9107      	str	r1, [sp, #28]
 80006c4:	9104      	str	r1, [sp, #16]
 80006c6:	4909      	ldr	r1, [pc, #36]	@ (80006ec <siprintf+0x3c>)
 80006c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80006cc:	9105      	str	r1, [sp, #20]
 80006ce:	6800      	ldr	r0, [r0, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	a902      	add	r1, sp, #8
 80006d4:	f000 f98c 	bl	80009f0 <_svfiprintf_r>
 80006d8:	9b02      	ldr	r3, [sp, #8]
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	b01c      	add	sp, #112	@ 0x70
 80006e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80006e4:	b003      	add	sp, #12
 80006e6:	4770      	bx	lr
 80006e8:	20000128 	.word	0x20000128
 80006ec:	ffff0208 	.word	0xffff0208

080006f0 <__errno>:
 80006f0:	4b01      	ldr	r3, [pc, #4]	@ (80006f8 <__errno+0x8>)
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000128 	.word	0x20000128

080006fc <__libc_init_array>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000734 <__libc_init_array+0x38>)
 8000700:	4c0d      	ldr	r4, [pc, #52]	@ (8000738 <__libc_init_array+0x3c>)
 8000702:	1b64      	subs	r4, r4, r5
 8000704:	10a4      	asrs	r4, r4, #2
 8000706:	2600      	movs	r6, #0
 8000708:	42a6      	cmp	r6, r4
 800070a:	d109      	bne.n	8000720 <__libc_init_array+0x24>
 800070c:	4d0b      	ldr	r5, [pc, #44]	@ (800073c <__libc_init_array+0x40>)
 800070e:	4c0c      	ldr	r4, [pc, #48]	@ (8000740 <__libc_init_array+0x44>)
 8000710:	f000 fc66 	bl	8000fe0 <_init>
 8000714:	1b64      	subs	r4, r4, r5
 8000716:	10a4      	asrs	r4, r4, #2
 8000718:	2600      	movs	r6, #0
 800071a:	42a6      	cmp	r6, r4
 800071c:	d105      	bne.n	800072a <__libc_init_array+0x2e>
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f855 3b04 	ldr.w	r3, [r5], #4
 8000724:	4798      	blx	r3
 8000726:	3601      	adds	r6, #1
 8000728:	e7ee      	b.n	8000708 <__libc_init_array+0xc>
 800072a:	f855 3b04 	ldr.w	r3, [r5], #4
 800072e:	4798      	blx	r3
 8000730:	3601      	adds	r6, #1
 8000732:	e7f2      	b.n	800071a <__libc_init_array+0x1e>
 8000734:	08001098 	.word	0x08001098
 8000738:	08001098 	.word	0x08001098
 800073c:	08001098 	.word	0x08001098
 8000740:	0800109c 	.word	0x0800109c

08000744 <__retarget_lock_acquire_recursive>:
 8000744:	4770      	bx	lr

08000746 <__retarget_lock_release_recursive>:
 8000746:	4770      	bx	lr

08000748 <_free_r>:
 8000748:	b538      	push	{r3, r4, r5, lr}
 800074a:	4605      	mov	r5, r0
 800074c:	2900      	cmp	r1, #0
 800074e:	d041      	beq.n	80007d4 <_free_r+0x8c>
 8000750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000754:	1f0c      	subs	r4, r1, #4
 8000756:	2b00      	cmp	r3, #0
 8000758:	bfb8      	it	lt
 800075a:	18e4      	addlt	r4, r4, r3
 800075c:	f000 f8e0 	bl	8000920 <__malloc_lock>
 8000760:	4a1d      	ldr	r2, [pc, #116]	@ (80007d8 <_free_r+0x90>)
 8000762:	6813      	ldr	r3, [r2, #0]
 8000764:	b933      	cbnz	r3, 8000774 <_free_r+0x2c>
 8000766:	6063      	str	r3, [r4, #4]
 8000768:	6014      	str	r4, [r2, #0]
 800076a:	4628      	mov	r0, r5
 800076c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000770:	f000 b8dc 	b.w	800092c <__malloc_unlock>
 8000774:	42a3      	cmp	r3, r4
 8000776:	d908      	bls.n	800078a <_free_r+0x42>
 8000778:	6820      	ldr	r0, [r4, #0]
 800077a:	1821      	adds	r1, r4, r0
 800077c:	428b      	cmp	r3, r1
 800077e:	bf01      	itttt	eq
 8000780:	6819      	ldreq	r1, [r3, #0]
 8000782:	685b      	ldreq	r3, [r3, #4]
 8000784:	1809      	addeq	r1, r1, r0
 8000786:	6021      	streq	r1, [r4, #0]
 8000788:	e7ed      	b.n	8000766 <_free_r+0x1e>
 800078a:	461a      	mov	r2, r3
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	b10b      	cbz	r3, 8000794 <_free_r+0x4c>
 8000790:	42a3      	cmp	r3, r4
 8000792:	d9fa      	bls.n	800078a <_free_r+0x42>
 8000794:	6811      	ldr	r1, [r2, #0]
 8000796:	1850      	adds	r0, r2, r1
 8000798:	42a0      	cmp	r0, r4
 800079a:	d10b      	bne.n	80007b4 <_free_r+0x6c>
 800079c:	6820      	ldr	r0, [r4, #0]
 800079e:	4401      	add	r1, r0
 80007a0:	1850      	adds	r0, r2, r1
 80007a2:	4283      	cmp	r3, r0
 80007a4:	6011      	str	r1, [r2, #0]
 80007a6:	d1e0      	bne.n	800076a <_free_r+0x22>
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	6053      	str	r3, [r2, #4]
 80007ae:	4408      	add	r0, r1
 80007b0:	6010      	str	r0, [r2, #0]
 80007b2:	e7da      	b.n	800076a <_free_r+0x22>
 80007b4:	d902      	bls.n	80007bc <_free_r+0x74>
 80007b6:	230c      	movs	r3, #12
 80007b8:	602b      	str	r3, [r5, #0]
 80007ba:	e7d6      	b.n	800076a <_free_r+0x22>
 80007bc:	6820      	ldr	r0, [r4, #0]
 80007be:	1821      	adds	r1, r4, r0
 80007c0:	428b      	cmp	r3, r1
 80007c2:	bf04      	itt	eq
 80007c4:	6819      	ldreq	r1, [r3, #0]
 80007c6:	685b      	ldreq	r3, [r3, #4]
 80007c8:	6063      	str	r3, [r4, #4]
 80007ca:	bf04      	itt	eq
 80007cc:	1809      	addeq	r1, r1, r0
 80007ce:	6021      	streq	r1, [r4, #0]
 80007d0:	6054      	str	r4, [r2, #4]
 80007d2:	e7ca      	b.n	800076a <_free_r+0x22>
 80007d4:	bd38      	pop	{r3, r4, r5, pc}
 80007d6:	bf00      	nop
 80007d8:	200002dc 	.word	0x200002dc

080007dc <sbrk_aligned>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	4e0f      	ldr	r6, [pc, #60]	@ (800081c <sbrk_aligned+0x40>)
 80007e0:	460c      	mov	r4, r1
 80007e2:	6831      	ldr	r1, [r6, #0]
 80007e4:	4605      	mov	r5, r0
 80007e6:	b911      	cbnz	r1, 80007ee <sbrk_aligned+0x12>
 80007e8:	f000 fba6 	bl	8000f38 <_sbrk_r>
 80007ec:	6030      	str	r0, [r6, #0]
 80007ee:	4621      	mov	r1, r4
 80007f0:	4628      	mov	r0, r5
 80007f2:	f000 fba1 	bl	8000f38 <_sbrk_r>
 80007f6:	1c43      	adds	r3, r0, #1
 80007f8:	d103      	bne.n	8000802 <sbrk_aligned+0x26>
 80007fa:	f04f 34ff 	mov.w	r4, #4294967295
 80007fe:	4620      	mov	r0, r4
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	1cc4      	adds	r4, r0, #3
 8000804:	f024 0403 	bic.w	r4, r4, #3
 8000808:	42a0      	cmp	r0, r4
 800080a:	d0f8      	beq.n	80007fe <sbrk_aligned+0x22>
 800080c:	1a21      	subs	r1, r4, r0
 800080e:	4628      	mov	r0, r5
 8000810:	f000 fb92 	bl	8000f38 <_sbrk_r>
 8000814:	3001      	adds	r0, #1
 8000816:	d1f2      	bne.n	80007fe <sbrk_aligned+0x22>
 8000818:	e7ef      	b.n	80007fa <sbrk_aligned+0x1e>
 800081a:	bf00      	nop
 800081c:	200002d8 	.word	0x200002d8

08000820 <_malloc_r>:
 8000820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000824:	1ccd      	adds	r5, r1, #3
 8000826:	f025 0503 	bic.w	r5, r5, #3
 800082a:	3508      	adds	r5, #8
 800082c:	2d0c      	cmp	r5, #12
 800082e:	bf38      	it	cc
 8000830:	250c      	movcc	r5, #12
 8000832:	2d00      	cmp	r5, #0
 8000834:	4606      	mov	r6, r0
 8000836:	db01      	blt.n	800083c <_malloc_r+0x1c>
 8000838:	42a9      	cmp	r1, r5
 800083a:	d904      	bls.n	8000846 <_malloc_r+0x26>
 800083c:	230c      	movs	r3, #12
 800083e:	6033      	str	r3, [r6, #0]
 8000840:	2000      	movs	r0, #0
 8000842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000846:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800091c <_malloc_r+0xfc>
 800084a:	f000 f869 	bl	8000920 <__malloc_lock>
 800084e:	f8d8 3000 	ldr.w	r3, [r8]
 8000852:	461c      	mov	r4, r3
 8000854:	bb44      	cbnz	r4, 80008a8 <_malloc_r+0x88>
 8000856:	4629      	mov	r1, r5
 8000858:	4630      	mov	r0, r6
 800085a:	f7ff ffbf 	bl	80007dc <sbrk_aligned>
 800085e:	1c43      	adds	r3, r0, #1
 8000860:	4604      	mov	r4, r0
 8000862:	d158      	bne.n	8000916 <_malloc_r+0xf6>
 8000864:	f8d8 4000 	ldr.w	r4, [r8]
 8000868:	4627      	mov	r7, r4
 800086a:	2f00      	cmp	r7, #0
 800086c:	d143      	bne.n	80008f6 <_malloc_r+0xd6>
 800086e:	2c00      	cmp	r4, #0
 8000870:	d04b      	beq.n	800090a <_malloc_r+0xea>
 8000872:	6823      	ldr	r3, [r4, #0]
 8000874:	4639      	mov	r1, r7
 8000876:	4630      	mov	r0, r6
 8000878:	eb04 0903 	add.w	r9, r4, r3
 800087c:	f000 fb5c 	bl	8000f38 <_sbrk_r>
 8000880:	4581      	cmp	r9, r0
 8000882:	d142      	bne.n	800090a <_malloc_r+0xea>
 8000884:	6821      	ldr	r1, [r4, #0]
 8000886:	1a6d      	subs	r5, r5, r1
 8000888:	4629      	mov	r1, r5
 800088a:	4630      	mov	r0, r6
 800088c:	f7ff ffa6 	bl	80007dc <sbrk_aligned>
 8000890:	3001      	adds	r0, #1
 8000892:	d03a      	beq.n	800090a <_malloc_r+0xea>
 8000894:	6823      	ldr	r3, [r4, #0]
 8000896:	442b      	add	r3, r5
 8000898:	6023      	str	r3, [r4, #0]
 800089a:	f8d8 3000 	ldr.w	r3, [r8]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	bb62      	cbnz	r2, 80008fc <_malloc_r+0xdc>
 80008a2:	f8c8 7000 	str.w	r7, [r8]
 80008a6:	e00f      	b.n	80008c8 <_malloc_r+0xa8>
 80008a8:	6822      	ldr	r2, [r4, #0]
 80008aa:	1b52      	subs	r2, r2, r5
 80008ac:	d420      	bmi.n	80008f0 <_malloc_r+0xd0>
 80008ae:	2a0b      	cmp	r2, #11
 80008b0:	d917      	bls.n	80008e2 <_malloc_r+0xc2>
 80008b2:	1961      	adds	r1, r4, r5
 80008b4:	42a3      	cmp	r3, r4
 80008b6:	6025      	str	r5, [r4, #0]
 80008b8:	bf18      	it	ne
 80008ba:	6059      	strne	r1, [r3, #4]
 80008bc:	6863      	ldr	r3, [r4, #4]
 80008be:	bf08      	it	eq
 80008c0:	f8c8 1000 	streq.w	r1, [r8]
 80008c4:	5162      	str	r2, [r4, r5]
 80008c6:	604b      	str	r3, [r1, #4]
 80008c8:	4630      	mov	r0, r6
 80008ca:	f000 f82f 	bl	800092c <__malloc_unlock>
 80008ce:	f104 000b 	add.w	r0, r4, #11
 80008d2:	1d23      	adds	r3, r4, #4
 80008d4:	f020 0007 	bic.w	r0, r0, #7
 80008d8:	1ac2      	subs	r2, r0, r3
 80008da:	bf1c      	itt	ne
 80008dc:	1a1b      	subne	r3, r3, r0
 80008de:	50a3      	strne	r3, [r4, r2]
 80008e0:	e7af      	b.n	8000842 <_malloc_r+0x22>
 80008e2:	6862      	ldr	r2, [r4, #4]
 80008e4:	42a3      	cmp	r3, r4
 80008e6:	bf0c      	ite	eq
 80008e8:	f8c8 2000 	streq.w	r2, [r8]
 80008ec:	605a      	strne	r2, [r3, #4]
 80008ee:	e7eb      	b.n	80008c8 <_malloc_r+0xa8>
 80008f0:	4623      	mov	r3, r4
 80008f2:	6864      	ldr	r4, [r4, #4]
 80008f4:	e7ae      	b.n	8000854 <_malloc_r+0x34>
 80008f6:	463c      	mov	r4, r7
 80008f8:	687f      	ldr	r7, [r7, #4]
 80008fa:	e7b6      	b.n	800086a <_malloc_r+0x4a>
 80008fc:	461a      	mov	r2, r3
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	42a3      	cmp	r3, r4
 8000902:	d1fb      	bne.n	80008fc <_malloc_r+0xdc>
 8000904:	2300      	movs	r3, #0
 8000906:	6053      	str	r3, [r2, #4]
 8000908:	e7de      	b.n	80008c8 <_malloc_r+0xa8>
 800090a:	230c      	movs	r3, #12
 800090c:	6033      	str	r3, [r6, #0]
 800090e:	4630      	mov	r0, r6
 8000910:	f000 f80c 	bl	800092c <__malloc_unlock>
 8000914:	e794      	b.n	8000840 <_malloc_r+0x20>
 8000916:	6005      	str	r5, [r0, #0]
 8000918:	e7d6      	b.n	80008c8 <_malloc_r+0xa8>
 800091a:	bf00      	nop
 800091c:	200002dc 	.word	0x200002dc

08000920 <__malloc_lock>:
 8000920:	4801      	ldr	r0, [pc, #4]	@ (8000928 <__malloc_lock+0x8>)
 8000922:	f7ff bf0f 	b.w	8000744 <__retarget_lock_acquire_recursive>
 8000926:	bf00      	nop
 8000928:	200002d4 	.word	0x200002d4

0800092c <__malloc_unlock>:
 800092c:	4801      	ldr	r0, [pc, #4]	@ (8000934 <__malloc_unlock+0x8>)
 800092e:	f7ff bf0a 	b.w	8000746 <__retarget_lock_release_recursive>
 8000932:	bf00      	nop
 8000934:	200002d4 	.word	0x200002d4

08000938 <__ssputs_r>:
 8000938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800093c:	688e      	ldr	r6, [r1, #8]
 800093e:	461f      	mov	r7, r3
 8000940:	42be      	cmp	r6, r7
 8000942:	680b      	ldr	r3, [r1, #0]
 8000944:	4682      	mov	sl, r0
 8000946:	460c      	mov	r4, r1
 8000948:	4690      	mov	r8, r2
 800094a:	d82d      	bhi.n	80009a8 <__ssputs_r+0x70>
 800094c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000950:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000954:	d026      	beq.n	80009a4 <__ssputs_r+0x6c>
 8000956:	6965      	ldr	r5, [r4, #20]
 8000958:	6909      	ldr	r1, [r1, #16]
 800095a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800095e:	eba3 0901 	sub.w	r9, r3, r1
 8000962:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000966:	1c7b      	adds	r3, r7, #1
 8000968:	444b      	add	r3, r9
 800096a:	106d      	asrs	r5, r5, #1
 800096c:	429d      	cmp	r5, r3
 800096e:	bf38      	it	cc
 8000970:	461d      	movcc	r5, r3
 8000972:	0553      	lsls	r3, r2, #21
 8000974:	d527      	bpl.n	80009c6 <__ssputs_r+0x8e>
 8000976:	4629      	mov	r1, r5
 8000978:	f7ff ff52 	bl	8000820 <_malloc_r>
 800097c:	4606      	mov	r6, r0
 800097e:	b360      	cbz	r0, 80009da <__ssputs_r+0xa2>
 8000980:	6921      	ldr	r1, [r4, #16]
 8000982:	464a      	mov	r2, r9
 8000984:	f000 fae8 	bl	8000f58 <memcpy>
 8000988:	89a3      	ldrh	r3, [r4, #12]
 800098a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800098e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000992:	81a3      	strh	r3, [r4, #12]
 8000994:	6126      	str	r6, [r4, #16]
 8000996:	6165      	str	r5, [r4, #20]
 8000998:	444e      	add	r6, r9
 800099a:	eba5 0509 	sub.w	r5, r5, r9
 800099e:	6026      	str	r6, [r4, #0]
 80009a0:	60a5      	str	r5, [r4, #8]
 80009a2:	463e      	mov	r6, r7
 80009a4:	42be      	cmp	r6, r7
 80009a6:	d900      	bls.n	80009aa <__ssputs_r+0x72>
 80009a8:	463e      	mov	r6, r7
 80009aa:	6820      	ldr	r0, [r4, #0]
 80009ac:	4632      	mov	r2, r6
 80009ae:	4641      	mov	r1, r8
 80009b0:	f000 faa8 	bl	8000f04 <memmove>
 80009b4:	68a3      	ldr	r3, [r4, #8]
 80009b6:	1b9b      	subs	r3, r3, r6
 80009b8:	60a3      	str	r3, [r4, #8]
 80009ba:	6823      	ldr	r3, [r4, #0]
 80009bc:	4433      	add	r3, r6
 80009be:	6023      	str	r3, [r4, #0]
 80009c0:	2000      	movs	r0, #0
 80009c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c6:	462a      	mov	r2, r5
 80009c8:	f000 fad4 	bl	8000f74 <_realloc_r>
 80009cc:	4606      	mov	r6, r0
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d1e0      	bne.n	8000994 <__ssputs_r+0x5c>
 80009d2:	6921      	ldr	r1, [r4, #16]
 80009d4:	4650      	mov	r0, sl
 80009d6:	f7ff feb7 	bl	8000748 <_free_r>
 80009da:	230c      	movs	r3, #12
 80009dc:	f8ca 3000 	str.w	r3, [sl]
 80009e0:	89a3      	ldrh	r3, [r4, #12]
 80009e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e6:	81a3      	strh	r3, [r4, #12]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	e7e9      	b.n	80009c2 <__ssputs_r+0x8a>
	...

080009f0 <_svfiprintf_r>:
 80009f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009f4:	4698      	mov	r8, r3
 80009f6:	898b      	ldrh	r3, [r1, #12]
 80009f8:	061b      	lsls	r3, r3, #24
 80009fa:	b09d      	sub	sp, #116	@ 0x74
 80009fc:	4607      	mov	r7, r0
 80009fe:	460d      	mov	r5, r1
 8000a00:	4614      	mov	r4, r2
 8000a02:	d510      	bpl.n	8000a26 <_svfiprintf_r+0x36>
 8000a04:	690b      	ldr	r3, [r1, #16]
 8000a06:	b973      	cbnz	r3, 8000a26 <_svfiprintf_r+0x36>
 8000a08:	2140      	movs	r1, #64	@ 0x40
 8000a0a:	f7ff ff09 	bl	8000820 <_malloc_r>
 8000a0e:	6028      	str	r0, [r5, #0]
 8000a10:	6128      	str	r0, [r5, #16]
 8000a12:	b930      	cbnz	r0, 8000a22 <_svfiprintf_r+0x32>
 8000a14:	230c      	movs	r3, #12
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	b01d      	add	sp, #116	@ 0x74
 8000a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a22:	2340      	movs	r3, #64	@ 0x40
 8000a24:	616b      	str	r3, [r5, #20]
 8000a26:	2300      	movs	r3, #0
 8000a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a30:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a34:	2330      	movs	r3, #48	@ 0x30
 8000a36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000bd4 <_svfiprintf_r+0x1e4>
 8000a3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a3e:	f04f 0901 	mov.w	r9, #1
 8000a42:	4623      	mov	r3, r4
 8000a44:	469a      	mov	sl, r3
 8000a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a4a:	b10a      	cbz	r2, 8000a50 <_svfiprintf_r+0x60>
 8000a4c:	2a25      	cmp	r2, #37	@ 0x25
 8000a4e:	d1f9      	bne.n	8000a44 <_svfiprintf_r+0x54>
 8000a50:	ebba 0b04 	subs.w	fp, sl, r4
 8000a54:	d00b      	beq.n	8000a6e <_svfiprintf_r+0x7e>
 8000a56:	465b      	mov	r3, fp
 8000a58:	4622      	mov	r2, r4
 8000a5a:	4629      	mov	r1, r5
 8000a5c:	4638      	mov	r0, r7
 8000a5e:	f7ff ff6b 	bl	8000938 <__ssputs_r>
 8000a62:	3001      	adds	r0, #1
 8000a64:	f000 80a7 	beq.w	8000bb6 <_svfiprintf_r+0x1c6>
 8000a68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000a6a:	445a      	add	r2, fp
 8000a6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	f000 809f 	beq.w	8000bb6 <_svfiprintf_r+0x1c6>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a82:	f10a 0a01 	add.w	sl, sl, #1
 8000a86:	9304      	str	r3, [sp, #16]
 8000a88:	9307      	str	r3, [sp, #28]
 8000a8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a90:	4654      	mov	r4, sl
 8000a92:	2205      	movs	r2, #5
 8000a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a98:	484e      	ldr	r0, [pc, #312]	@ (8000bd4 <_svfiprintf_r+0x1e4>)
 8000a9a:	f7ff fba1 	bl	80001e0 <memchr>
 8000a9e:	9a04      	ldr	r2, [sp, #16]
 8000aa0:	b9d8      	cbnz	r0, 8000ada <_svfiprintf_r+0xea>
 8000aa2:	06d0      	lsls	r0, r2, #27
 8000aa4:	bf44      	itt	mi
 8000aa6:	2320      	movmi	r3, #32
 8000aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000aac:	0711      	lsls	r1, r2, #28
 8000aae:	bf44      	itt	mi
 8000ab0:	232b      	movmi	r3, #43	@ 0x2b
 8000ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8000aba:	2b2a      	cmp	r3, #42	@ 0x2a
 8000abc:	d015      	beq.n	8000aea <_svfiprintf_r+0xfa>
 8000abe:	9a07      	ldr	r2, [sp, #28]
 8000ac0:	4654      	mov	r4, sl
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f04f 0c0a 	mov.w	ip, #10
 8000ac8:	4621      	mov	r1, r4
 8000aca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ace:	3b30      	subs	r3, #48	@ 0x30
 8000ad0:	2b09      	cmp	r3, #9
 8000ad2:	d94b      	bls.n	8000b6c <_svfiprintf_r+0x17c>
 8000ad4:	b1b0      	cbz	r0, 8000b04 <_svfiprintf_r+0x114>
 8000ad6:	9207      	str	r2, [sp, #28]
 8000ad8:	e014      	b.n	8000b04 <_svfiprintf_r+0x114>
 8000ada:	eba0 0308 	sub.w	r3, r0, r8
 8000ade:	fa09 f303 	lsl.w	r3, r9, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	9304      	str	r3, [sp, #16]
 8000ae6:	46a2      	mov	sl, r4
 8000ae8:	e7d2      	b.n	8000a90 <_svfiprintf_r+0xa0>
 8000aea:	9b03      	ldr	r3, [sp, #12]
 8000aec:	1d19      	adds	r1, r3, #4
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	9103      	str	r1, [sp, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bfbb      	ittet	lt
 8000af6:	425b      	neglt	r3, r3
 8000af8:	f042 0202 	orrlt.w	r2, r2, #2
 8000afc:	9307      	strge	r3, [sp, #28]
 8000afe:	9307      	strlt	r3, [sp, #28]
 8000b00:	bfb8      	it	lt
 8000b02:	9204      	strlt	r2, [sp, #16]
 8000b04:	7823      	ldrb	r3, [r4, #0]
 8000b06:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b08:	d10a      	bne.n	8000b20 <_svfiprintf_r+0x130>
 8000b0a:	7863      	ldrb	r3, [r4, #1]
 8000b0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b0e:	d132      	bne.n	8000b76 <_svfiprintf_r+0x186>
 8000b10:	9b03      	ldr	r3, [sp, #12]
 8000b12:	1d1a      	adds	r2, r3, #4
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	9203      	str	r2, [sp, #12]
 8000b18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b1c:	3402      	adds	r4, #2
 8000b1e:	9305      	str	r3, [sp, #20]
 8000b20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000be4 <_svfiprintf_r+0x1f4>
 8000b24:	7821      	ldrb	r1, [r4, #0]
 8000b26:	2203      	movs	r2, #3
 8000b28:	4650      	mov	r0, sl
 8000b2a:	f7ff fb59 	bl	80001e0 <memchr>
 8000b2e:	b138      	cbz	r0, 8000b40 <_svfiprintf_r+0x150>
 8000b30:	9b04      	ldr	r3, [sp, #16]
 8000b32:	eba0 000a 	sub.w	r0, r0, sl
 8000b36:	2240      	movs	r2, #64	@ 0x40
 8000b38:	4082      	lsls	r2, r0
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	3401      	adds	r4, #1
 8000b3e:	9304      	str	r3, [sp, #16]
 8000b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b44:	4824      	ldr	r0, [pc, #144]	@ (8000bd8 <_svfiprintf_r+0x1e8>)
 8000b46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000b4a:	2206      	movs	r2, #6
 8000b4c:	f7ff fb48 	bl	80001e0 <memchr>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d036      	beq.n	8000bc2 <_svfiprintf_r+0x1d2>
 8000b54:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <_svfiprintf_r+0x1ec>)
 8000b56:	bb1b      	cbnz	r3, 8000ba0 <_svfiprintf_r+0x1b0>
 8000b58:	9b03      	ldr	r3, [sp, #12]
 8000b5a:	3307      	adds	r3, #7
 8000b5c:	f023 0307 	bic.w	r3, r3, #7
 8000b60:	3308      	adds	r3, #8
 8000b62:	9303      	str	r3, [sp, #12]
 8000b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000b66:	4433      	add	r3, r6
 8000b68:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b6a:	e76a      	b.n	8000a42 <_svfiprintf_r+0x52>
 8000b6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b70:	460c      	mov	r4, r1
 8000b72:	2001      	movs	r0, #1
 8000b74:	e7a8      	b.n	8000ac8 <_svfiprintf_r+0xd8>
 8000b76:	2300      	movs	r3, #0
 8000b78:	3401      	adds	r4, #1
 8000b7a:	9305      	str	r3, [sp, #20]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 0c0a 	mov.w	ip, #10
 8000b82:	4620      	mov	r0, r4
 8000b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b88:	3a30      	subs	r2, #48	@ 0x30
 8000b8a:	2a09      	cmp	r2, #9
 8000b8c:	d903      	bls.n	8000b96 <_svfiprintf_r+0x1a6>
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0c6      	beq.n	8000b20 <_svfiprintf_r+0x130>
 8000b92:	9105      	str	r1, [sp, #20]
 8000b94:	e7c4      	b.n	8000b20 <_svfiprintf_r+0x130>
 8000b96:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e7f0      	b.n	8000b82 <_svfiprintf_r+0x192>
 8000ba0:	ab03      	add	r3, sp, #12
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	462a      	mov	r2, r5
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <_svfiprintf_r+0x1f0>)
 8000ba8:	a904      	add	r1, sp, #16
 8000baa:	4638      	mov	r0, r7
 8000bac:	f3af 8000 	nop.w
 8000bb0:	1c42      	adds	r2, r0, #1
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	d1d6      	bne.n	8000b64 <_svfiprintf_r+0x174>
 8000bb6:	89ab      	ldrh	r3, [r5, #12]
 8000bb8:	065b      	lsls	r3, r3, #25
 8000bba:	f53f af2d 	bmi.w	8000a18 <_svfiprintf_r+0x28>
 8000bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000bc0:	e72c      	b.n	8000a1c <_svfiprintf_r+0x2c>
 8000bc2:	ab03      	add	r3, sp, #12
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	462a      	mov	r2, r5
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <_svfiprintf_r+0x1f0>)
 8000bca:	a904      	add	r1, sp, #16
 8000bcc:	4638      	mov	r0, r7
 8000bce:	f000 f879 	bl	8000cc4 <_printf_i>
 8000bd2:	e7ed      	b.n	8000bb0 <_svfiprintf_r+0x1c0>
 8000bd4:	0800105d 	.word	0x0800105d
 8000bd8:	08001067 	.word	0x08001067
 8000bdc:	00000000 	.word	0x00000000
 8000be0:	08000939 	.word	0x08000939
 8000be4:	08001063 	.word	0x08001063

08000be8 <_printf_common>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	4616      	mov	r6, r2
 8000bee:	4698      	mov	r8, r3
 8000bf0:	688a      	ldr	r2, [r1, #8]
 8000bf2:	690b      	ldr	r3, [r1, #16]
 8000bf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	bfb8      	it	lt
 8000bfc:	4613      	movlt	r3, r2
 8000bfe:	6033      	str	r3, [r6, #0]
 8000c00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c04:	4607      	mov	r7, r0
 8000c06:	460c      	mov	r4, r1
 8000c08:	b10a      	cbz	r2, 8000c0e <_printf_common+0x26>
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	6033      	str	r3, [r6, #0]
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	0699      	lsls	r1, r3, #26
 8000c12:	bf42      	ittt	mi
 8000c14:	6833      	ldrmi	r3, [r6, #0]
 8000c16:	3302      	addmi	r3, #2
 8000c18:	6033      	strmi	r3, [r6, #0]
 8000c1a:	6825      	ldr	r5, [r4, #0]
 8000c1c:	f015 0506 	ands.w	r5, r5, #6
 8000c20:	d106      	bne.n	8000c30 <_printf_common+0x48>
 8000c22:	f104 0a19 	add.w	sl, r4, #25
 8000c26:	68e3      	ldr	r3, [r4, #12]
 8000c28:	6832      	ldr	r2, [r6, #0]
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	42ab      	cmp	r3, r5
 8000c2e:	dc26      	bgt.n	8000c7e <_printf_common+0x96>
 8000c30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c34:	6822      	ldr	r2, [r4, #0]
 8000c36:	3b00      	subs	r3, #0
 8000c38:	bf18      	it	ne
 8000c3a:	2301      	movne	r3, #1
 8000c3c:	0692      	lsls	r2, r2, #26
 8000c3e:	d42b      	bmi.n	8000c98 <_printf_common+0xb0>
 8000c40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c44:	4641      	mov	r1, r8
 8000c46:	4638      	mov	r0, r7
 8000c48:	47c8      	blx	r9
 8000c4a:	3001      	adds	r0, #1
 8000c4c:	d01e      	beq.n	8000c8c <_printf_common+0xa4>
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	6922      	ldr	r2, [r4, #16]
 8000c52:	f003 0306 	and.w	r3, r3, #6
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf02      	ittt	eq
 8000c5a:	68e5      	ldreq	r5, [r4, #12]
 8000c5c:	6833      	ldreq	r3, [r6, #0]
 8000c5e:	1aed      	subeq	r5, r5, r3
 8000c60:	68a3      	ldr	r3, [r4, #8]
 8000c62:	bf0c      	ite	eq
 8000c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c68:	2500      	movne	r5, #0
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	bfc4      	itt	gt
 8000c6e:	1a9b      	subgt	r3, r3, r2
 8000c70:	18ed      	addgt	r5, r5, r3
 8000c72:	2600      	movs	r6, #0
 8000c74:	341a      	adds	r4, #26
 8000c76:	42b5      	cmp	r5, r6
 8000c78:	d11a      	bne.n	8000cb0 <_printf_common+0xc8>
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	e008      	b.n	8000c90 <_printf_common+0xa8>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4652      	mov	r2, sl
 8000c82:	4641      	mov	r1, r8
 8000c84:	4638      	mov	r0, r7
 8000c86:	47c8      	blx	r9
 8000c88:	3001      	adds	r0, #1
 8000c8a:	d103      	bne.n	8000c94 <_printf_common+0xac>
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	3501      	adds	r5, #1
 8000c96:	e7c6      	b.n	8000c26 <_printf_common+0x3e>
 8000c98:	18e1      	adds	r1, r4, r3
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	2030      	movs	r0, #48	@ 0x30
 8000c9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000ca2:	4422      	add	r2, r4
 8000ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000ca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000cac:	3302      	adds	r3, #2
 8000cae:	e7c7      	b.n	8000c40 <_printf_common+0x58>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	4622      	mov	r2, r4
 8000cb4:	4641      	mov	r1, r8
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	47c8      	blx	r9
 8000cba:	3001      	adds	r0, #1
 8000cbc:	d0e6      	beq.n	8000c8c <_printf_common+0xa4>
 8000cbe:	3601      	adds	r6, #1
 8000cc0:	e7d9      	b.n	8000c76 <_printf_common+0x8e>
	...

08000cc4 <_printf_i>:
 8000cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc8:	7e0f      	ldrb	r7, [r1, #24]
 8000cca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000ccc:	2f78      	cmp	r7, #120	@ 0x78
 8000cce:	4691      	mov	r9, r2
 8000cd0:	4680      	mov	r8, r0
 8000cd2:	460c      	mov	r4, r1
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000cda:	d807      	bhi.n	8000cec <_printf_i+0x28>
 8000cdc:	2f62      	cmp	r7, #98	@ 0x62
 8000cde:	d80a      	bhi.n	8000cf6 <_printf_i+0x32>
 8000ce0:	2f00      	cmp	r7, #0
 8000ce2:	f000 80d2 	beq.w	8000e8a <_printf_i+0x1c6>
 8000ce6:	2f58      	cmp	r7, #88	@ 0x58
 8000ce8:	f000 80b9 	beq.w	8000e5e <_printf_i+0x19a>
 8000cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000cf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000cf4:	e03a      	b.n	8000d6c <_printf_i+0xa8>
 8000cf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000cfa:	2b15      	cmp	r3, #21
 8000cfc:	d8f6      	bhi.n	8000cec <_printf_i+0x28>
 8000cfe:	a101      	add	r1, pc, #4	@ (adr r1, 8000d04 <_printf_i+0x40>)
 8000d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d04:	08000d5d 	.word	0x08000d5d
 8000d08:	08000d71 	.word	0x08000d71
 8000d0c:	08000ced 	.word	0x08000ced
 8000d10:	08000ced 	.word	0x08000ced
 8000d14:	08000ced 	.word	0x08000ced
 8000d18:	08000ced 	.word	0x08000ced
 8000d1c:	08000d71 	.word	0x08000d71
 8000d20:	08000ced 	.word	0x08000ced
 8000d24:	08000ced 	.word	0x08000ced
 8000d28:	08000ced 	.word	0x08000ced
 8000d2c:	08000ced 	.word	0x08000ced
 8000d30:	08000e71 	.word	0x08000e71
 8000d34:	08000d9b 	.word	0x08000d9b
 8000d38:	08000e2b 	.word	0x08000e2b
 8000d3c:	08000ced 	.word	0x08000ced
 8000d40:	08000ced 	.word	0x08000ced
 8000d44:	08000e93 	.word	0x08000e93
 8000d48:	08000ced 	.word	0x08000ced
 8000d4c:	08000d9b 	.word	0x08000d9b
 8000d50:	08000ced 	.word	0x08000ced
 8000d54:	08000ced 	.word	0x08000ced
 8000d58:	08000e33 	.word	0x08000e33
 8000d5c:	6833      	ldr	r3, [r6, #0]
 8000d5e:	1d1a      	adds	r2, r3, #4
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6032      	str	r2, [r6, #0]
 8000d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e09d      	b.n	8000eac <_printf_i+0x1e8>
 8000d70:	6833      	ldr	r3, [r6, #0]
 8000d72:	6820      	ldr	r0, [r4, #0]
 8000d74:	1d19      	adds	r1, r3, #4
 8000d76:	6031      	str	r1, [r6, #0]
 8000d78:	0606      	lsls	r6, r0, #24
 8000d7a:	d501      	bpl.n	8000d80 <_printf_i+0xbc>
 8000d7c:	681d      	ldr	r5, [r3, #0]
 8000d7e:	e003      	b.n	8000d88 <_printf_i+0xc4>
 8000d80:	0645      	lsls	r5, r0, #25
 8000d82:	d5fb      	bpl.n	8000d7c <_printf_i+0xb8>
 8000d84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	da03      	bge.n	8000d94 <_printf_i+0xd0>
 8000d8c:	232d      	movs	r3, #45	@ 0x2d
 8000d8e:	426d      	negs	r5, r5
 8000d90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d94:	4859      	ldr	r0, [pc, #356]	@ (8000efc <_printf_i+0x238>)
 8000d96:	230a      	movs	r3, #10
 8000d98:	e011      	b.n	8000dbe <_printf_i+0xfa>
 8000d9a:	6821      	ldr	r1, [r4, #0]
 8000d9c:	6833      	ldr	r3, [r6, #0]
 8000d9e:	0608      	lsls	r0, r1, #24
 8000da0:	f853 5b04 	ldr.w	r5, [r3], #4
 8000da4:	d402      	bmi.n	8000dac <_printf_i+0xe8>
 8000da6:	0649      	lsls	r1, r1, #25
 8000da8:	bf48      	it	mi
 8000daa:	b2ad      	uxthmi	r5, r5
 8000dac:	2f6f      	cmp	r7, #111	@ 0x6f
 8000dae:	4853      	ldr	r0, [pc, #332]	@ (8000efc <_printf_i+0x238>)
 8000db0:	6033      	str	r3, [r6, #0]
 8000db2:	bf14      	ite	ne
 8000db4:	230a      	movne	r3, #10
 8000db6:	2308      	moveq	r3, #8
 8000db8:	2100      	movs	r1, #0
 8000dba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000dbe:	6866      	ldr	r6, [r4, #4]
 8000dc0:	60a6      	str	r6, [r4, #8]
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	bfa2      	ittt	ge
 8000dc6:	6821      	ldrge	r1, [r4, #0]
 8000dc8:	f021 0104 	bicge.w	r1, r1, #4
 8000dcc:	6021      	strge	r1, [r4, #0]
 8000dce:	b90d      	cbnz	r5, 8000dd4 <_printf_i+0x110>
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d04b      	beq.n	8000e6c <_printf_i+0x1a8>
 8000dd4:	4616      	mov	r6, r2
 8000dd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8000dda:	fb03 5711 	mls	r7, r3, r1, r5
 8000dde:	5dc7      	ldrb	r7, [r0, r7]
 8000de0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000de4:	462f      	mov	r7, r5
 8000de6:	42bb      	cmp	r3, r7
 8000de8:	460d      	mov	r5, r1
 8000dea:	d9f4      	bls.n	8000dd6 <_printf_i+0x112>
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d10b      	bne.n	8000e08 <_printf_i+0x144>
 8000df0:	6823      	ldr	r3, [r4, #0]
 8000df2:	07df      	lsls	r7, r3, #31
 8000df4:	d508      	bpl.n	8000e08 <_printf_i+0x144>
 8000df6:	6923      	ldr	r3, [r4, #16]
 8000df8:	6861      	ldr	r1, [r4, #4]
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	bfde      	ittt	le
 8000dfe:	2330      	movle	r3, #48	@ 0x30
 8000e00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e08:	1b92      	subs	r2, r2, r6
 8000e0a:	6122      	str	r2, [r4, #16]
 8000e0c:	f8cd a000 	str.w	sl, [sp]
 8000e10:	464b      	mov	r3, r9
 8000e12:	aa03      	add	r2, sp, #12
 8000e14:	4621      	mov	r1, r4
 8000e16:	4640      	mov	r0, r8
 8000e18:	f7ff fee6 	bl	8000be8 <_printf_common>
 8000e1c:	3001      	adds	r0, #1
 8000e1e:	d14a      	bne.n	8000eb6 <_printf_i+0x1f2>
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	b004      	add	sp, #16
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	6023      	str	r3, [r4, #0]
 8000e32:	4833      	ldr	r0, [pc, #204]	@ (8000f00 <_printf_i+0x23c>)
 8000e34:	2778      	movs	r7, #120	@ 0x78
 8000e36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e3a:	6823      	ldr	r3, [r4, #0]
 8000e3c:	6831      	ldr	r1, [r6, #0]
 8000e3e:	061f      	lsls	r7, r3, #24
 8000e40:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e44:	d402      	bmi.n	8000e4c <_printf_i+0x188>
 8000e46:	065f      	lsls	r7, r3, #25
 8000e48:	bf48      	it	mi
 8000e4a:	b2ad      	uxthmi	r5, r5
 8000e4c:	6031      	str	r1, [r6, #0]
 8000e4e:	07d9      	lsls	r1, r3, #31
 8000e50:	bf44      	itt	mi
 8000e52:	f043 0320 	orrmi.w	r3, r3, #32
 8000e56:	6023      	strmi	r3, [r4, #0]
 8000e58:	b11d      	cbz	r5, 8000e62 <_printf_i+0x19e>
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	e7ac      	b.n	8000db8 <_printf_i+0xf4>
 8000e5e:	4827      	ldr	r0, [pc, #156]	@ (8000efc <_printf_i+0x238>)
 8000e60:	e7e9      	b.n	8000e36 <_printf_i+0x172>
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	f023 0320 	bic.w	r3, r3, #32
 8000e68:	6023      	str	r3, [r4, #0]
 8000e6a:	e7f6      	b.n	8000e5a <_printf_i+0x196>
 8000e6c:	4616      	mov	r6, r2
 8000e6e:	e7bd      	b.n	8000dec <_printf_i+0x128>
 8000e70:	6833      	ldr	r3, [r6, #0]
 8000e72:	6825      	ldr	r5, [r4, #0]
 8000e74:	6961      	ldr	r1, [r4, #20]
 8000e76:	1d18      	adds	r0, r3, #4
 8000e78:	6030      	str	r0, [r6, #0]
 8000e7a:	062e      	lsls	r6, r5, #24
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	d501      	bpl.n	8000e84 <_printf_i+0x1c0>
 8000e80:	6019      	str	r1, [r3, #0]
 8000e82:	e002      	b.n	8000e8a <_printf_i+0x1c6>
 8000e84:	0668      	lsls	r0, r5, #25
 8000e86:	d5fb      	bpl.n	8000e80 <_printf_i+0x1bc>
 8000e88:	8019      	strh	r1, [r3, #0]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	6123      	str	r3, [r4, #16]
 8000e8e:	4616      	mov	r6, r2
 8000e90:	e7bc      	b.n	8000e0c <_printf_i+0x148>
 8000e92:	6833      	ldr	r3, [r6, #0]
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	6032      	str	r2, [r6, #0]
 8000e98:	681e      	ldr	r6, [r3, #0]
 8000e9a:	6862      	ldr	r2, [r4, #4]
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	f7ff f99e 	bl	80001e0 <memchr>
 8000ea4:	b108      	cbz	r0, 8000eaa <_printf_i+0x1e6>
 8000ea6:	1b80      	subs	r0, r0, r6
 8000ea8:	6060      	str	r0, [r4, #4]
 8000eaa:	6863      	ldr	r3, [r4, #4]
 8000eac:	6123      	str	r3, [r4, #16]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000eb4:	e7aa      	b.n	8000e0c <_printf_i+0x148>
 8000eb6:	6923      	ldr	r3, [r4, #16]
 8000eb8:	4632      	mov	r2, r6
 8000eba:	4649      	mov	r1, r9
 8000ebc:	4640      	mov	r0, r8
 8000ebe:	47d0      	blx	sl
 8000ec0:	3001      	adds	r0, #1
 8000ec2:	d0ad      	beq.n	8000e20 <_printf_i+0x15c>
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	079b      	lsls	r3, r3, #30
 8000ec8:	d413      	bmi.n	8000ef2 <_printf_i+0x22e>
 8000eca:	68e0      	ldr	r0, [r4, #12]
 8000ecc:	9b03      	ldr	r3, [sp, #12]
 8000ece:	4298      	cmp	r0, r3
 8000ed0:	bfb8      	it	lt
 8000ed2:	4618      	movlt	r0, r3
 8000ed4:	e7a6      	b.n	8000e24 <_printf_i+0x160>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	4632      	mov	r2, r6
 8000eda:	4649      	mov	r1, r9
 8000edc:	4640      	mov	r0, r8
 8000ede:	47d0      	blx	sl
 8000ee0:	3001      	adds	r0, #1
 8000ee2:	d09d      	beq.n	8000e20 <_printf_i+0x15c>
 8000ee4:	3501      	adds	r5, #1
 8000ee6:	68e3      	ldr	r3, [r4, #12]
 8000ee8:	9903      	ldr	r1, [sp, #12]
 8000eea:	1a5b      	subs	r3, r3, r1
 8000eec:	42ab      	cmp	r3, r5
 8000eee:	dcf2      	bgt.n	8000ed6 <_printf_i+0x212>
 8000ef0:	e7eb      	b.n	8000eca <_printf_i+0x206>
 8000ef2:	2500      	movs	r5, #0
 8000ef4:	f104 0619 	add.w	r6, r4, #25
 8000ef8:	e7f5      	b.n	8000ee6 <_printf_i+0x222>
 8000efa:	bf00      	nop
 8000efc:	0800106e 	.word	0x0800106e
 8000f00:	0800107f 	.word	0x0800107f

08000f04 <memmove>:
 8000f04:	4288      	cmp	r0, r1
 8000f06:	b510      	push	{r4, lr}
 8000f08:	eb01 0402 	add.w	r4, r1, r2
 8000f0c:	d902      	bls.n	8000f14 <memmove+0x10>
 8000f0e:	4284      	cmp	r4, r0
 8000f10:	4623      	mov	r3, r4
 8000f12:	d807      	bhi.n	8000f24 <memmove+0x20>
 8000f14:	1e43      	subs	r3, r0, #1
 8000f16:	42a1      	cmp	r1, r4
 8000f18:	d008      	beq.n	8000f2c <memmove+0x28>
 8000f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f22:	e7f8      	b.n	8000f16 <memmove+0x12>
 8000f24:	4402      	add	r2, r0
 8000f26:	4601      	mov	r1, r0
 8000f28:	428a      	cmp	r2, r1
 8000f2a:	d100      	bne.n	8000f2e <memmove+0x2a>
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000f36:	e7f7      	b.n	8000f28 <memmove+0x24>

08000f38 <_sbrk_r>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4d06      	ldr	r5, [pc, #24]	@ (8000f54 <_sbrk_r+0x1c>)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	602b      	str	r3, [r5, #0]
 8000f44:	f7ff fb54 	bl	80005f0 <_sbrk>
 8000f48:	1c43      	adds	r3, r0, #1
 8000f4a:	d102      	bne.n	8000f52 <_sbrk_r+0x1a>
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	b103      	cbz	r3, 8000f52 <_sbrk_r+0x1a>
 8000f50:	6023      	str	r3, [r4, #0]
 8000f52:	bd38      	pop	{r3, r4, r5, pc}
 8000f54:	200002d0 	.word	0x200002d0

08000f58 <memcpy>:
 8000f58:	440a      	add	r2, r1
 8000f5a:	4291      	cmp	r1, r2
 8000f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f60:	d100      	bne.n	8000f64 <memcpy+0xc>
 8000f62:	4770      	bx	lr
 8000f64:	b510      	push	{r4, lr}
 8000f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f6e:	4291      	cmp	r1, r2
 8000f70:	d1f9      	bne.n	8000f66 <memcpy+0xe>
 8000f72:	bd10      	pop	{r4, pc}

08000f74 <_realloc_r>:
 8000f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f78:	4680      	mov	r8, r0
 8000f7a:	4615      	mov	r5, r2
 8000f7c:	460c      	mov	r4, r1
 8000f7e:	b921      	cbnz	r1, 8000f8a <_realloc_r+0x16>
 8000f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f84:	4611      	mov	r1, r2
 8000f86:	f7ff bc4b 	b.w	8000820 <_malloc_r>
 8000f8a:	b92a      	cbnz	r2, 8000f98 <_realloc_r+0x24>
 8000f8c:	f7ff fbdc 	bl	8000748 <_free_r>
 8000f90:	2400      	movs	r4, #0
 8000f92:	4620      	mov	r0, r4
 8000f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f98:	f000 f81a 	bl	8000fd0 <_malloc_usable_size_r>
 8000f9c:	4285      	cmp	r5, r0
 8000f9e:	4606      	mov	r6, r0
 8000fa0:	d802      	bhi.n	8000fa8 <_realloc_r+0x34>
 8000fa2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000fa6:	d8f4      	bhi.n	8000f92 <_realloc_r+0x1e>
 8000fa8:	4629      	mov	r1, r5
 8000faa:	4640      	mov	r0, r8
 8000fac:	f7ff fc38 	bl	8000820 <_malloc_r>
 8000fb0:	4607      	mov	r7, r0
 8000fb2:	2800      	cmp	r0, #0
 8000fb4:	d0ec      	beq.n	8000f90 <_realloc_r+0x1c>
 8000fb6:	42b5      	cmp	r5, r6
 8000fb8:	462a      	mov	r2, r5
 8000fba:	4621      	mov	r1, r4
 8000fbc:	bf28      	it	cs
 8000fbe:	4632      	movcs	r2, r6
 8000fc0:	f7ff ffca 	bl	8000f58 <memcpy>
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	4640      	mov	r0, r8
 8000fc8:	f7ff fbbe 	bl	8000748 <_free_r>
 8000fcc:	463c      	mov	r4, r7
 8000fce:	e7e0      	b.n	8000f92 <_realloc_r+0x1e>

08000fd0 <_malloc_usable_size_r>:
 8000fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fd4:	1f18      	subs	r0, r3, #4
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bfbc      	itt	lt
 8000fda:	580b      	ldrlt	r3, [r1, r0]
 8000fdc:	18c0      	addlt	r0, r0, r3
 8000fde:	4770      	bx	lr

08000fe0 <_init>:
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	bf00      	nop
 8000fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe6:	bc08      	pop	{r3}
 8000fe8:	469e      	mov	lr, r3
 8000fea:	4770      	bx	lr

08000fec <_fini>:
 8000fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fee:	bf00      	nop
 8000ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff2:	bc08      	pop	{r3}
 8000ff4:	469e      	mov	lr, r3
 8000ff6:	4770      	bx	lr
